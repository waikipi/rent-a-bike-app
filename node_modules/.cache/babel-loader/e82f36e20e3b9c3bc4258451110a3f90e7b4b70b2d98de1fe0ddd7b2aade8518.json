{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst RuntimeModule = require(\"../RuntimeModule\");\nconst Template = require(\"../Template\");\nconst {\n  compareModulesByIdentifier,\n  compareStrings\n} = require(\"../util/comparators\");\nclass ShareRuntimeModule extends RuntimeModule {\n  constructor() {\n    super(\"sharing\");\n  }\n\n  /**\n   * @returns {string} runtime code\n   */\n  generate() {\n    const {\n      compilation,\n      chunkGraph\n    } = this;\n    const {\n      runtimeTemplate,\n      codeGenerationResults,\n      outputOptions: {\n        uniqueName\n      }\n    } = compilation;\n    /** @type {Map<string, Map<number, Set<string>>>} */\n    const initCodePerScope = new Map();\n    for (const chunk of this.chunk.getAllReferencedChunks()) {\n      const modules = chunkGraph.getOrderedChunkModulesIterableBySourceType(chunk, \"share-init\", compareModulesByIdentifier);\n      if (!modules) continue;\n      for (const m of modules) {\n        const data = codeGenerationResults.getData(m, chunk.runtime, \"share-init\");\n        if (!data) continue;\n        for (const item of data) {\n          const {\n            shareScope,\n            initStage,\n            init\n          } = item;\n          let stages = initCodePerScope.get(shareScope);\n          if (stages === undefined) {\n            initCodePerScope.set(shareScope, stages = new Map());\n          }\n          let list = stages.get(initStage || 0);\n          if (list === undefined) {\n            stages.set(initStage || 0, list = new Set());\n          }\n          list.add(init);\n        }\n      }\n    }\n    return Template.asString([`${RuntimeGlobals.shareScopeMap} = {};`, \"var initPromises = {};\", \"var initTokens = {};\", `${RuntimeGlobals.initializeSharing} = ${runtimeTemplate.basicFunction(\"name, initScope\", [\"if(!initScope) initScope = [];\", \"// handling circular init calls\", \"var initToken = initTokens[name];\", \"if(!initToken) initToken = initTokens[name] = {};\", \"if(initScope.indexOf(initToken) >= 0) return;\", \"initScope.push(initToken);\", \"// only runs once\", \"if(initPromises[name]) return initPromises[name];\", \"// creates a new share scope if needed\", `if(!${RuntimeGlobals.hasOwnProperty}(${RuntimeGlobals.shareScopeMap}, name)) ${RuntimeGlobals.shareScopeMap}[name] = {};`, \"// runs all init snippets from all modules reachable\", `var scope = ${RuntimeGlobals.shareScopeMap}[name];`, `var warn = ${runtimeTemplate.returningFunction('typeof console !== \"undefined\" && console.warn && console.warn(msg)', \"msg\")};`, `var uniqueName = ${JSON.stringify(uniqueName || undefined)};`, `var register = ${runtimeTemplate.basicFunction(\"name, version, factory, eager\", [\"var versions = scope[name] = scope[name] || {};\", \"var activeVersion = versions[version];\", \"if(!activeVersion || (!activeVersion.loaded && (!eager != !activeVersion.eager ? eager : uniqueName > activeVersion.from))) versions[version] = { get: factory, from: uniqueName, eager: !!eager };\"])};`, `var initExternal = ${runtimeTemplate.basicFunction(\"id\", [`var handleError = ${runtimeTemplate.expressionFunction('warn(\"Initialization of sharing external failed: \" + err)', \"err\")};`, \"try {\", Template.indent([\"var module = __webpack_require__(id);\", \"if(!module) return;\", `var initFn = ${runtimeTemplate.returningFunction(`module && module.init && module.init(${RuntimeGlobals.shareScopeMap}[name], initScope)`, \"module\")}`, \"if(module.then) return promises.push(module.then(initFn, handleError));\", \"var initResult = initFn(module);\", \"if(initResult && initResult.then) return promises.push(initResult['catch'](handleError));\"]), \"} catch(err) { handleError(err); }\"])}`, \"var promises = [];\", \"switch(name) {\", ...Array.from(initCodePerScope).sort((_ref, _ref2) => {\n      let [a] = _ref;\n      let [b] = _ref2;\n      return compareStrings(a, b);\n    }).map(_ref3 => {\n      let [name, stages] = _ref3;\n      return Template.indent([`case ${JSON.stringify(name)}: {`, Template.indent(Array.from(stages).sort((_ref4, _ref5) => {\n        let [a] = _ref4;\n        let [b] = _ref5;\n        return a - b;\n      }).map(_ref6 => {\n        let [, initCode] = _ref6;\n        return Template.asString(Array.from(initCode));\n      })), \"}\", \"break;\"]);\n    }), \"}\", \"if(!promises.length) return initPromises[name] = 1;\", `return initPromises[name] = Promise.all(promises).then(${runtimeTemplate.returningFunction(\"initPromises[name] = 1\")});`])};`]);\n  }\n}\nmodule.exports = ShareRuntimeModule;","map":{"version":3,"names":["RuntimeGlobals","require","RuntimeModule","Template","compareModulesByIdentifier","compareStrings","ShareRuntimeModule","constructor","generate","compilation","chunkGraph","runtimeTemplate","codeGenerationResults","outputOptions","uniqueName","initCodePerScope","Map","chunk","getAllReferencedChunks","modules","getOrderedChunkModulesIterableBySourceType","m","data","getData","runtime","item","shareScope","initStage","init","stages","get","undefined","set","list","Set","add","asString","shareScopeMap","initializeSharing","basicFunction","hasOwnProperty","returningFunction","JSON","stringify","expressionFunction","indent","Array","from","sort","a","b","map","name","initCode","module","exports"],"sources":["C:/Users/galia/OneDrive/Escritorio/rent-a-bike-app/node_modules/webpack/lib/sharing/ShareRuntimeModule.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst RuntimeModule = require(\"../RuntimeModule\");\nconst Template = require(\"../Template\");\nconst {\n\tcompareModulesByIdentifier,\n\tcompareStrings\n} = require(\"../util/comparators\");\n\nclass ShareRuntimeModule extends RuntimeModule {\n\tconstructor() {\n\t\tsuper(\"sharing\");\n\t}\n\n\t/**\n\t * @returns {string} runtime code\n\t */\n\tgenerate() {\n\t\tconst { compilation, chunkGraph } = this;\n\t\tconst {\n\t\t\truntimeTemplate,\n\t\t\tcodeGenerationResults,\n\t\t\toutputOptions: { uniqueName }\n\t\t} = compilation;\n\t\t/** @type {Map<string, Map<number, Set<string>>>} */\n\t\tconst initCodePerScope = new Map();\n\t\tfor (const chunk of this.chunk.getAllReferencedChunks()) {\n\t\t\tconst modules = chunkGraph.getOrderedChunkModulesIterableBySourceType(\n\t\t\t\tchunk,\n\t\t\t\t\"share-init\",\n\t\t\t\tcompareModulesByIdentifier\n\t\t\t);\n\t\t\tif (!modules) continue;\n\t\t\tfor (const m of modules) {\n\t\t\t\tconst data = codeGenerationResults.getData(\n\t\t\t\t\tm,\n\t\t\t\t\tchunk.runtime,\n\t\t\t\t\t\"share-init\"\n\t\t\t\t);\n\t\t\t\tif (!data) continue;\n\t\t\t\tfor (const item of data) {\n\t\t\t\t\tconst { shareScope, initStage, init } = item;\n\t\t\t\t\tlet stages = initCodePerScope.get(shareScope);\n\t\t\t\t\tif (stages === undefined) {\n\t\t\t\t\t\tinitCodePerScope.set(shareScope, (stages = new Map()));\n\t\t\t\t\t}\n\t\t\t\t\tlet list = stages.get(initStage || 0);\n\t\t\t\t\tif (list === undefined) {\n\t\t\t\t\t\tstages.set(initStage || 0, (list = new Set()));\n\t\t\t\t\t}\n\t\t\t\t\tlist.add(init);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn Template.asString([\n\t\t\t`${RuntimeGlobals.shareScopeMap} = {};`,\n\t\t\t\"var initPromises = {};\",\n\t\t\t\"var initTokens = {};\",\n\t\t\t`${RuntimeGlobals.initializeSharing} = ${runtimeTemplate.basicFunction(\n\t\t\t\t\"name, initScope\",\n\t\t\t\t[\n\t\t\t\t\t\"if(!initScope) initScope = [];\",\n\t\t\t\t\t\"// handling circular init calls\",\n\t\t\t\t\t\"var initToken = initTokens[name];\",\n\t\t\t\t\t\"if(!initToken) initToken = initTokens[name] = {};\",\n\t\t\t\t\t\"if(initScope.indexOf(initToken) >= 0) return;\",\n\t\t\t\t\t\"initScope.push(initToken);\",\n\t\t\t\t\t\"// only runs once\",\n\t\t\t\t\t\"if(initPromises[name]) return initPromises[name];\",\n\t\t\t\t\t\"// creates a new share scope if needed\",\n\t\t\t\t\t`if(!${RuntimeGlobals.hasOwnProperty}(${RuntimeGlobals.shareScopeMap}, name)) ${RuntimeGlobals.shareScopeMap}[name] = {};`,\n\t\t\t\t\t\"// runs all init snippets from all modules reachable\",\n\t\t\t\t\t`var scope = ${RuntimeGlobals.shareScopeMap}[name];`,\n\t\t\t\t\t`var warn = ${runtimeTemplate.returningFunction(\n\t\t\t\t\t\t'typeof console !== \"undefined\" && console.warn && console.warn(msg)',\n\t\t\t\t\t\t\"msg\"\n\t\t\t\t\t)};`,\n\t\t\t\t\t`var uniqueName = ${JSON.stringify(uniqueName || undefined)};`,\n\t\t\t\t\t`var register = ${runtimeTemplate.basicFunction(\n\t\t\t\t\t\t\"name, version, factory, eager\",\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\"var versions = scope[name] = scope[name] || {};\",\n\t\t\t\t\t\t\t\"var activeVersion = versions[version];\",\n\t\t\t\t\t\t\t\"if(!activeVersion || (!activeVersion.loaded && (!eager != !activeVersion.eager ? eager : uniqueName > activeVersion.from))) versions[version] = { get: factory, from: uniqueName, eager: !!eager };\"\n\t\t\t\t\t\t]\n\t\t\t\t\t)};`,\n\t\t\t\t\t`var initExternal = ${runtimeTemplate.basicFunction(\"id\", [\n\t\t\t\t\t\t`var handleError = ${runtimeTemplate.expressionFunction(\n\t\t\t\t\t\t\t'warn(\"Initialization of sharing external failed: \" + err)',\n\t\t\t\t\t\t\t\"err\"\n\t\t\t\t\t\t)};`,\n\t\t\t\t\t\t\"try {\",\n\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\"var module = __webpack_require__(id);\",\n\t\t\t\t\t\t\t\"if(!module) return;\",\n\t\t\t\t\t\t\t`var initFn = ${runtimeTemplate.returningFunction(\n\t\t\t\t\t\t\t\t`module && module.init && module.init(${RuntimeGlobals.shareScopeMap}[name], initScope)`,\n\t\t\t\t\t\t\t\t\"module\"\n\t\t\t\t\t\t\t)}`,\n\t\t\t\t\t\t\t\"if(module.then) return promises.push(module.then(initFn, handleError));\",\n\t\t\t\t\t\t\t\"var initResult = initFn(module);\",\n\t\t\t\t\t\t\t\"if(initResult && initResult.then) return promises.push(initResult['catch'](handleError));\"\n\t\t\t\t\t\t]),\n\t\t\t\t\t\t\"} catch(err) { handleError(err); }\"\n\t\t\t\t\t])}`,\n\t\t\t\t\t\"var promises = [];\",\n\t\t\t\t\t\"switch(name) {\",\n\t\t\t\t\t...Array.from(initCodePerScope)\n\t\t\t\t\t\t.sort(([a], [b]) => compareStrings(a, b))\n\t\t\t\t\t\t.map(([name, stages]) =>\n\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t`case ${JSON.stringify(name)}: {`,\n\t\t\t\t\t\t\t\tTemplate.indent(\n\t\t\t\t\t\t\t\t\tArray.from(stages)\n\t\t\t\t\t\t\t\t\t\t.sort(([a], [b]) => a - b)\n\t\t\t\t\t\t\t\t\t\t.map(([, initCode]) =>\n\t\t\t\t\t\t\t\t\t\t\tTemplate.asString(Array.from(initCode))\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\"}\",\n\t\t\t\t\t\t\t\t\"break;\"\n\t\t\t\t\t\t\t])\n\t\t\t\t\t\t),\n\t\t\t\t\t\"}\",\n\t\t\t\t\t\"if(!promises.length) return initPromises[name] = 1;\",\n\t\t\t\t\t`return initPromises[name] = Promise.all(promises).then(${runtimeTemplate.returningFunction(\n\t\t\t\t\t\t\"initPromises[name] = 1\"\n\t\t\t\t\t)});`\n\t\t\t\t]\n\t\t\t)};`\n\t\t]);\n\t}\n}\n\nmodule.exports = ShareRuntimeModule;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}