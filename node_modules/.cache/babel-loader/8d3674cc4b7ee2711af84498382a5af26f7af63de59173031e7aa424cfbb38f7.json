{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst {\n  ConcatSource\n} = require(\"webpack-sources\");\nconst ExternalModule = require(\"../ExternalModule\");\nconst Template = require(\"../Template\");\nconst AbstractLibraryPlugin = require(\"./AbstractLibraryPlugin\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryOptions} LibraryOptions */\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryType} LibraryType */\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compilation\").ChunkHashContext} ChunkHashContext */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../javascript/JavascriptModulesPlugin\").RenderContext} RenderContext */\n/** @typedef {import(\"../util/Hash\")} Hash */\n/** @template T @typedef {import(\"./AbstractLibraryPlugin\").LibraryContext<T>} LibraryContext<T> */\n\n/**\n * @typedef {Object} AmdLibraryPluginOptions\n * @property {LibraryType} type\n * @property {boolean=} requireAsWrapper\n */\n\n/**\n * @typedef {Object} AmdLibraryPluginParsed\n * @property {string} name\n */\n\n/**\n * @typedef {AmdLibraryPluginParsed} T\n * @extends {AbstractLibraryPlugin<AmdLibraryPluginParsed>}\n */\nclass AmdLibraryPlugin extends AbstractLibraryPlugin {\n  /**\n   * @param {AmdLibraryPluginOptions} options the plugin options\n   */\n  constructor(options) {\n    super({\n      pluginName: \"AmdLibraryPlugin\",\n      type: options.type\n    });\n    this.requireAsWrapper = options.requireAsWrapper;\n  }\n\n  /**\n   * @param {LibraryOptions} library normalized library option\n   * @returns {T | false} preprocess as needed by overriding\n   */\n  parseOptions(library) {\n    const {\n      name\n    } = library;\n    if (this.requireAsWrapper) {\n      if (name) {\n        throw new Error(`AMD library name must be unset. ${AbstractLibraryPlugin.COMMON_LIBRARY_NAME_MESSAGE}`);\n      }\n    } else {\n      if (name && typeof name !== \"string\") {\n        throw new Error(`AMD library name must be a simple string or unset. ${AbstractLibraryPlugin.COMMON_LIBRARY_NAME_MESSAGE}`);\n      }\n    }\n    return {\n      name: /** @type {string=} */name\n    };\n  }\n\n  /**\n   * @param {Source} source source\n   * @param {RenderContext} renderContext render context\n   * @param {LibraryContext<T>} libraryContext context\n   * @returns {Source} source with library export\n   */\n  render(source, _ref, _ref2) {\n    let {\n      chunkGraph,\n      chunk,\n      runtimeTemplate\n    } = _ref;\n    let {\n      options,\n      compilation\n    } = _ref2;\n    const modern = runtimeTemplate.supportsArrowFunction();\n    const modules = chunkGraph.getChunkModules(chunk).filter(m => m instanceof ExternalModule);\n    const externals = /** @type {ExternalModule[]} */modules;\n    const externalsDepsArray = JSON.stringify(externals.map(m => typeof m.request === \"object\" && !Array.isArray(m.request) ? m.request.amd : m.request));\n    const externalsArguments = externals.map(m => `__WEBPACK_EXTERNAL_MODULE_${Template.toIdentifier(`${chunkGraph.getModuleId(m)}`)}__`).join(\", \");\n    const iife = runtimeTemplate.isIIFE();\n    const fnStart = (modern ? `(${externalsArguments}) => {` : `function(${externalsArguments}) {`) + (iife || !chunk.hasRuntime() ? \" return \" : \"\\n\");\n    const fnEnd = iife ? \";\\n}\" : \"\\n}\";\n    if (this.requireAsWrapper) {\n      return new ConcatSource(`require(${externalsDepsArray}, ${fnStart}`, source, `${fnEnd});`);\n    } else if (options.name) {\n      const name = compilation.getPath(options.name, {\n        chunk\n      });\n      return new ConcatSource(`define(${JSON.stringify(name)}, ${externalsDepsArray}, ${fnStart}`, source, `${fnEnd});`);\n    } else if (externalsArguments) {\n      return new ConcatSource(`define(${externalsDepsArray}, ${fnStart}`, source, `${fnEnd});`);\n    } else {\n      return new ConcatSource(`define(${fnStart}`, source, `${fnEnd});`);\n    }\n  }\n\n  /**\n   * @param {Chunk} chunk the chunk\n   * @param {Hash} hash hash\n   * @param {ChunkHashContext} chunkHashContext chunk hash context\n   * @param {LibraryContext<T>} libraryContext context\n   * @returns {void}\n   */\n  chunkHash(chunk, hash, chunkHashContext, _ref3) {\n    let {\n      options,\n      compilation\n    } = _ref3;\n    hash.update(\"AmdLibraryPlugin\");\n    if (this.requireAsWrapper) {\n      hash.update(\"requireAsWrapper\");\n    } else if (options.name) {\n      hash.update(\"named\");\n      const name = compilation.getPath(options.name, {\n        chunk\n      });\n      hash.update(name);\n    }\n  }\n}\nmodule.exports = AmdLibraryPlugin;","map":{"version":3,"names":["ConcatSource","require","ExternalModule","Template","AbstractLibraryPlugin","AmdLibraryPlugin","constructor","options","pluginName","type","requireAsWrapper","parseOptions","library","name","Error","COMMON_LIBRARY_NAME_MESSAGE","render","source","chunkGraph","chunk","runtimeTemplate","compilation","modern","supportsArrowFunction","modules","getChunkModules","filter","m","externals","externalsDepsArray","JSON","stringify","map","request","Array","isArray","amd","externalsArguments","toIdentifier","getModuleId","join","iife","isIIFE","fnStart","hasRuntime","fnEnd","getPath","chunkHash","hash","chunkHashContext","update","module","exports"],"sources":["C:/Users/galia/OneDrive/Escritorio/rent-a-bike-app/node_modules/webpack/lib/library/AmdLibraryPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { ConcatSource } = require(\"webpack-sources\");\nconst ExternalModule = require(\"../ExternalModule\");\nconst Template = require(\"../Template\");\nconst AbstractLibraryPlugin = require(\"./AbstractLibraryPlugin\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryOptions} LibraryOptions */\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryType} LibraryType */\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compilation\").ChunkHashContext} ChunkHashContext */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../javascript/JavascriptModulesPlugin\").RenderContext} RenderContext */\n/** @typedef {import(\"../util/Hash\")} Hash */\n/** @template T @typedef {import(\"./AbstractLibraryPlugin\").LibraryContext<T>} LibraryContext<T> */\n\n/**\n * @typedef {Object} AmdLibraryPluginOptions\n * @property {LibraryType} type\n * @property {boolean=} requireAsWrapper\n */\n\n/**\n * @typedef {Object} AmdLibraryPluginParsed\n * @property {string} name\n */\n\n/**\n * @typedef {AmdLibraryPluginParsed} T\n * @extends {AbstractLibraryPlugin<AmdLibraryPluginParsed>}\n */\nclass AmdLibraryPlugin extends AbstractLibraryPlugin {\n\t/**\n\t * @param {AmdLibraryPluginOptions} options the plugin options\n\t */\n\tconstructor(options) {\n\t\tsuper({\n\t\t\tpluginName: \"AmdLibraryPlugin\",\n\t\t\ttype: options.type\n\t\t});\n\t\tthis.requireAsWrapper = options.requireAsWrapper;\n\t}\n\n\t/**\n\t * @param {LibraryOptions} library normalized library option\n\t * @returns {T | false} preprocess as needed by overriding\n\t */\n\tparseOptions(library) {\n\t\tconst { name } = library;\n\t\tif (this.requireAsWrapper) {\n\t\t\tif (name) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`AMD library name must be unset. ${AbstractLibraryPlugin.COMMON_LIBRARY_NAME_MESSAGE}`\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tif (name && typeof name !== \"string\") {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`AMD library name must be a simple string or unset. ${AbstractLibraryPlugin.COMMON_LIBRARY_NAME_MESSAGE}`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tname: /** @type {string=} */ (name)\n\t\t};\n\t}\n\n\t/**\n\t * @param {Source} source source\n\t * @param {RenderContext} renderContext render context\n\t * @param {LibraryContext<T>} libraryContext context\n\t * @returns {Source} source with library export\n\t */\n\trender(\n\t\tsource,\n\t\t{ chunkGraph, chunk, runtimeTemplate },\n\t\t{ options, compilation }\n\t) {\n\t\tconst modern = runtimeTemplate.supportsArrowFunction();\n\t\tconst modules = chunkGraph\n\t\t\t.getChunkModules(chunk)\n\t\t\t.filter(m => m instanceof ExternalModule);\n\t\tconst externals = /** @type {ExternalModule[]} */ (modules);\n\t\tconst externalsDepsArray = JSON.stringify(\n\t\t\texternals.map(m =>\n\t\t\t\ttypeof m.request === \"object\" && !Array.isArray(m.request)\n\t\t\t\t\t? m.request.amd\n\t\t\t\t\t: m.request\n\t\t\t)\n\t\t);\n\t\tconst externalsArguments = externals\n\t\t\t.map(\n\t\t\t\tm =>\n\t\t\t\t\t`__WEBPACK_EXTERNAL_MODULE_${Template.toIdentifier(\n\t\t\t\t\t\t`${chunkGraph.getModuleId(m)}`\n\t\t\t\t\t)}__`\n\t\t\t)\n\t\t\t.join(\", \");\n\n\t\tconst iife = runtimeTemplate.isIIFE();\n\t\tconst fnStart =\n\t\t\t(modern\n\t\t\t\t? `(${externalsArguments}) => {`\n\t\t\t\t: `function(${externalsArguments}) {`) +\n\t\t\t(iife || !chunk.hasRuntime() ? \" return \" : \"\\n\");\n\t\tconst fnEnd = iife ? \";\\n}\" : \"\\n}\";\n\n\t\tif (this.requireAsWrapper) {\n\t\t\treturn new ConcatSource(\n\t\t\t\t`require(${externalsDepsArray}, ${fnStart}`,\n\t\t\t\tsource,\n\t\t\t\t`${fnEnd});`\n\t\t\t);\n\t\t} else if (options.name) {\n\t\t\tconst name = compilation.getPath(options.name, {\n\t\t\t\tchunk\n\t\t\t});\n\n\t\t\treturn new ConcatSource(\n\t\t\t\t`define(${JSON.stringify(name)}, ${externalsDepsArray}, ${fnStart}`,\n\t\t\t\tsource,\n\t\t\t\t`${fnEnd});`\n\t\t\t);\n\t\t} else if (externalsArguments) {\n\t\t\treturn new ConcatSource(\n\t\t\t\t`define(${externalsDepsArray}, ${fnStart}`,\n\t\t\t\tsource,\n\t\t\t\t`${fnEnd});`\n\t\t\t);\n\t\t} else {\n\t\t\treturn new ConcatSource(`define(${fnStart}`, source, `${fnEnd});`);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Chunk} chunk the chunk\n\t * @param {Hash} hash hash\n\t * @param {ChunkHashContext} chunkHashContext chunk hash context\n\t * @param {LibraryContext<T>} libraryContext context\n\t * @returns {void}\n\t */\n\tchunkHash(chunk, hash, chunkHashContext, { options, compilation }) {\n\t\thash.update(\"AmdLibraryPlugin\");\n\t\tif (this.requireAsWrapper) {\n\t\t\thash.update(\"requireAsWrapper\");\n\t\t} else if (options.name) {\n\t\t\thash.update(\"named\");\n\t\t\tconst name = compilation.getPath(options.name, {\n\t\t\t\tchunk\n\t\t\t});\n\t\t\thash.update(name);\n\t\t}\n\t}\n}\n\nmodule.exports = AmdLibraryPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}