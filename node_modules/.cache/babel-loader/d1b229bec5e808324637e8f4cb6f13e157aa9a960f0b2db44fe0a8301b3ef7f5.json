{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\galia\\\\OneDrive\\\\Escritorio\\\\rent-a-bike-app\\\\src\\\\components\\\\CheckoutForm.js\",\n  _s = $RefreshSig$();\n/*import React, { useState } from \"react\";\r\n\r\nimport {\r\n  CardElement,\r\n  useStripe,\r\n  useElements,\r\n} from \"@stripe/react-stripe-js\";\r\n\r\nimport axios from \"axios\";\r\n\r\n\r\nconst CheckoutForm = () => {\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const { error, paymentMethod } = await stripe.createPaymentMethod({\r\n      type: \"card\",\r\n      card: elements.getElement(CardElement),\r\n    });\r\n    setLoading(true);\r\n\r\n    if (!error) {\r\n       console.log(paymentMethod)\r\n      const { id } = paymentMethod;\r\n      try {\r\n        const { data } = await axios.post(\r\n          \"http://localhost:3001/checkout\",\r\n          {\r\n            id,\r\n            amount: 10000, \r\n          }\r\n        );\r\n        console.log(data);\r\n\r\n        elements.getElement(CardElement).clear();\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  console.log(!stripe || loading);\r\n\r\n  return (\r\n    \r\n      <div className=\"container p-4\">\r\n        <div className=\"row h-100\">\r\n          <div className=\"col-md-4 offset-md-4 h-100\">\r\n\t\t  \t<form className=\"card card-body\" onSubmit={handleSubmit}>\r\n\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t<CardElement />\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<button disabled={!stripe} className=\"btn btn-success\">\r\n\t\t\t\t{loading ? (\r\n\t\t\t\t\t<div className=\"spinner-border text-light\" role=\"status\">\r\n\t\t\t\t\t\t<span className=\"sr-only\">Loading...</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t\"Pay\"\r\n\t\t\t\t)}\r\n\t\t\t\t</button>\r\n\t\t\t\t</form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default CheckoutForm*/\n\nimport React, { useState, useEffect } from \"react\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CheckoutForm() {\n  _s();\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState('');\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState('');\n  const stripe = useStripe();\n  const elements = useElements();\n  useEffect(() => {\n    // Create PaymentIntent as soon as the page loads\n\n    fetch(\"/create-payment-intent\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        items: [{\n          id: \"xl-tshirt\"\n        }]\n      })\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      setClientSecret(data.clientSecret);\n    });\n  }, []);\n  const cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        fontFamily: 'Arial, sans-serif',\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n  const handleChange = async event => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    });\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    id: \"payment-form\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(CardElement, {\n      id: \"card-element\",\n      options: cardStyle,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: processing || disabled || succeeded,\n      id: \"submit\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"button-text\",\n        children: processing ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\",\n          id: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this) : \"Pay now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-error\",\n      role: \"alert\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: succeeded ? \"result-message\" : \"result-message hidden\",\n      children: [\"Payment succeeded, see the result in your\", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `https://dashboard.stripe.com/test/payments`,\n        children: [\" \", \"Stripe dashboard.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), \" Refresh the page to pay again.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n}\n_s(CheckoutForm, \"ldxvBX7QZH5+6XNpO6E4nXjWQL0=\", false, function () {\n  return [useStripe, useElements];\n});\n_c = CheckoutForm;\nvar _c;\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"names":["React","useState","useEffect","CardElement","useStripe","useElements","CheckoutForm","succeeded","setSucceeded","error","setError","processing","setProcessing","disabled","setDisabled","clientSecret","setClientSecret","stripe","elements","fetch","method","headers","body","JSON","stringify","items","id","then","res","json","data","cardStyle","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","handleChange","event","empty","message","handleSubmit","ev","preventDefault","payload","confirmCardPayment","payment_method","card","getElement"],"sources":["C:/Users/galia/OneDrive/Escritorio/rent-a-bike-app/src/components/CheckoutForm.js"],"sourcesContent":["/*import React, { useState } from \"react\";\r\n\r\nimport {\r\n  CardElement,\r\n  useStripe,\r\n  useElements,\r\n} from \"@stripe/react-stripe-js\";\r\n\r\nimport axios from \"axios\";\r\n\r\n\r\nconst CheckoutForm = () => {\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const { error, paymentMethod } = await stripe.createPaymentMethod({\r\n      type: \"card\",\r\n      card: elements.getElement(CardElement),\r\n    });\r\n    setLoading(true);\r\n\r\n    if (!error) {\r\n       console.log(paymentMethod)\r\n      const { id } = paymentMethod;\r\n      try {\r\n        const { data } = await axios.post(\r\n          \"http://localhost:3001/checkout\",\r\n          {\r\n            id,\r\n            amount: 10000, \r\n          }\r\n        );\r\n        console.log(data);\r\n\r\n        elements.getElement(CardElement).clear();\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  console.log(!stripe || loading);\r\n\r\n  return (\r\n    \r\n      <div className=\"container p-4\">\r\n        <div className=\"row h-100\">\r\n          <div className=\"col-md-4 offset-md-4 h-100\">\r\n\t\t  \t<form className=\"card card-body\" onSubmit={handleSubmit}>\r\n\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t<CardElement />\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<button disabled={!stripe} className=\"btn btn-success\">\r\n\t\t\t\t{loading ? (\r\n\t\t\t\t\t<div className=\"spinner-border text-light\" role=\"status\">\r\n\t\t\t\t\t\t<span className=\"sr-only\">Loading...</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t\"Pay\"\r\n\t\t\t\t)}\r\n\t\t\t\t</button>\r\n\t\t\t\t</form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default CheckoutForm*/\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CardElement,\r\n  useStripe,\r\n  useElements\r\n} from \"@stripe/react-stripe-js\";\r\n\r\nexport default function CheckoutForm() {\r\n  const [succeeded, setSucceeded] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [processing, setProcessing] = useState('');\r\n  const [disabled, setDisabled] = useState(true);\r\n  const [clientSecret, setClientSecret] = useState('');\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n\r\n  useEffect(() => {\r\n    // Create PaymentIntent as soon as the page loads\r\n    \r\n      fetch(\"/create-payment-intent\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({items: [{ id: \"xl-tshirt\" }]})\r\n      })\r\n      .then(res => {\r\n        return res.json();\r\n      })\r\n      .then(data => {\r\n        setClientSecret(data.clientSecret);\r\n      });\r\n  }, []);\r\n\r\n  const cardStyle = {\r\n    style: {\r\n      base: {\r\n        color: \"#32325d\",\r\n        fontFamily: 'Arial, sans-serif',\r\n        fontSmoothing: \"antialiased\",\r\n        fontSize: \"16px\",\r\n        \"::placeholder\": {\r\n          color: \"#32325d\"\r\n        }\r\n      },\r\n      invalid: {\r\n        fontFamily: 'Arial, sans-serif',\r\n        color: \"#fa755a\",\r\n        iconColor: \"#fa755a\"\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleChange = async (event) => {\r\n    // Listen for changes in the CardElement\r\n    // and display any errors as the customer types their card details\r\n    setDisabled(event.empty);\r\n    setError(event.error ? event.error.message : \"\");\r\n  };\r\n\r\n  const handleSubmit = async ev => {\r\n    ev.preventDefault();\r\n    setProcessing(true);\r\n\r\n    const payload = await stripe.confirmCardPayment(clientSecret, {\r\n      payment_method: {\r\n        card: elements.getElement(CardElement)\r\n      }\r\n    });\r\n\r\n    if (payload.error) {\r\n      setError(`Payment failed ${payload.error.message}`);\r\n      setProcessing(false);\r\n    } else {\r\n      setError(null);\r\n      setProcessing(false);\r\n      setSucceeded(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form id=\"payment-form\" onSubmit={handleSubmit}>\r\n      <CardElement id=\"card-element\" options={cardStyle} onChange={handleChange} />\r\n      <button\r\n        disabled={processing || disabled || succeeded}\r\n        id=\"submit\"\r\n      >\r\n        <span id=\"button-text\">\r\n          {processing ? (\r\n            <div className=\"spinner\" id=\"spinner\"></div>\r\n          ) : (\r\n            \"Pay now\"\r\n          )}\r\n        </span>\r\n      </button>\r\n      {/* Show any error that happens when processing the payment */}\r\n      {error && (\r\n        <div className=\"card-error\" role=\"alert\">\r\n          {error}\r\n        </div>\r\n      )}\r\n      {/* Show a success message upon completion */}\r\n      <p className={succeeded ? \"result-message\" : \"result-message hidden\"}>\r\n        Payment succeeded, see the result in your\r\n        <a\r\n          href={`https://dashboard.stripe.com/test/payments`}\r\n        >\r\n          {\" \"}\r\n          Stripe dashboard.\r\n        </a> Refresh the page to pay again.\r\n      </p>\r\n    </form>\r\n  );\r\n}"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SACEC,WAAW,EACXC,SAAS,EACTC,WAAW,QACN,yBAAyB;AAAC;AAEjC,eAAe,SAASC,YAAY,GAAG;EAAA;EACrC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACc,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAMgB,MAAM,GAAGb,SAAS,EAAE;EAC1B,MAAMc,QAAQ,GAAGb,WAAW,EAAE;EAE9BH,SAAS,CAAC,MAAM;IACd;;IAEEiB,KAAK,CAAC,wBAAwB,EAAE;MAC9BC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACC,KAAK,EAAE,CAAC;UAAEC,EAAE,EAAE;QAAY,CAAC;MAAC,CAAC;IACrD,CAAC,CAAC,CACDC,IAAI,CAACC,GAAG,IAAI;MACX,OAAOA,GAAG,CAACC,IAAI,EAAE;IACnB,CAAC,CAAC,CACDF,IAAI,CAACG,IAAI,IAAI;MACZd,eAAe,CAACc,IAAI,CAACf,YAAY,CAAC;IACpC,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMgB,SAAS,GAAG;IAChBC,KAAK,EAAE;MACLC,IAAI,EAAE;QACJC,KAAK,EAAE,SAAS;QAChBC,UAAU,EAAE,mBAAmB;QAC/BC,aAAa,EAAE,aAAa;QAC5BC,QAAQ,EAAE,MAAM;QAChB,eAAe,EAAE;UACfH,KAAK,EAAE;QACT;MACF,CAAC;MACDI,OAAO,EAAE;QACPH,UAAU,EAAE,mBAAmB;QAC/BD,KAAK,EAAE,SAAS;QAChBK,SAAS,EAAE;MACb;IACF;EACF,CAAC;EAED,MAAMC,YAAY,GAAG,MAAOC,KAAK,IAAK;IACpC;IACA;IACA3B,WAAW,CAAC2B,KAAK,CAACC,KAAK,CAAC;IACxBhC,QAAQ,CAAC+B,KAAK,CAAChC,KAAK,GAAGgC,KAAK,CAAChC,KAAK,CAACkC,OAAO,GAAG,EAAE,CAAC;EAClD,CAAC;EAED,MAAMC,YAAY,GAAG,MAAMC,EAAE,IAAI;IAC/BA,EAAE,CAACC,cAAc,EAAE;IACnBlC,aAAa,CAAC,IAAI,CAAC;IAEnB,MAAMmC,OAAO,GAAG,MAAM9B,MAAM,CAAC+B,kBAAkB,CAACjC,YAAY,EAAE;MAC5DkC,cAAc,EAAE;QACdC,IAAI,EAAEhC,QAAQ,CAACiC,UAAU,CAAChD,WAAW;MACvC;IACF,CAAC,CAAC;IAEF,IAAI4C,OAAO,CAACtC,KAAK,EAAE;MACjBC,QAAQ,CAAE,kBAAiBqC,OAAO,CAACtC,KAAK,CAACkC,OAAQ,EAAC,CAAC;MACnD/B,aAAa,CAAC,KAAK,CAAC;IACtB,CAAC,MAAM;MACLF,QAAQ,CAAC,IAAI,CAAC;MACdE,aAAa,CAAC,KAAK,CAAC;MACpBJ,YAAY,CAAC,IAAI,CAAC;IACpB;EACF,CAAC;EAED,oBACE;IAAM,EAAE,EAAC,cAAc;IAAC,QAAQ,EAAEoC,YAAa;IAAA,wBAC7C,QAAC,WAAW;MAAC,EAAE,EAAC,cAAc;MAAC,OAAO,EAAEb,SAAU;MAAC,QAAQ,EAAES;IAAa;MAAA;MAAA;MAAA;IAAA,QAAG,eAC7E;MACE,QAAQ,EAAE7B,UAAU,IAAIE,QAAQ,IAAIN,SAAU;MAC9C,EAAE,EAAC,QAAQ;MAAA,uBAEX;QAAM,EAAE,EAAC,aAAa;QAAA,UACnBI,UAAU,gBACT;UAAK,SAAS,EAAC,SAAS;UAAC,EAAE,EAAC;QAAS;UAAA;UAAA;UAAA;QAAA,QAAO,GAE5C;MACD;QAAA;QAAA;QAAA;MAAA;IACI;MAAA;MAAA;MAAA;IAAA,QACA,EAERF,KAAK,iBACJ;MAAK,SAAS,EAAC,YAAY;MAAC,IAAI,EAAC,OAAO;MAAA,UACrCA;IAAK;MAAA;MAAA;MAAA;IAAA,QAET,eAED;MAAG,SAAS,EAAEF,SAAS,GAAG,gBAAgB,GAAG,uBAAwB;MAAA,qEAEnE;QACE,IAAI,EAAG,4CAA4C;QAAA,WAElD,GAAG;MAAA;QAAA;QAAA;QAAA;MAAA,QAEF;IAAA;MAAA;MAAA;MAAA;IAAA,QACF;EAAA;IAAA;IAAA;IAAA;EAAA,QACC;AAEX;AAAC,GA1GuBD,YAAY;EAAA,QAMnBF,SAAS,EACPC,WAAW;AAAA;AAAA,KAPNC,YAAY;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}