{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst ConstDependency = require(\"./dependencies/ConstDependency\");\nconst ProvidedDependency = require(\"./dependencies/ProvidedDependency\");\nconst {\n  approve\n} = require(\"./javascript/JavascriptParserHelpers\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\nclass ProvidePlugin {\n  /**\n   * @param {Record<string, string | string[]>} definitions the provided identifiers\n   */\n  constructor(definitions) {\n    this.definitions = definitions;\n  }\n\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    const definitions = this.definitions;\n    compiler.hooks.compilation.tap(\"ProvidePlugin\", (compilation, _ref) => {\n      let {\n        normalModuleFactory\n      } = _ref;\n      compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());\n      compilation.dependencyFactories.set(ProvidedDependency, normalModuleFactory);\n      compilation.dependencyTemplates.set(ProvidedDependency, new ProvidedDependency.Template());\n      const handler = (parser, parserOptions) => {\n        Object.keys(definitions).forEach(name => {\n          const request = [].concat(definitions[name]);\n          const splittedName = name.split(\".\");\n          if (splittedName.length > 0) {\n            splittedName.slice(1).forEach((_, i) => {\n              const name = splittedName.slice(0, i + 1).join(\".\");\n              parser.hooks.canRename.for(name).tap(\"ProvidePlugin\", approve);\n            });\n          }\n          parser.hooks.expression.for(name).tap(\"ProvidePlugin\", expr => {\n            const nameIdentifier = name.includes(\".\") ? `__webpack_provided_${name.replace(/\\./g, \"_dot_\")}` : name;\n            const dep = new ProvidedDependency(request[0], nameIdentifier, request.slice(1), expr.range);\n            dep.loc = expr.loc;\n            parser.state.module.addDependency(dep);\n            return true;\n          });\n          parser.hooks.call.for(name).tap(\"ProvidePlugin\", expr => {\n            const nameIdentifier = name.includes(\".\") ? `__webpack_provided_${name.replace(/\\./g, \"_dot_\")}` : name;\n            const dep = new ProvidedDependency(request[0], nameIdentifier, request.slice(1), expr.callee.range);\n            dep.loc = expr.callee.loc;\n            parser.state.module.addDependency(dep);\n            parser.walkExpressions(expr.arguments);\n            return true;\n          });\n        });\n      };\n      normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"ProvidePlugin\", handler);\n      normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"ProvidePlugin\", handler);\n      normalModuleFactory.hooks.parser.for(\"javascript/esm\").tap(\"ProvidePlugin\", handler);\n    });\n  }\n}\nmodule.exports = ProvidePlugin;","map":{"version":3,"names":["ConstDependency","require","ProvidedDependency","approve","ProvidePlugin","constructor","definitions","apply","compiler","hooks","compilation","tap","normalModuleFactory","dependencyTemplates","set","Template","dependencyFactories","handler","parser","parserOptions","Object","keys","forEach","name","request","concat","splittedName","split","length","slice","_","i","join","canRename","for","expression","expr","nameIdentifier","includes","replace","dep","range","loc","state","module","addDependency","call","callee","walkExpressions","arguments","exports"],"sources":["C:/Users/galia/OneDrive/Escritorio/rent-a-bike-app/node_modules/webpack/lib/ProvidePlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst ConstDependency = require(\"./dependencies/ConstDependency\");\nconst ProvidedDependency = require(\"./dependencies/ProvidedDependency\");\nconst { approve } = require(\"./javascript/JavascriptParserHelpers\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\nclass ProvidePlugin {\n\t/**\n\t * @param {Record<string, string | string[]>} definitions the provided identifiers\n\t */\n\tconstructor(definitions) {\n\t\tthis.definitions = definitions;\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst definitions = this.definitions;\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"ProvidePlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tConstDependency,\n\t\t\t\t\tnew ConstDependency.Template()\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tProvidedDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tProvidedDependency,\n\t\t\t\t\tnew ProvidedDependency.Template()\n\t\t\t\t);\n\t\t\t\tconst handler = (parser, parserOptions) => {\n\t\t\t\t\tObject.keys(definitions).forEach(name => {\n\t\t\t\t\t\tconst request = [].concat(definitions[name]);\n\t\t\t\t\t\tconst splittedName = name.split(\".\");\n\t\t\t\t\t\tif (splittedName.length > 0) {\n\t\t\t\t\t\t\tsplittedName.slice(1).forEach((_, i) => {\n\t\t\t\t\t\t\t\tconst name = splittedName.slice(0, i + 1).join(\".\");\n\t\t\t\t\t\t\t\tparser.hooks.canRename.for(name).tap(\"ProvidePlugin\", approve);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tparser.hooks.expression.for(name).tap(\"ProvidePlugin\", expr => {\n\t\t\t\t\t\t\tconst nameIdentifier = name.includes(\".\")\n\t\t\t\t\t\t\t\t? `__webpack_provided_${name.replace(/\\./g, \"_dot_\")}`\n\t\t\t\t\t\t\t\t: name;\n\t\t\t\t\t\t\tconst dep = new ProvidedDependency(\n\t\t\t\t\t\t\t\trequest[0],\n\t\t\t\t\t\t\t\tnameIdentifier,\n\t\t\t\t\t\t\t\trequest.slice(1),\n\t\t\t\t\t\t\t\texpr.range\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tdep.loc = expr.loc;\n\t\t\t\t\t\t\tparser.state.module.addDependency(dep);\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tparser.hooks.call.for(name).tap(\"ProvidePlugin\", expr => {\n\t\t\t\t\t\t\tconst nameIdentifier = name.includes(\".\")\n\t\t\t\t\t\t\t\t? `__webpack_provided_${name.replace(/\\./g, \"_dot_\")}`\n\t\t\t\t\t\t\t\t: name;\n\t\t\t\t\t\t\tconst dep = new ProvidedDependency(\n\t\t\t\t\t\t\t\trequest[0],\n\t\t\t\t\t\t\t\tnameIdentifier,\n\t\t\t\t\t\t\t\trequest.slice(1),\n\t\t\t\t\t\t\t\texpr.callee.range\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tdep.loc = expr.callee.loc;\n\t\t\t\t\t\t\tparser.state.module.addDependency(dep);\n\t\t\t\t\t\t\tparser.walkExpressions(expr.arguments);\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/auto\")\n\t\t\t\t\t.tap(\"ProvidePlugin\", handler);\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/dynamic\")\n\t\t\t\t\t.tap(\"ProvidePlugin\", handler);\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/esm\")\n\t\t\t\t\t.tap(\"ProvidePlugin\", handler);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = ProvidePlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}