{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\galia\\\\OneDrive\\\\Escritorio\\\\rent-a-bike-app\\\\src\\\\components\\\\CheckoutForm.js\",\n  _s = $RefreshSig$();\n/*import React, { useState } from \"react\";\r\n\r\nimport {\r\n  CardElement,\r\n  useStripe,\r\n  useElements,\r\n} from \"@stripe/react-stripe-js\";\r\n\r\nimport axios from \"axios\";\r\n\r\n\r\nconst CheckoutForm = () => {\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  \r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const { error, paymentMethod } = await stripe.createPaymentMethod({\r\n      type: \"card\",\r\n      card: elements.getElement(CardElement),\r\n    });\r\n    setLoading(true);\r\n\t\r\n\r\n    if (!error) {\r\n       console.log(paymentMethod)\r\n      const { id } = paymentMethod;\r\n      try {\r\n        const { data } = await axios.post(\r\n          \"http://localhost:3001/checkout\",\r\n          {\r\n            id,\r\n            amount: 10000, \r\n          }\r\n        );\r\n        console.log(data);\r\n\r\n\r\n        elements.getElement(CardElement).clear();\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  console.log(!stripe || loading);\r\n\r\n  return (\r\n    \r\n      <div className=\"container p-4\">\r\n        <div className=\"row h-100\">\r\n          <div className=\"col-md-4 offset-md-4 h-100\">\r\n\t\t  \t<form className=\"card card-body\" onSubmit={handleSubmit}>\r\n\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t<CardElement />\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<button disabled={!stripe} className=\"btn btn-success\">\r\n\t\t\t\t{loading ? (\r\n\t\t\t\t\t<div className=\"spinner-border text-light\" role=\"status\">\r\n\t\t\t\t\t\t<span className=\"sr-only\">Loading...</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t\"Pay\"\r\n\t\t\t\t)}\r\n\t\t\t\t</button>\r\n\t\t\t\t</form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default CheckoutForm*/\n\nimport React, { useEffect, useState } from \"react\";\nimport { PaymentElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CheckoutForm() {\n  _s();\n  const stripe = useStripe();\n  const elements = useElements();\n  const [email, setEmail] = useState('');\n  const [message, setMessage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    if (!stripe) {\n      return;\n    }\n    stripe.retrievePaymentIntent(clientSecret).then(_ref => {\n      let {\n        paymentIntent\n      } = _ref;\n      switch (paymentIntent.status) {\n        case \"succeeded\":\n          setMessage(\"Payment succeeded!\");\n          break;\n        case \"processing\":\n          setMessage(\"Your payment is processing.\");\n          break;\n        case \"requires_payment_method\":\n          setMessage(\"Your payment was not successful, please try again.\");\n          break;\n        default:\n          setMessage(\"Something went wrong.\");\n          break;\n      }\n    });\n  }, [stripe]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n    setIsLoading(true);\n    const {\n      error\n    } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        // Make sure to change this to your payment completion page\n        return_url: \"http://localhost:3000\"\n      }\n    });\n\n    // This point will only be reached if there is an immediate error when\n    // confirming the payment. Otherwise, your customer will be redirected to\n    // your `return_url`. For some payment methods like iDEAL, your customer will\n    // be redirected to an intermediate site first to authorize the payment, then\n    // redirected to the `return_url`.\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\n      setMessage(error.message);\n    } else {\n      setMessage(\"An unexpected error occurred.\");\n    }\n    setIsLoading(false);\n  };\n  const paymentElementOptions = {\n    layout: \"tabs\"\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    id: \"payment-form\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(PaymentElement, {\n      id: \"payment-element\",\n      options: paymentElementOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: isLoading || !stripe || !elements,\n      id: \"submit\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"button-text\",\n        children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\",\n          id: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 24\n        }, this) : \"Pay now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"payment-message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n}\n_s(CheckoutForm, \"QLTTByFFBVhqwqGjmfXowzW0mp0=\", false, function () {\n  return [useStripe, useElements];\n});\n_c = CheckoutForm;\nvar _c;\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"names":["React","useEffect","useState","PaymentElement","useStripe","useElements","CheckoutForm","stripe","elements","email","setEmail","message","setMessage","isLoading","setIsLoading","retrievePaymentIntent","clientSecret","then","paymentIntent","status","handleSubmit","e","preventDefault","error","confirmPayment","confirmParams","return_url","type","paymentElementOptions","layout"],"sources":["C:/Users/galia/OneDrive/Escritorio/rent-a-bike-app/src/components/CheckoutForm.js"],"sourcesContent":["/*import React, { useState } from \"react\";\r\n\r\nimport {\r\n  CardElement,\r\n  useStripe,\r\n  useElements,\r\n} from \"@stripe/react-stripe-js\";\r\n\r\nimport axios from \"axios\";\r\n\r\n\r\nconst CheckoutForm = () => {\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  \r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const { error, paymentMethod } = await stripe.createPaymentMethod({\r\n      type: \"card\",\r\n      card: elements.getElement(CardElement),\r\n    });\r\n    setLoading(true);\r\n\t\r\n\r\n    if (!error) {\r\n       console.log(paymentMethod)\r\n      const { id } = paymentMethod;\r\n      try {\r\n        const { data } = await axios.post(\r\n          \"http://localhost:3001/checkout\",\r\n          {\r\n            id,\r\n            amount: 10000, \r\n          }\r\n        );\r\n        console.log(data);\r\n\r\n\r\n        elements.getElement(CardElement).clear();\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  console.log(!stripe || loading);\r\n\r\n  return (\r\n    \r\n      <div className=\"container p-4\">\r\n        <div className=\"row h-100\">\r\n          <div className=\"col-md-4 offset-md-4 h-100\">\r\n\t\t  \t<form className=\"card card-body\" onSubmit={handleSubmit}>\r\n\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t<CardElement />\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<button disabled={!stripe} className=\"btn btn-success\">\r\n\t\t\t\t{loading ? (\r\n\t\t\t\t\t<div className=\"spinner-border text-light\" role=\"status\">\r\n\t\t\t\t\t\t<span className=\"sr-only\">Loading...</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t\"Pay\"\r\n\t\t\t\t)}\r\n\t\t\t\t</button>\r\n\t\t\t\t</form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default CheckoutForm*/\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  PaymentElement,\r\n  useStripe,\r\n  useElements\r\n} from \"@stripe/react-stripe-js\";\r\n\r\nexport default function CheckoutForm() {\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n\r\n  const [email, setEmail] = useState('');\r\n  const [message, setMessage] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!stripe) {\r\n      return;\r\n    }\r\n\r\n    \r\n\r\n    \r\n\r\n    stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\r\n      switch (paymentIntent.status) {\r\n        case \"succeeded\":\r\n          setMessage(\"Payment succeeded!\");\r\n          break;\r\n        case \"processing\":\r\n          setMessage(\"Your payment is processing.\");\r\n          break;\r\n        case \"requires_payment_method\":\r\n          setMessage(\"Your payment was not successful, please try again.\");\r\n          break;\r\n        default:\r\n          setMessage(\"Something went wrong.\");\r\n          break;\r\n      }\r\n    });\r\n  }, [stripe]);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!stripe || !elements) {\r\n      // Stripe.js has not yet loaded.\r\n      // Make sure to disable form submission until Stripe.js has loaded.\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    const { error } = await stripe.confirmPayment({\r\n      elements,\r\n      confirmParams: {\r\n        // Make sure to change this to your payment completion page\r\n        return_url: \"http://localhost:3000\",\r\n      },\r\n    });\r\n\r\n    // This point will only be reached if there is an immediate error when\r\n    // confirming the payment. Otherwise, your customer will be redirected to\r\n    // your `return_url`. For some payment methods like iDEAL, your customer will\r\n    // be redirected to an intermediate site first to authorize the payment, then\r\n    // redirected to the `return_url`.\r\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\r\n      setMessage(error.message);\r\n    } else {\r\n      setMessage(\"An unexpected error occurred.\");\r\n    }\r\n\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const paymentElementOptions = {\r\n    layout: \"tabs\"\r\n  }\r\n\r\n  return (\r\n    <form id=\"payment-form\" onSubmit={handleSubmit}>\r\n      \r\n      <PaymentElement id=\"payment-element\" options={paymentElementOptions} />\r\n      <button disabled={isLoading || !stripe || !elements} id=\"submit\">\r\n        <span id=\"button-text\">\r\n          {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pay now\"}\r\n        </span>\r\n      </button>\r\n      {/* Show any error or success messages */}\r\n      {message && <div id=\"payment-message\">{message}</div>}\r\n    </form>\r\n  );\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}