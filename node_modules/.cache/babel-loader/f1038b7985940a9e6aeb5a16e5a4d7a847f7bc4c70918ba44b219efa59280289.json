{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst NormalModule = require(\"../NormalModule\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n// data URL scheme: \"data:text/javascript;charset=utf-8;base64,some-string\"\n// http://www.ietf.org/rfc/rfc2397.txt\nconst URIRegEx = /^data:([^;,]+)?((?:;[^;,]+)*?)(?:;(base64))?,(.*)$/i;\nconst decodeDataURI = uri => {\n  const match = URIRegEx.exec(uri);\n  if (!match) return null;\n  const isBase64 = match[3];\n  const body = match[4];\n  return isBase64 ? Buffer.from(body, \"base64\") : Buffer.from(decodeURIComponent(body), \"ascii\");\n};\nclass DataUriPlugin {\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"DataUriPlugin\", (compilation, _ref) => {\n      let {\n        normalModuleFactory\n      } = _ref;\n      normalModuleFactory.hooks.resolveForScheme.for(\"data\").tap(\"DataUriPlugin\", resourceData => {\n        const match = URIRegEx.exec(resourceData.resource);\n        if (match) {\n          resourceData.data.mimetype = match[1] || \"\";\n          resourceData.data.parameters = match[2] || \"\";\n          resourceData.data.encoding = match[3] || false;\n          resourceData.data.encodedContent = match[4] || \"\";\n        }\n      });\n      NormalModule.getCompilationHooks(compilation).readResourceForScheme.for(\"data\").tap(\"DataUriPlugin\", resource => decodeDataURI(resource));\n    });\n  }\n}\nmodule.exports = DataUriPlugin;","map":{"version":3,"names":["NormalModule","require","URIRegEx","decodeDataURI","uri","match","exec","isBase64","body","Buffer","from","decodeURIComponent","DataUriPlugin","apply","compiler","hooks","compilation","tap","normalModuleFactory","resolveForScheme","for","resourceData","resource","data","mimetype","parameters","encoding","encodedContent","getCompilationHooks","readResourceForScheme","module","exports"],"sources":["C:/Users/galia/OneDrive/Escritorio/rent-a-bike-app/node_modules/webpack/lib/schemes/DataUriPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst NormalModule = require(\"../NormalModule\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n// data URL scheme: \"data:text/javascript;charset=utf-8;base64,some-string\"\n// http://www.ietf.org/rfc/rfc2397.txt\nconst URIRegEx = /^data:([^;,]+)?((?:;[^;,]+)*?)(?:;(base64))?,(.*)$/i;\n\nconst decodeDataURI = uri => {\n\tconst match = URIRegEx.exec(uri);\n\tif (!match) return null;\n\n\tconst isBase64 = match[3];\n\tconst body = match[4];\n\treturn isBase64\n\t\t? Buffer.from(body, \"base64\")\n\t\t: Buffer.from(decodeURIComponent(body), \"ascii\");\n};\n\nclass DataUriPlugin {\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"DataUriPlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tnormalModuleFactory.hooks.resolveForScheme\n\t\t\t\t\t.for(\"data\")\n\t\t\t\t\t.tap(\"DataUriPlugin\", resourceData => {\n\t\t\t\t\t\tconst match = URIRegEx.exec(resourceData.resource);\n\t\t\t\t\t\tif (match) {\n\t\t\t\t\t\t\tresourceData.data.mimetype = match[1] || \"\";\n\t\t\t\t\t\t\tresourceData.data.parameters = match[2] || \"\";\n\t\t\t\t\t\t\tresourceData.data.encoding = match[3] || false;\n\t\t\t\t\t\t\tresourceData.data.encodedContent = match[4] || \"\";\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\tNormalModule.getCompilationHooks(compilation)\n\t\t\t\t\t.readResourceForScheme.for(\"data\")\n\t\t\t\t\t.tap(\"DataUriPlugin\", resource => decodeDataURI(resource));\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = DataUriPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,YAAY,GAAGC,OAAO,CAAC,iBAAiB,CAAC;;AAE/C;;AAEA;AACA;AACA,MAAMC,QAAQ,GAAG,qDAAqD;AAEtE,MAAMC,aAAa,GAAGC,GAAG,IAAI;EAC5B,MAAMC,KAAK,GAAGH,QAAQ,CAACI,IAAI,CAACF,GAAG,CAAC;EAChC,IAAI,CAACC,KAAK,EAAE,OAAO,IAAI;EAEvB,MAAME,QAAQ,GAAGF,KAAK,CAAC,CAAC,CAAC;EACzB,MAAMG,IAAI,GAAGH,KAAK,CAAC,CAAC,CAAC;EACrB,OAAOE,QAAQ,GACZE,MAAM,CAACC,IAAI,CAACF,IAAI,EAAE,QAAQ,CAAC,GAC3BC,MAAM,CAACC,IAAI,CAACC,kBAAkB,CAACH,IAAI,CAAC,EAAE,OAAO,CAAC;AAClD,CAAC;AAED,MAAMI,aAAa,CAAC;EACnB;AACD;AACA;AACA;AACA;EACCC,KAAK,CAACC,QAAQ,EAAE;IACfA,QAAQ,CAACC,KAAK,CAACC,WAAW,CAACC,GAAG,CAC7B,eAAe,EACf,CAACD,WAAW,WAA8B;MAAA,IAA5B;QAAEE;MAAoB,CAAC;MACpCA,mBAAmB,CAACH,KAAK,CAACI,gBAAgB,CACxCC,GAAG,CAAC,MAAM,CAAC,CACXH,GAAG,CAAC,eAAe,EAAEI,YAAY,IAAI;QACrC,MAAMhB,KAAK,GAAGH,QAAQ,CAACI,IAAI,CAACe,YAAY,CAACC,QAAQ,CAAC;QAClD,IAAIjB,KAAK,EAAE;UACVgB,YAAY,CAACE,IAAI,CAACC,QAAQ,GAAGnB,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE;UAC3CgB,YAAY,CAACE,IAAI,CAACE,UAAU,GAAGpB,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE;UAC7CgB,YAAY,CAACE,IAAI,CAACG,QAAQ,GAAGrB,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK;UAC9CgB,YAAY,CAACE,IAAI,CAACI,cAAc,GAAGtB,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE;QAClD;MACD,CAAC,CAAC;MACHL,YAAY,CAAC4B,mBAAmB,CAACZ,WAAW,CAAC,CAC3Ca,qBAAqB,CAACT,GAAG,CAAC,MAAM,CAAC,CACjCH,GAAG,CAAC,eAAe,EAAEK,QAAQ,IAAInB,aAAa,CAACmB,QAAQ,CAAC,CAAC;IAC5D,CAAC,CACD;EACF;AACD;AAEAQ,MAAM,CAACC,OAAO,GAAGnB,aAAa"},"metadata":{},"sourceType":"script","externalDependencies":[]}