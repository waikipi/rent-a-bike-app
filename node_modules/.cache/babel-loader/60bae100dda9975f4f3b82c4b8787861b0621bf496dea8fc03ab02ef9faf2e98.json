{"ast":null,"code":"'use strict';\n\nconst utils = require('./utils');\nconst _Error = require('./Error');\nconst {\n  StripeError\n} = _Error;\nclass StreamProcessingError extends StripeError {}\n// Method for formatting HTTP body for the multipart/form-data specification\n// Mostly taken from Fermata.js\n// https://github.com/natevw/fermata/blob/5d9732a33d776ce925013a265935facd1626cc88/fermata.js#L315-L343\nconst multipartDataGenerator = (method, data, headers) => {\n  const segno = (Math.round(Math.random() * 1e16) + Math.round(Math.random() * 1e16)).toString();\n  headers['Content-Type'] = `multipart/form-data; boundary=${segno}`;\n  let buffer = Buffer.alloc(0);\n  function push(l) {\n    const prevBuffer = buffer;\n    const newBuffer = l instanceof Buffer ? l : Buffer.from(l);\n    buffer = Buffer.alloc(prevBuffer.length + newBuffer.length + 2);\n    prevBuffer.copy(buffer);\n    newBuffer.copy(buffer, prevBuffer.length);\n    buffer.write('\\r\\n', buffer.length - 2);\n  }\n  function q(s) {\n    return `\"${s.replace(/\"|\"/g, '%22').replace(/\\r\\n|\\r|\\n/g, ' ')}\"`;\n  }\n  const flattenedData = utils.flattenAndStringify(data);\n  for (const k in flattenedData) {\n    const v = flattenedData[k];\n    push(`--${segno}`);\n    if (Object.prototype.hasOwnProperty.call(v, 'data')) {\n      const typedEntry = v;\n      push(`Content-Disposition: form-data; name=${q(k)}; filename=${q(typedEntry.name || 'blob')}`);\n      push(`Content-Type: ${typedEntry.type || 'application/octet-stream'}`);\n      push('');\n      push(typedEntry.data);\n    } else {\n      push(`Content-Disposition: form-data; name=${q(k)}`);\n      push('');\n      push(v);\n    }\n  }\n  push(`--${segno}--`);\n  return buffer;\n};\nconst streamProcessor = (method, data, headers, callback) => {\n  const bufferArray = [];\n  data.file.data.on('data', line => {\n    bufferArray.push(line);\n  }).once('end', () => {\n    // @ts-ignore\n    const bufferData = Object.assign({}, data);\n    bufferData.file.data = Buffer.concat(bufferArray);\n    const buffer = multipartDataGenerator(method, bufferData, headers);\n    callback(null, buffer);\n  }).on('error', err => {\n    callback(new StreamProcessingError({\n      message: 'An error occurred while attempting to process the file for upload.',\n      detail: err\n    }), null);\n  });\n};\nconst multipartRequestDataProcessor = (method, data, headers, callback) => {\n  data = data || {};\n  if (method !== 'POST') {\n    return callback(null, utils.stringifyRequestData(data));\n  }\n  const isStream = utils.checkForStream(data);\n  if (isStream) {\n    return streamProcessor(method, data, headers, callback);\n  }\n  const buffer = multipartDataGenerator(method, data, headers);\n  return callback(null, buffer);\n};\nmodule.exports = {\n  multipartRequestDataProcessor: multipartRequestDataProcessor\n};","map":{"version":3,"names":["utils","require","_Error","StripeError","StreamProcessingError","multipartDataGenerator","method","data","headers","segno","Math","round","random","toString","buffer","Buffer","alloc","push","l","prevBuffer","newBuffer","from","length","copy","write","q","s","replace","flattenedData","flattenAndStringify","k","v","Object","prototype","hasOwnProperty","call","typedEntry","name","type","streamProcessor","callback","bufferArray","file","on","line","once","bufferData","assign","concat","err","message","detail","multipartRequestDataProcessor","stringifyRequestData","isStream","checkForStream","module","exports"],"sources":["C:/Users/galia/OneDrive/Escritorio/rent-a-bike-app/node_modules/stripe/lib/multipart.js"],"sourcesContent":["'use strict';\nconst utils = require('./utils');\nconst _Error = require('./Error');\nconst {StripeError} = _Error;\nclass StreamProcessingError extends StripeError {}\n// Method for formatting HTTP body for the multipart/form-data specification\n// Mostly taken from Fermata.js\n// https://github.com/natevw/fermata/blob/5d9732a33d776ce925013a265935facd1626cc88/fermata.js#L315-L343\nconst multipartDataGenerator = (method, data, headers) => {\n  const segno = (\n    Math.round(Math.random() * 1e16) + Math.round(Math.random() * 1e16)\n  ).toString();\n  headers['Content-Type'] = `multipart/form-data; boundary=${segno}`;\n  let buffer = Buffer.alloc(0);\n  function push(l) {\n    const prevBuffer = buffer;\n    const newBuffer = l instanceof Buffer ? l : Buffer.from(l);\n    buffer = Buffer.alloc(prevBuffer.length + newBuffer.length + 2);\n    prevBuffer.copy(buffer);\n    newBuffer.copy(buffer, prevBuffer.length);\n    buffer.write('\\r\\n', buffer.length - 2);\n  }\n  function q(s) {\n    return `\"${s.replace(/\"|\"/g, '%22').replace(/\\r\\n|\\r|\\n/g, ' ')}\"`;\n  }\n  const flattenedData = utils.flattenAndStringify(data);\n  for (const k in flattenedData) {\n    const v = flattenedData[k];\n    push(`--${segno}`);\n    if (Object.prototype.hasOwnProperty.call(v, 'data')) {\n      const typedEntry = v;\n      push(\n        `Content-Disposition: form-data; name=${q(k)}; filename=${q(\n          typedEntry.name || 'blob'\n        )}`\n      );\n      push(`Content-Type: ${typedEntry.type || 'application/octet-stream'}`);\n      push('');\n      push(typedEntry.data);\n    } else {\n      push(`Content-Disposition: form-data; name=${q(k)}`);\n      push('');\n      push(v);\n    }\n  }\n  push(`--${segno}--`);\n  return buffer;\n};\nconst streamProcessor = (method, data, headers, callback) => {\n  const bufferArray = [];\n  data.file.data\n    .on('data', (line) => {\n      bufferArray.push(line);\n    })\n    .once('end', () => {\n      // @ts-ignore\n      const bufferData = Object.assign({}, data);\n      bufferData.file.data = Buffer.concat(bufferArray);\n      const buffer = multipartDataGenerator(method, bufferData, headers);\n      callback(null, buffer);\n    })\n    .on('error', (err) => {\n      callback(\n        new StreamProcessingError({\n          message:\n            'An error occurred while attempting to process the file for upload.',\n          detail: err,\n        }),\n        null\n      );\n    });\n};\nconst multipartRequestDataProcessor = (method, data, headers, callback) => {\n  data = data || {};\n  if (method !== 'POST') {\n    return callback(null, utils.stringifyRequestData(data));\n  }\n  const isStream = utils.checkForStream(data);\n  if (isStream) {\n    return streamProcessor(method, data, headers, callback);\n  }\n  const buffer = multipartDataGenerator(method, data, headers);\n  return callback(null, buffer);\n};\nmodule.exports = {\n  multipartRequestDataProcessor: multipartRequestDataProcessor,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}