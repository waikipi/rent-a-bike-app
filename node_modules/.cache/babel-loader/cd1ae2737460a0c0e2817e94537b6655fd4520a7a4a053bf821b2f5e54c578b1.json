{"ast":null,"code":"'use strict';\n\nconst _HttpClient = require('./HttpClient');\nconst {\n  HttpClient,\n  HttpClientResponse\n} = _HttpClient;\n/**\n * HTTP client which uses a `fetch` function to issue requests.\n *\n * By default relies on the global `fetch` function, but an optional function\n * can be passed in. If passing in a function, it is expected to match the Web\n * Fetch API. As an example, this could be the function provided by the\n * node-fetch package (https://github.com/node-fetch/node-fetch).\n */\nclass FetchHttpClient extends HttpClient {\n  constructor(fetchFn) {\n    super();\n    this._fetchFn = fetchFn;\n  }\n  /** @override. */\n  getClientName() {\n    return 'fetch';\n  }\n  makeRequest(host, port, path, method, headers, requestData, protocol, timeout) {\n    const isInsecureConnection = protocol === 'http';\n    const url = new URL(path, `${isInsecureConnection ? 'http' : 'https'}://${host}`);\n    url.port = port;\n    // For methods which expect payloads, we should always pass a body value\n    // even when it is empty. Without this, some JS runtimes (eg. Deno) will\n    // inject a second Content-Length header. See https://github.com/stripe/stripe-node/issues/1519\n    // for more details.\n    const methodHasPayload = method == 'POST' || method == 'PUT' || method == 'PATCH';\n    const body = requestData || (methodHasPayload ? '' : undefined);\n    const fetchFn = this._fetchFn || fetch;\n    const fetchPromise = fetchFn(url.toString(), {\n      method,\n      // @ts-ignore\n      headers,\n      // @ts-ignore\n      body\n    });\n    // The Fetch API does not support passing in a timeout natively, so a\n    // timeout promise is constructed to race against the fetch and preempt the\n    // request, simulating a timeout.\n    //\n    // This timeout behavior differs from Node:\n    // - Fetch uses a single timeout for the entire length of the request.\n    // - Node is more fine-grained and resets the timeout after each stage of\n    //   the request.\n    //\n    // As an example, if the timeout is set to 30s and the connection takes 20s\n    // to be established followed by 20s for the body, Fetch would timeout but\n    // Node would not. The more fine-grained timeout cannot be implemented with\n    // fetch.\n    let pendingTimeoutId;\n    const timeoutPromise = new Promise((_, reject) => {\n      pendingTimeoutId = setTimeout(() => {\n        pendingTimeoutId = null;\n        reject(HttpClient.makeTimeoutError());\n      }, timeout);\n    });\n    return Promise.race([fetchPromise, timeoutPromise]).then(res => {\n      return new FetchHttpClientResponse(res);\n    }).finally(() => {\n      if (pendingTimeoutId) {\n        clearTimeout(pendingTimeoutId);\n      }\n    });\n  }\n}\nclass FetchHttpClientResponse extends HttpClientResponse {\n  constructor(res) {\n    super(res.status, FetchHttpClientResponse._transformHeadersToObject(res.headers));\n    this._res = res;\n  }\n  getRawResponse() {\n    return this._res;\n  }\n  toStream(streamCompleteCallback) {\n    // Unfortunately `fetch` does not have event handlers for when the stream is\n    // completely read. We therefore invoke the streamCompleteCallback right\n    // away. This callback emits a response event with metadata and completes\n    // metrics, so it's ok to do this without waiting for the stream to be\n    // completely read.\n    streamCompleteCallback();\n    // Fetch's `body` property is expected to be a readable stream of the body.\n    return this._res.body;\n  }\n  toJSON() {\n    return this._res.json();\n  }\n  static _transformHeadersToObject(headers) {\n    // Fetch uses a Headers instance so this must be converted to a barebones\n    // JS object to meet the HttpClient interface.\n    const headersObj = {};\n    for (const entry of headers) {\n      if (!Array.isArray(entry) || entry.length != 2) {\n        throw new Error('Response objects produced by the fetch function given to FetchHttpClient do not have an iterable headers map. Response#headers should be an iterable object.');\n      }\n      headersObj[entry[0]] = entry[1];\n    }\n    return headersObj;\n  }\n}\nmodule.exports = {\n  FetchHttpClient,\n  FetchHttpClientResponse\n};","map":{"version":3,"names":["_HttpClient","require","HttpClient","HttpClientResponse","FetchHttpClient","constructor","fetchFn","_fetchFn","getClientName","makeRequest","host","port","path","method","headers","requestData","protocol","timeout","isInsecureConnection","url","URL","methodHasPayload","body","undefined","fetch","fetchPromise","toString","pendingTimeoutId","timeoutPromise","Promise","_","reject","setTimeout","makeTimeoutError","race","then","res","FetchHttpClientResponse","finally","clearTimeout","status","_transformHeadersToObject","_res","getRawResponse","toStream","streamCompleteCallback","toJSON","json","headersObj","entry","Array","isArray","length","Error","module","exports"],"sources":["C:/Users/galia/OneDrive/Escritorio/rent-a-bike-app/node_modules/stripe/lib/net/FetchHttpClient.js"],"sourcesContent":["'use strict';\nconst _HttpClient = require('./HttpClient');\nconst {HttpClient, HttpClientResponse} = _HttpClient;\n/**\n * HTTP client which uses a `fetch` function to issue requests.\n *\n * By default relies on the global `fetch` function, but an optional function\n * can be passed in. If passing in a function, it is expected to match the Web\n * Fetch API. As an example, this could be the function provided by the\n * node-fetch package (https://github.com/node-fetch/node-fetch).\n */\nclass FetchHttpClient extends HttpClient {\n  constructor(fetchFn) {\n    super();\n    this._fetchFn = fetchFn;\n  }\n  /** @override. */\n  getClientName() {\n    return 'fetch';\n  }\n  makeRequest(\n    host,\n    port,\n    path,\n    method,\n    headers,\n    requestData,\n    protocol,\n    timeout\n  ) {\n    const isInsecureConnection = protocol === 'http';\n    const url = new URL(\n      path,\n      `${isInsecureConnection ? 'http' : 'https'}://${host}`\n    );\n    url.port = port;\n    // For methods which expect payloads, we should always pass a body value\n    // even when it is empty. Without this, some JS runtimes (eg. Deno) will\n    // inject a second Content-Length header. See https://github.com/stripe/stripe-node/issues/1519\n    // for more details.\n    const methodHasPayload =\n      method == 'POST' || method == 'PUT' || method == 'PATCH';\n    const body = requestData || (methodHasPayload ? '' : undefined);\n    const fetchFn = this._fetchFn || fetch;\n    const fetchPromise = fetchFn(url.toString(), {\n      method,\n      // @ts-ignore\n      headers,\n      // @ts-ignore\n      body,\n    });\n    // The Fetch API does not support passing in a timeout natively, so a\n    // timeout promise is constructed to race against the fetch and preempt the\n    // request, simulating a timeout.\n    //\n    // This timeout behavior differs from Node:\n    // - Fetch uses a single timeout for the entire length of the request.\n    // - Node is more fine-grained and resets the timeout after each stage of\n    //   the request.\n    //\n    // As an example, if the timeout is set to 30s and the connection takes 20s\n    // to be established followed by 20s for the body, Fetch would timeout but\n    // Node would not. The more fine-grained timeout cannot be implemented with\n    // fetch.\n    let pendingTimeoutId;\n    const timeoutPromise = new Promise((_, reject) => {\n      pendingTimeoutId = setTimeout(() => {\n        pendingTimeoutId = null;\n        reject(HttpClient.makeTimeoutError());\n      }, timeout);\n    });\n    return Promise.race([fetchPromise, timeoutPromise])\n      .then((res) => {\n        return new FetchHttpClientResponse(res);\n      })\n      .finally(() => {\n        if (pendingTimeoutId) {\n          clearTimeout(pendingTimeoutId);\n        }\n      });\n  }\n}\nclass FetchHttpClientResponse extends HttpClientResponse {\n  constructor(res) {\n    super(\n      res.status,\n      FetchHttpClientResponse._transformHeadersToObject(res.headers)\n    );\n    this._res = res;\n  }\n  getRawResponse() {\n    return this._res;\n  }\n  toStream(streamCompleteCallback) {\n    // Unfortunately `fetch` does not have event handlers for when the stream is\n    // completely read. We therefore invoke the streamCompleteCallback right\n    // away. This callback emits a response event with metadata and completes\n    // metrics, so it's ok to do this without waiting for the stream to be\n    // completely read.\n    streamCompleteCallback();\n    // Fetch's `body` property is expected to be a readable stream of the body.\n    return this._res.body;\n  }\n  toJSON() {\n    return this._res.json();\n  }\n  static _transformHeadersToObject(headers) {\n    // Fetch uses a Headers instance so this must be converted to a barebones\n    // JS object to meet the HttpClient interface.\n    const headersObj = {};\n    for (const entry of headers) {\n      if (!Array.isArray(entry) || entry.length != 2) {\n        throw new Error(\n          'Response objects produced by the fetch function given to FetchHttpClient do not have an iterable headers map. Response#headers should be an iterable object.'\n        );\n      }\n      headersObj[entry[0]] = entry[1];\n    }\n    return headersObj;\n  }\n}\nmodule.exports = {FetchHttpClient, FetchHttpClientResponse};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}