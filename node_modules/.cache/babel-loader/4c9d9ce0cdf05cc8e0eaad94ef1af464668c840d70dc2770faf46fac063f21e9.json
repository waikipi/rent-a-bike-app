{"ast":null,"code":"'use strict';\n\n/* eslint-disable camelcase */\n/**\n * StripeError is the base error from which all other more specific Stripe errors derive.\n * Specifically for errors returned from Stripe's REST API.\n */\nclass StripeError extends Error {\n  constructor() {\n    let raw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(raw.message);\n    this.type = this.constructor.name;\n    this.raw = raw;\n    this.rawType = raw.type;\n    this.code = raw.code;\n    this.doc_url = raw.doc_url;\n    this.param = raw.param;\n    this.detail = raw.detail;\n    this.headers = raw.headers;\n    this.requestId = raw.requestId;\n    this.statusCode = raw.statusCode;\n    // @ts-ignore\n    this.message = raw.message;\n    this.charge = raw.charge;\n    this.decline_code = raw.decline_code;\n    this.payment_intent = raw.payment_intent;\n    this.payment_method = raw.payment_method;\n    this.payment_method_type = raw.payment_method_type;\n    this.setup_intent = raw.setup_intent;\n    this.source = raw.source;\n  }\n  /**\n   * Helper factory which takes raw stripe errors and outputs wrapping instances\n   */\n  static generate(rawStripeError) {\n    switch (rawStripeError.type) {\n      case 'card_error':\n        return new StripeCardError(rawStripeError);\n      case 'invalid_request_error':\n        return new StripeInvalidRequestError(rawStripeError);\n      case 'api_error':\n        return new StripeAPIError(rawStripeError);\n      case 'authentication_error':\n        return new StripeAuthenticationError(rawStripeError);\n      case 'rate_limit_error':\n        return new StripeRateLimitError(rawStripeError);\n      case 'idempotency_error':\n        return new StripeIdempotencyError(rawStripeError);\n      case 'invalid_grant':\n        return new StripeInvalidGrantError(rawStripeError);\n      default:\n        return new StripeUnknownError(rawStripeError);\n    }\n  }\n}\n// Specific Stripe Error types:\n/**\n * CardError is raised when a user enters a card that can't be charged for\n * some reason.\n */\nclass StripeCardError extends StripeError {}\n/**\n * InvalidRequestError is raised when a request is initiated with invalid\n * parameters.\n */\nclass StripeInvalidRequestError extends StripeError {}\n/**\n * APIError is a generic error that may be raised in cases where none of the\n * other named errors cover the problem. It could also be raised in the case\n * that a new error has been introduced in the API, but this version of the\n * Node.JS SDK doesn't know how to handle it.\n */\nclass StripeAPIError extends StripeError {}\n/**\n * AuthenticationError is raised when invalid credentials are used to connect\n * to Stripe's servers.\n */\nclass StripeAuthenticationError extends StripeError {}\n/**\n * PermissionError is raised in cases where access was attempted on a resource\n * that wasn't allowed.\n */\nclass StripePermissionError extends StripeError {}\n/**\n * RateLimitError is raised in cases where an account is putting too much load\n * on Stripe's API servers (usually by performing too many requests). Please\n * back off on request rate.\n */\nclass StripeRateLimitError extends StripeError {}\n/**\n * StripeConnectionError is raised in the event that the SDK can't connect to\n * Stripe's servers. That can be for a variety of different reasons from a\n * downed network to a bad TLS certificate.\n */\nclass StripeConnectionError extends StripeError {}\n/**\n * SignatureVerificationError is raised when the signature verification for a\n * webhook fails\n */\nclass StripeSignatureVerificationError extends StripeError {\n  constructor(header, payload) {\n    let raw = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super(raw);\n    this.header = header;\n    this.payload = payload;\n  }\n}\n/**\n * IdempotencyError is raised in cases where an idempotency key was used\n * improperly.\n */\nclass StripeIdempotencyError extends StripeError {}\n/**\n * InvalidGrantError is raised when a specified code doesn't exist, is\n * expired, has been used, or doesn't belong to you; a refresh token doesn't\n * exist, or doesn't belong to you; or if an API key's mode (live or test)\n * doesn't match the mode of a code or refresh token.\n */\nclass StripeInvalidGrantError extends StripeError {}\n/**\n * Any other error from Stripe not specifically captured above\n */\nclass StripeUnknownError extends StripeError {}\nmodule.exports = {\n  generate: StripeError.generate,\n  StripeError: StripeError,\n  StripeCardError: StripeCardError,\n  StripeInvalidRequestError: StripeInvalidRequestError,\n  StripeAPIError: StripeAPIError,\n  StripeAuthenticationError: StripeAuthenticationError,\n  StripePermissionError: StripePermissionError,\n  StripeRateLimitError: StripeRateLimitError,\n  StripeConnectionError: StripeConnectionError,\n  StripeSignatureVerificationError: StripeSignatureVerificationError,\n  StripeIdempotencyError: StripeIdempotencyError,\n  StripeInvalidGrantError: StripeInvalidGrantError,\n  StripeUnknownError: StripeUnknownError\n};","map":{"version":3,"names":["StripeError","Error","constructor","raw","message","type","name","rawType","code","doc_url","param","detail","headers","requestId","statusCode","charge","decline_code","payment_intent","payment_method","payment_method_type","setup_intent","source","generate","rawStripeError","StripeCardError","StripeInvalidRequestError","StripeAPIError","StripeAuthenticationError","StripeRateLimitError","StripeIdempotencyError","StripeInvalidGrantError","StripeUnknownError","StripePermissionError","StripeConnectionError","StripeSignatureVerificationError","header","payload","module","exports"],"sources":["C:/Users/galia/OneDrive/Escritorio/rent-a-bike-app/node_modules/stripe/lib/Error.js"],"sourcesContent":["'use strict';\n/* eslint-disable camelcase */\n/**\n * StripeError is the base error from which all other more specific Stripe errors derive.\n * Specifically for errors returned from Stripe's REST API.\n */\nclass StripeError extends Error {\n  constructor(raw = {}) {\n    super(raw.message);\n    this.type = this.constructor.name;\n    this.raw = raw;\n    this.rawType = raw.type;\n    this.code = raw.code;\n    this.doc_url = raw.doc_url;\n    this.param = raw.param;\n    this.detail = raw.detail;\n    this.headers = raw.headers;\n    this.requestId = raw.requestId;\n    this.statusCode = raw.statusCode;\n    // @ts-ignore\n    this.message = raw.message;\n    this.charge = raw.charge;\n    this.decline_code = raw.decline_code;\n    this.payment_intent = raw.payment_intent;\n    this.payment_method = raw.payment_method;\n    this.payment_method_type = raw.payment_method_type;\n    this.setup_intent = raw.setup_intent;\n    this.source = raw.source;\n  }\n  /**\n   * Helper factory which takes raw stripe errors and outputs wrapping instances\n   */\n  static generate(rawStripeError) {\n    switch (rawStripeError.type) {\n      case 'card_error':\n        return new StripeCardError(rawStripeError);\n      case 'invalid_request_error':\n        return new StripeInvalidRequestError(rawStripeError);\n      case 'api_error':\n        return new StripeAPIError(rawStripeError);\n      case 'authentication_error':\n        return new StripeAuthenticationError(rawStripeError);\n      case 'rate_limit_error':\n        return new StripeRateLimitError(rawStripeError);\n      case 'idempotency_error':\n        return new StripeIdempotencyError(rawStripeError);\n      case 'invalid_grant':\n        return new StripeInvalidGrantError(rawStripeError);\n      default:\n        return new StripeUnknownError(rawStripeError);\n    }\n  }\n}\n// Specific Stripe Error types:\n/**\n * CardError is raised when a user enters a card that can't be charged for\n * some reason.\n */\nclass StripeCardError extends StripeError {}\n/**\n * InvalidRequestError is raised when a request is initiated with invalid\n * parameters.\n */\nclass StripeInvalidRequestError extends StripeError {}\n/**\n * APIError is a generic error that may be raised in cases where none of the\n * other named errors cover the problem. It could also be raised in the case\n * that a new error has been introduced in the API, but this version of the\n * Node.JS SDK doesn't know how to handle it.\n */\nclass StripeAPIError extends StripeError {}\n/**\n * AuthenticationError is raised when invalid credentials are used to connect\n * to Stripe's servers.\n */\nclass StripeAuthenticationError extends StripeError {}\n/**\n * PermissionError is raised in cases where access was attempted on a resource\n * that wasn't allowed.\n */\nclass StripePermissionError extends StripeError {}\n/**\n * RateLimitError is raised in cases where an account is putting too much load\n * on Stripe's API servers (usually by performing too many requests). Please\n * back off on request rate.\n */\nclass StripeRateLimitError extends StripeError {}\n/**\n * StripeConnectionError is raised in the event that the SDK can't connect to\n * Stripe's servers. That can be for a variety of different reasons from a\n * downed network to a bad TLS certificate.\n */\nclass StripeConnectionError extends StripeError {}\n/**\n * SignatureVerificationError is raised when the signature verification for a\n * webhook fails\n */\nclass StripeSignatureVerificationError extends StripeError {\n  constructor(header, payload, raw = {}) {\n    super(raw);\n    this.header = header;\n    this.payload = payload;\n  }\n}\n/**\n * IdempotencyError is raised in cases where an idempotency key was used\n * improperly.\n */\nclass StripeIdempotencyError extends StripeError {}\n/**\n * InvalidGrantError is raised when a specified code doesn't exist, is\n * expired, has been used, or doesn't belong to you; a refresh token doesn't\n * exist, or doesn't belong to you; or if an API key's mode (live or test)\n * doesn't match the mode of a code or refresh token.\n */\nclass StripeInvalidGrantError extends StripeError {}\n/**\n * Any other error from Stripe not specifically captured above\n */\nclass StripeUnknownError extends StripeError {}\nmodule.exports = {\n  generate: StripeError.generate,\n  StripeError: StripeError,\n  StripeCardError: StripeCardError,\n  StripeInvalidRequestError: StripeInvalidRequestError,\n  StripeAPIError: StripeAPIError,\n  StripeAuthenticationError: StripeAuthenticationError,\n  StripePermissionError: StripePermissionError,\n  StripeRateLimitError: StripeRateLimitError,\n  StripeConnectionError: StripeConnectionError,\n  StripeSignatureVerificationError: StripeSignatureVerificationError,\n  StripeIdempotencyError: StripeIdempotencyError,\n  StripeInvalidGrantError: StripeInvalidGrantError,\n  StripeUnknownError: StripeUnknownError,\n};\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA,MAAMA,WAAW,SAASC,KAAK,CAAC;EAC9BC,WAAW,GAAW;IAAA,IAAVC,GAAG,uEAAG,CAAC,CAAC;IAClB,KAAK,CAACA,GAAG,CAACC,OAAO,CAAC;IAClB,IAAI,CAACC,IAAI,GAAG,IAAI,CAACH,WAAW,CAACI,IAAI;IACjC,IAAI,CAACH,GAAG,GAAGA,GAAG;IACd,IAAI,CAACI,OAAO,GAAGJ,GAAG,CAACE,IAAI;IACvB,IAAI,CAACG,IAAI,GAAGL,GAAG,CAACK,IAAI;IACpB,IAAI,CAACC,OAAO,GAAGN,GAAG,CAACM,OAAO;IAC1B,IAAI,CAACC,KAAK,GAAGP,GAAG,CAACO,KAAK;IACtB,IAAI,CAACC,MAAM,GAAGR,GAAG,CAACQ,MAAM;IACxB,IAAI,CAACC,OAAO,GAAGT,GAAG,CAACS,OAAO;IAC1B,IAAI,CAACC,SAAS,GAAGV,GAAG,CAACU,SAAS;IAC9B,IAAI,CAACC,UAAU,GAAGX,GAAG,CAACW,UAAU;IAChC;IACA,IAAI,CAACV,OAAO,GAAGD,GAAG,CAACC,OAAO;IAC1B,IAAI,CAACW,MAAM,GAAGZ,GAAG,CAACY,MAAM;IACxB,IAAI,CAACC,YAAY,GAAGb,GAAG,CAACa,YAAY;IACpC,IAAI,CAACC,cAAc,GAAGd,GAAG,CAACc,cAAc;IACxC,IAAI,CAACC,cAAc,GAAGf,GAAG,CAACe,cAAc;IACxC,IAAI,CAACC,mBAAmB,GAAGhB,GAAG,CAACgB,mBAAmB;IAClD,IAAI,CAACC,YAAY,GAAGjB,GAAG,CAACiB,YAAY;IACpC,IAAI,CAACC,MAAM,GAAGlB,GAAG,CAACkB,MAAM;EAC1B;EACA;AACF;AACA;EACE,OAAOC,QAAQ,CAACC,cAAc,EAAE;IAC9B,QAAQA,cAAc,CAAClB,IAAI;MACzB,KAAK,YAAY;QACf,OAAO,IAAImB,eAAe,CAACD,cAAc,CAAC;MAC5C,KAAK,uBAAuB;QAC1B,OAAO,IAAIE,yBAAyB,CAACF,cAAc,CAAC;MACtD,KAAK,WAAW;QACd,OAAO,IAAIG,cAAc,CAACH,cAAc,CAAC;MAC3C,KAAK,sBAAsB;QACzB,OAAO,IAAII,yBAAyB,CAACJ,cAAc,CAAC;MACtD,KAAK,kBAAkB;QACrB,OAAO,IAAIK,oBAAoB,CAACL,cAAc,CAAC;MACjD,KAAK,mBAAmB;QACtB,OAAO,IAAIM,sBAAsB,CAACN,cAAc,CAAC;MACnD,KAAK,eAAe;QAClB,OAAO,IAAIO,uBAAuB,CAACP,cAAc,CAAC;MACpD;QACE,OAAO,IAAIQ,kBAAkB,CAACR,cAAc,CAAC;IAAC;EAEpD;AACF;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,SAASxB,WAAW,CAAC;AAC1C;AACA;AACA;AACA;AACA,MAAMyB,yBAAyB,SAASzB,WAAW,CAAC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,MAAM0B,cAAc,SAAS1B,WAAW,CAAC;AACzC;AACA;AACA;AACA;AACA,MAAM2B,yBAAyB,SAAS3B,WAAW,CAAC;AACpD;AACA;AACA;AACA;AACA,MAAMgC,qBAAqB,SAAShC,WAAW,CAAC;AAChD;AACA;AACA;AACA;AACA;AACA,MAAM4B,oBAAoB,SAAS5B,WAAW,CAAC;AAC/C;AACA;AACA;AACA;AACA;AACA,MAAMiC,qBAAqB,SAASjC,WAAW,CAAC;AAChD;AACA;AACA;AACA;AACA,MAAMkC,gCAAgC,SAASlC,WAAW,CAAC;EACzDE,WAAW,CAACiC,MAAM,EAAEC,OAAO,EAAY;IAAA,IAAVjC,GAAG,uEAAG,CAAC,CAAC;IACnC,KAAK,CAACA,GAAG,CAAC;IACV,IAAI,CAACgC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,OAAO,GAAGA,OAAO;EACxB;AACF;AACA;AACA;AACA;AACA;AACA,MAAMP,sBAAsB,SAAS7B,WAAW,CAAC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,MAAM8B,uBAAuB,SAAS9B,WAAW,CAAC;AAClD;AACA;AACA;AACA,MAAM+B,kBAAkB,SAAS/B,WAAW,CAAC;AAC7CqC,MAAM,CAACC,OAAO,GAAG;EACfhB,QAAQ,EAAEtB,WAAW,CAACsB,QAAQ;EAC9BtB,WAAW,EAAEA,WAAW;EACxBwB,eAAe,EAAEA,eAAe;EAChCC,yBAAyB,EAAEA,yBAAyB;EACpDC,cAAc,EAAEA,cAAc;EAC9BC,yBAAyB,EAAEA,yBAAyB;EACpDK,qBAAqB,EAAEA,qBAAqB;EAC5CJ,oBAAoB,EAAEA,oBAAoB;EAC1CK,qBAAqB,EAAEA,qBAAqB;EAC5CC,gCAAgC,EAAEA,gCAAgC;EAClEL,sBAAsB,EAAEA,sBAAsB;EAC9CC,uBAAuB,EAAEA,uBAAuB;EAChDC,kBAAkB,EAAEA;AACtB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}