{"ast":null,"code":"'use strict';\n\nconst utils = require('./utils');\nfunction getRequestOpts(self, requestArgs, spec, overrideData) {\n  // Extract spec values with defaults.\n  const requestMethod = (spec.method || 'GET').toUpperCase();\n  const urlParams = spec.urlParams || [];\n  const encode = spec.encode || (data => data);\n  const isUsingFullPath = !!spec.fullPath;\n  const commandPath = utils.makeURLInterpolator(isUsingFullPath ? spec.fullPath : spec.path || '');\n  // When using fullPath, we ignore the resource path as it should already be\n  // fully qualified.\n  const path = isUsingFullPath ? spec.fullPath : self.createResourcePathWithSymbols(spec.path);\n  // Don't mutate args externally.\n  const args = [].slice.call(requestArgs);\n  // Generate and validate url params.\n  const urlData = urlParams.reduce((urlData, param) => {\n    const arg = args.shift();\n    if (typeof arg !== 'string') {\n      throw new Error(`Stripe: Argument \"${param}\" must be a string, but got: ${arg} (on API request to \\`${requestMethod} ${path}\\`)`);\n    }\n    urlData[param] = arg;\n    return urlData;\n  }, {});\n  // Pull request data and options (headers, auth) from args.\n  const dataFromArgs = utils.getDataFromArgs(args);\n  const data = encode(Object.assign({}, dataFromArgs, overrideData));\n  const options = utils.getOptionsFromArgs(args);\n  const host = options.host || spec.host;\n  const streaming = !!spec.streaming;\n  // Validate that there are no more args.\n  if (args.filter(x => x != null).length) {\n    throw new Error(`Stripe: Unknown arguments (${args}). Did you mean to pass an options object? See https://github.com/stripe/stripe-node/wiki/Passing-Options. (on API request to ${requestMethod} \\`${path}\\`)`);\n  }\n  // When using full path, we can just invoke the URL interpolator directly\n  // as we don't need to use the resource to create a full path.\n  const requestPath = isUsingFullPath ? commandPath(urlData) : self.createFullPath(commandPath, urlData);\n  const headers = Object.assign(options.headers, spec.headers);\n  if (spec.validator) {\n    spec.validator(data, {\n      headers\n    });\n  }\n  const dataInQuery = spec.method === 'GET' || spec.method === 'DELETE';\n  const bodyData = dataInQuery ? {} : data;\n  const queryData = dataInQuery ? data : {};\n  return {\n    requestMethod,\n    requestPath,\n    bodyData,\n    queryData,\n    auth: options.auth,\n    headers,\n    host,\n    streaming,\n    settings: options.settings\n  };\n}\nfunction makeRequest(self, requestArgs, spec, overrideData) {\n  return new Promise((resolve, reject) => {\n    let opts;\n    try {\n      opts = getRequestOpts(self, requestArgs, spec, overrideData);\n    } catch (err) {\n      reject(err);\n      return;\n    }\n    function requestCallback(err, response) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(spec.transformResponseData ? spec.transformResponseData(response) : response);\n      }\n    }\n    const emptyQuery = Object.keys(opts.queryData).length === 0;\n    const path = [opts.requestPath, emptyQuery ? '' : '?', utils.stringifyRequestData(opts.queryData)].join('');\n    const {\n      headers,\n      settings\n    } = opts;\n    self._request(opts.requestMethod, opts.host, path, opts.bodyData, opts.auth, {\n      headers,\n      settings,\n      streaming: opts.streaming\n    }, requestCallback);\n  });\n}\nmodule.exports = makeRequest;","map":{"version":3,"names":["utils","require","getRequestOpts","self","requestArgs","spec","overrideData","requestMethod","method","toUpperCase","urlParams","encode","data","isUsingFullPath","fullPath","commandPath","makeURLInterpolator","path","createResourcePathWithSymbols","args","slice","call","urlData","reduce","param","arg","shift","Error","dataFromArgs","getDataFromArgs","Object","assign","options","getOptionsFromArgs","host","streaming","filter","x","length","requestPath","createFullPath","headers","validator","dataInQuery","bodyData","queryData","auth","settings","makeRequest","Promise","resolve","reject","opts","err","requestCallback","response","transformResponseData","emptyQuery","keys","stringifyRequestData","join","_request","module","exports"],"sources":["C:/Users/galia/OneDrive/Escritorio/rent-a-bike-app/node_modules/stripe/lib/makeRequest.js"],"sourcesContent":["'use strict';\nconst utils = require('./utils');\nfunction getRequestOpts(self, requestArgs, spec, overrideData) {\n  // Extract spec values with defaults.\n  const requestMethod = (spec.method || 'GET').toUpperCase();\n  const urlParams = spec.urlParams || [];\n  const encode = spec.encode || ((data) => data);\n  const isUsingFullPath = !!spec.fullPath;\n  const commandPath = utils.makeURLInterpolator(\n    isUsingFullPath ? spec.fullPath : spec.path || ''\n  );\n  // When using fullPath, we ignore the resource path as it should already be\n  // fully qualified.\n  const path = isUsingFullPath\n    ? spec.fullPath\n    : self.createResourcePathWithSymbols(spec.path);\n  // Don't mutate args externally.\n  const args = [].slice.call(requestArgs);\n  // Generate and validate url params.\n  const urlData = urlParams.reduce((urlData, param) => {\n    const arg = args.shift();\n    if (typeof arg !== 'string') {\n      throw new Error(\n        `Stripe: Argument \"${param}\" must be a string, but got: ${arg} (on API request to \\`${requestMethod} ${path}\\`)`\n      );\n    }\n    urlData[param] = arg;\n    return urlData;\n  }, {});\n  // Pull request data and options (headers, auth) from args.\n  const dataFromArgs = utils.getDataFromArgs(args);\n  const data = encode(Object.assign({}, dataFromArgs, overrideData));\n  const options = utils.getOptionsFromArgs(args);\n  const host = options.host || spec.host;\n  const streaming = !!spec.streaming;\n  // Validate that there are no more args.\n  if (args.filter((x) => x != null).length) {\n    throw new Error(\n      `Stripe: Unknown arguments (${args}). Did you mean to pass an options object? See https://github.com/stripe/stripe-node/wiki/Passing-Options. (on API request to ${requestMethod} \\`${path}\\`)`\n    );\n  }\n  // When using full path, we can just invoke the URL interpolator directly\n  // as we don't need to use the resource to create a full path.\n  const requestPath = isUsingFullPath\n    ? commandPath(urlData)\n    : self.createFullPath(commandPath, urlData);\n  const headers = Object.assign(options.headers, spec.headers);\n  if (spec.validator) {\n    spec.validator(data, {headers});\n  }\n  const dataInQuery = spec.method === 'GET' || spec.method === 'DELETE';\n  const bodyData = dataInQuery ? {} : data;\n  const queryData = dataInQuery ? data : {};\n  return {\n    requestMethod,\n    requestPath,\n    bodyData,\n    queryData,\n    auth: options.auth,\n    headers,\n    host,\n    streaming,\n    settings: options.settings,\n  };\n}\nfunction makeRequest(self, requestArgs, spec, overrideData) {\n  return new Promise((resolve, reject) => {\n    let opts;\n    try {\n      opts = getRequestOpts(self, requestArgs, spec, overrideData);\n    } catch (err) {\n      reject(err);\n      return;\n    }\n    function requestCallback(err, response) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(\n          spec.transformResponseData\n            ? spec.transformResponseData(response)\n            : response\n        );\n      }\n    }\n    const emptyQuery = Object.keys(opts.queryData).length === 0;\n    const path = [\n      opts.requestPath,\n      emptyQuery ? '' : '?',\n      utils.stringifyRequestData(opts.queryData),\n    ].join('');\n    const {headers, settings} = opts;\n    self._request(\n      opts.requestMethod,\n      opts.host,\n      path,\n      opts.bodyData,\n      opts.auth,\n      {headers, settings, streaming: opts.streaming},\n      requestCallback\n    );\n  });\n}\nmodule.exports = makeRequest;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}