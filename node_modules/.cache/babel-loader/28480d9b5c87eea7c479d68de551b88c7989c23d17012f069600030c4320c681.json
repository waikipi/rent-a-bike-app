{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst {\n  create: createResolver\n} = require(\"enhanced-resolve\");\nconst nodeModule = require(\"module\");\nconst asyncLib = require(\"neo-async\");\nconst {\n  isAbsolute\n} = require(\"path\");\nconst AsyncQueue = require(\"./util/AsyncQueue\");\nconst StackedCacheMap = require(\"./util/StackedCacheMap\");\nconst createHash = require(\"./util/createHash\");\nconst {\n  join,\n  dirname,\n  relative,\n  lstatReadlinkAbsolute\n} = require(\"./util/fs\");\nconst makeSerializable = require(\"./util/makeSerializable\");\nconst processAsyncTree = require(\"./util/processAsyncTree\");\n\n/** @typedef {import(\"./WebpackError\")} WebpackError */\n/** @typedef {import(\"./logging/Logger\").Logger} Logger */\n/** @typedef {typeof import(\"./util/Hash\")} Hash */\n/** @typedef {import(\"./util/fs\").IStats} IStats */\n/** @typedef {import(\"./util/fs\").InputFileSystem} InputFileSystem */\n\nconst supportsEsm = +process.versions.modules >= 83;\nconst builtinModules = new Set(nodeModule.builtinModules);\nlet FS_ACCURACY = 2000;\nconst EMPTY_SET = new Set();\nconst RBDT_RESOLVE_CJS = 0;\nconst RBDT_RESOLVE_ESM = 1;\nconst RBDT_RESOLVE_DIRECTORY = 2;\nconst RBDT_RESOLVE_CJS_FILE = 3;\nconst RBDT_RESOLVE_CJS_FILE_AS_CHILD = 4;\nconst RBDT_RESOLVE_ESM_FILE = 5;\nconst RBDT_DIRECTORY = 6;\nconst RBDT_FILE = 7;\nconst RBDT_DIRECTORY_DEPENDENCIES = 8;\nconst RBDT_FILE_DEPENDENCIES = 9;\nconst INVALID = Symbol(\"invalid\");\n\n/**\n * @typedef {Object} FileSystemInfoEntry\n * @property {number} safeTime\n * @property {number=} timestamp\n */\n\n/**\n * @typedef {Object} ResolvedContextFileSystemInfoEntry\n * @property {number} safeTime\n * @property {string=} timestampHash\n */\n\n/**\n * @typedef {Object} ContextFileSystemInfoEntry\n * @property {number} safeTime\n * @property {string=} timestampHash\n * @property {ResolvedContextFileSystemInfoEntry=} resolved\n * @property {Set<string>=} symlinks\n */\n\n/**\n * @typedef {Object} TimestampAndHash\n * @property {number} safeTime\n * @property {number=} timestamp\n * @property {string} hash\n */\n\n/**\n * @typedef {Object} ResolvedContextTimestampAndHash\n * @property {number} safeTime\n * @property {string=} timestampHash\n * @property {string} hash\n */\n\n/**\n * @typedef {Object} ContextTimestampAndHash\n * @property {number} safeTime\n * @property {string=} timestampHash\n * @property {string} hash\n * @property {ResolvedContextTimestampAndHash=} resolved\n * @property {Set<string>=} symlinks\n */\n\n/**\n * @typedef {Object} ContextHash\n * @property {string} hash\n * @property {string=} resolved\n * @property {Set<string>=} symlinks\n */\n\n/**\n * @typedef {Object} SnapshotOptimizationEntry\n * @property {Snapshot} snapshot\n * @property {number} shared\n * @property {Set<string>} snapshotContent\n * @property {Set<SnapshotOptimizationEntry>} children\n */\n\n/**\n * @typedef {Object} ResolveBuildDependenciesResult\n * @property {Set<string>} files list of files\n * @property {Set<string>} directories list of directories\n * @property {Set<string>} missing list of missing entries\n * @property {Map<string, string | false>} resolveResults stored resolve results\n * @property {Object} resolveDependencies dependencies of the resolving\n * @property {Set<string>} resolveDependencies.files list of files\n * @property {Set<string>} resolveDependencies.directories list of directories\n * @property {Set<string>} resolveDependencies.missing list of missing entries\n */\n\nconst DONE_ITERATOR_RESULT = new Set().keys().next();\n\n// cspell:word tshs\n// Tsh = Timestamp + Hash\n// Tshs = Timestamp + Hash combinations\n\nclass SnapshotIterator {\n  constructor(next) {\n    this.next = next;\n  }\n}\nclass SnapshotIterable {\n  constructor(snapshot, getMaps) {\n    this.snapshot = snapshot;\n    this.getMaps = getMaps;\n  }\n  [Symbol.iterator]() {\n    let state = 0;\n    /** @type {IterableIterator<string>} */\n    let it;\n    /** @type {(Snapshot) => (Map<string, any> | Set<string>)[]} */\n    let getMaps;\n    /** @type {(Map<string, any> | Set<string>)[]} */\n    let maps;\n    /** @type {Snapshot} */\n    let snapshot;\n    let queue;\n    return new SnapshotIterator(() => {\n      for (;;) {\n        switch (state) {\n          case 0:\n            snapshot = this.snapshot;\n            getMaps = this.getMaps;\n            maps = getMaps(snapshot);\n            state = 1;\n          /* falls through */\n          case 1:\n            if (maps.length > 0) {\n              const map = maps.pop();\n              if (map !== undefined) {\n                it = map.keys();\n                state = 2;\n              } else {\n                break;\n              }\n            } else {\n              state = 3;\n              break;\n            }\n          /* falls through */\n          case 2:\n            {\n              const result = it.next();\n              if (!result.done) return result;\n              state = 1;\n              break;\n            }\n          case 3:\n            {\n              const children = snapshot.children;\n              if (children !== undefined) {\n                if (children.size === 1) {\n                  // shortcut for a single child\n                  // avoids allocation of queue\n                  for (const child of children) snapshot = child;\n                  maps = getMaps(snapshot);\n                  state = 1;\n                  break;\n                }\n                if (queue === undefined) queue = [];\n                for (const child of children) {\n                  queue.push(child);\n                }\n              }\n              if (queue !== undefined && queue.length > 0) {\n                snapshot = queue.pop();\n                maps = getMaps(snapshot);\n                state = 1;\n                break;\n              } else {\n                state = 4;\n              }\n            }\n          /* falls through */\n          case 4:\n            return DONE_ITERATOR_RESULT;\n        }\n      }\n    });\n  }\n}\nclass Snapshot {\n  constructor() {\n    this._flags = 0;\n    /** @type {Iterable<string> | undefined} */\n    this._cachedFileIterable = undefined;\n    /** @type {Iterable<string> | undefined} */\n    this._cachedContextIterable = undefined;\n    /** @type {Iterable<string> | undefined} */\n    this._cachedMissingIterable = undefined;\n    /** @type {number | undefined} */\n    this.startTime = undefined;\n    /** @type {Map<string, FileSystemInfoEntry | null> | undefined} */\n    this.fileTimestamps = undefined;\n    /** @type {Map<string, string | null> | undefined} */\n    this.fileHashes = undefined;\n    /** @type {Map<string, TimestampAndHash | string | null> | undefined} */\n    this.fileTshs = undefined;\n    /** @type {Map<string, ResolvedContextFileSystemInfoEntry | null> | undefined} */\n    this.contextTimestamps = undefined;\n    /** @type {Map<string, string | null> | undefined} */\n    this.contextHashes = undefined;\n    /** @type {Map<string, ResolvedContextTimestampAndHash | null> | undefined} */\n    this.contextTshs = undefined;\n    /** @type {Map<string, boolean> | undefined} */\n    this.missingExistence = undefined;\n    /** @type {Map<string, string> | undefined} */\n    this.managedItemInfo = undefined;\n    /** @type {Set<string> | undefined} */\n    this.managedFiles = undefined;\n    /** @type {Set<string> | undefined} */\n    this.managedContexts = undefined;\n    /** @type {Set<string> | undefined} */\n    this.managedMissing = undefined;\n    /** @type {Set<Snapshot> | undefined} */\n    this.children = undefined;\n  }\n  hasStartTime() {\n    return (this._flags & 1) !== 0;\n  }\n  setStartTime(value) {\n    this._flags = this._flags | 1;\n    this.startTime = value;\n  }\n  setMergedStartTime(value, snapshot) {\n    if (value) {\n      if (snapshot.hasStartTime()) {\n        this.setStartTime(Math.min(value, snapshot.startTime));\n      } else {\n        this.setStartTime(value);\n      }\n    } else {\n      if (snapshot.hasStartTime()) this.setStartTime(snapshot.startTime);\n    }\n  }\n  hasFileTimestamps() {\n    return (this._flags & 2) !== 0;\n  }\n  setFileTimestamps(value) {\n    this._flags = this._flags | 2;\n    this.fileTimestamps = value;\n  }\n  hasFileHashes() {\n    return (this._flags & 4) !== 0;\n  }\n  setFileHashes(value) {\n    this._flags = this._flags | 4;\n    this.fileHashes = value;\n  }\n  hasFileTshs() {\n    return (this._flags & 8) !== 0;\n  }\n  setFileTshs(value) {\n    this._flags = this._flags | 8;\n    this.fileTshs = value;\n  }\n  hasContextTimestamps() {\n    return (this._flags & 0x10) !== 0;\n  }\n  setContextTimestamps(value) {\n    this._flags = this._flags | 0x10;\n    this.contextTimestamps = value;\n  }\n  hasContextHashes() {\n    return (this._flags & 0x20) !== 0;\n  }\n  setContextHashes(value) {\n    this._flags = this._flags | 0x20;\n    this.contextHashes = value;\n  }\n  hasContextTshs() {\n    return (this._flags & 0x40) !== 0;\n  }\n  setContextTshs(value) {\n    this._flags = this._flags | 0x40;\n    this.contextTshs = value;\n  }\n  hasMissingExistence() {\n    return (this._flags & 0x80) !== 0;\n  }\n  setMissingExistence(value) {\n    this._flags = this._flags | 0x80;\n    this.missingExistence = value;\n  }\n  hasManagedItemInfo() {\n    return (this._flags & 0x100) !== 0;\n  }\n  setManagedItemInfo(value) {\n    this._flags = this._flags | 0x100;\n    this.managedItemInfo = value;\n  }\n  hasManagedFiles() {\n    return (this._flags & 0x200) !== 0;\n  }\n  setManagedFiles(value) {\n    this._flags = this._flags | 0x200;\n    this.managedFiles = value;\n  }\n  hasManagedContexts() {\n    return (this._flags & 0x400) !== 0;\n  }\n  setManagedContexts(value) {\n    this._flags = this._flags | 0x400;\n    this.managedContexts = value;\n  }\n  hasManagedMissing() {\n    return (this._flags & 0x800) !== 0;\n  }\n  setManagedMissing(value) {\n    this._flags = this._flags | 0x800;\n    this.managedMissing = value;\n  }\n  hasChildren() {\n    return (this._flags & 0x1000) !== 0;\n  }\n  setChildren(value) {\n    this._flags = this._flags | 0x1000;\n    this.children = value;\n  }\n  addChild(child) {\n    if (!this.hasChildren()) {\n      this.setChildren(new Set());\n    }\n    this.children.add(child);\n  }\n  serialize(_ref) {\n    let {\n      write\n    } = _ref;\n    write(this._flags);\n    if (this.hasStartTime()) write(this.startTime);\n    if (this.hasFileTimestamps()) write(this.fileTimestamps);\n    if (this.hasFileHashes()) write(this.fileHashes);\n    if (this.hasFileTshs()) write(this.fileTshs);\n    if (this.hasContextTimestamps()) write(this.contextTimestamps);\n    if (this.hasContextHashes()) write(this.contextHashes);\n    if (this.hasContextTshs()) write(this.contextTshs);\n    if (this.hasMissingExistence()) write(this.missingExistence);\n    if (this.hasManagedItemInfo()) write(this.managedItemInfo);\n    if (this.hasManagedFiles()) write(this.managedFiles);\n    if (this.hasManagedContexts()) write(this.managedContexts);\n    if (this.hasManagedMissing()) write(this.managedMissing);\n    if (this.hasChildren()) write(this.children);\n  }\n  deserialize(_ref2) {\n    let {\n      read\n    } = _ref2;\n    this._flags = read();\n    if (this.hasStartTime()) this.startTime = read();\n    if (this.hasFileTimestamps()) this.fileTimestamps = read();\n    if (this.hasFileHashes()) this.fileHashes = read();\n    if (this.hasFileTshs()) this.fileTshs = read();\n    if (this.hasContextTimestamps()) this.contextTimestamps = read();\n    if (this.hasContextHashes()) this.contextHashes = read();\n    if (this.hasContextTshs()) this.contextTshs = read();\n    if (this.hasMissingExistence()) this.missingExistence = read();\n    if (this.hasManagedItemInfo()) this.managedItemInfo = read();\n    if (this.hasManagedFiles()) this.managedFiles = read();\n    if (this.hasManagedContexts()) this.managedContexts = read();\n    if (this.hasManagedMissing()) this.managedMissing = read();\n    if (this.hasChildren()) this.children = read();\n  }\n\n  /**\n   * @param {function(Snapshot): (ReadonlyMap<string, any> | ReadonlySet<string>)[]} getMaps first\n   * @returns {Iterable<string>} iterable\n   */\n  _createIterable(getMaps) {\n    return new SnapshotIterable(this, getMaps);\n  }\n\n  /**\n   * @returns {Iterable<string>} iterable\n   */\n  getFileIterable() {\n    if (this._cachedFileIterable === undefined) {\n      this._cachedFileIterable = this._createIterable(s => [s.fileTimestamps, s.fileHashes, s.fileTshs, s.managedFiles]);\n    }\n    return this._cachedFileIterable;\n  }\n\n  /**\n   * @returns {Iterable<string>} iterable\n   */\n  getContextIterable() {\n    if (this._cachedContextIterable === undefined) {\n      this._cachedContextIterable = this._createIterable(s => [s.contextTimestamps, s.contextHashes, s.contextTshs, s.managedContexts]);\n    }\n    return this._cachedContextIterable;\n  }\n\n  /**\n   * @returns {Iterable<string>} iterable\n   */\n  getMissingIterable() {\n    if (this._cachedMissingIterable === undefined) {\n      this._cachedMissingIterable = this._createIterable(s => [s.missingExistence, s.managedMissing]);\n    }\n    return this._cachedMissingIterable;\n  }\n}\nmakeSerializable(Snapshot, \"webpack/lib/FileSystemInfo\", \"Snapshot\");\nconst MIN_COMMON_SNAPSHOT_SIZE = 3;\n\n/**\n * @template T\n */\nclass SnapshotOptimization {\n  /**\n   * @param {function(Snapshot): boolean} has has value\n   * @param {function(Snapshot): Map<string, T> | Set<string>} get get value\n   * @param {function(Snapshot, Map<string, T> | Set<string>): void} set set value\n   * @param {boolean=} useStartTime use the start time of snapshots\n   * @param {boolean=} isSet value is an Set instead of a Map\n   */\n  constructor(has, get, set) {\n    let useStartTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    let isSet = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    this._has = has;\n    this._get = get;\n    this._set = set;\n    this._useStartTime = useStartTime;\n    this._isSet = isSet;\n    /** @type {Map<string, SnapshotOptimizationEntry>} */\n    this._map = new Map();\n    this._statItemsShared = 0;\n    this._statItemsUnshared = 0;\n    this._statSharedSnapshots = 0;\n    this._statReusedSharedSnapshots = 0;\n  }\n  getStatisticMessage() {\n    const total = this._statItemsShared + this._statItemsUnshared;\n    if (total === 0) return undefined;\n    return `${this._statItemsShared && Math.round(this._statItemsShared * 100 / total)}% (${this._statItemsShared}/${total}) entries shared via ${this._statSharedSnapshots} shared snapshots (${this._statReusedSharedSnapshots + this._statSharedSnapshots} times referenced)`;\n  }\n  clear() {\n    this._map.clear();\n    this._statItemsShared = 0;\n    this._statItemsUnshared = 0;\n    this._statSharedSnapshots = 0;\n    this._statReusedSharedSnapshots = 0;\n  }\n\n  /**\n   * @param {Snapshot} newSnapshot snapshot\n   * @param {Set<string>} capturedFiles files to snapshot/share\n   * @returns {void}\n   */\n  optimize(newSnapshot, capturedFiles) {\n    /**\n     * @param {SnapshotOptimizationEntry} entry optimization entry\n     * @returns {void}\n     */\n    const increaseSharedAndStoreOptimizationEntry = entry => {\n      if (entry.children !== undefined) {\n        entry.children.forEach(increaseSharedAndStoreOptimizationEntry);\n      }\n      entry.shared++;\n      storeOptimizationEntry(entry);\n    };\n    /**\n     * @param {SnapshotOptimizationEntry} entry optimization entry\n     * @returns {void}\n     */\n    const storeOptimizationEntry = entry => {\n      for (const path of entry.snapshotContent) {\n        const old = this._map.get(path);\n        if (old.shared < entry.shared) {\n          this._map.set(path, entry);\n        }\n        capturedFiles.delete(path);\n      }\n    };\n\n    /** @type {SnapshotOptimizationEntry} */\n    let newOptimizationEntry = undefined;\n    const capturedFilesSize = capturedFiles.size;\n\n    /** @type {Set<SnapshotOptimizationEntry> | undefined} */\n    const optimizationEntries = new Set();\n    for (const path of capturedFiles) {\n      const optimizationEntry = this._map.get(path);\n      if (optimizationEntry === undefined) {\n        if (newOptimizationEntry === undefined) {\n          newOptimizationEntry = {\n            snapshot: newSnapshot,\n            shared: 0,\n            snapshotContent: undefined,\n            children: undefined\n          };\n        }\n        this._map.set(path, newOptimizationEntry);\n        continue;\n      } else {\n        optimizationEntries.add(optimizationEntry);\n      }\n    }\n    optimizationEntries: for (const optimizationEntry of optimizationEntries) {\n      const snapshot = optimizationEntry.snapshot;\n      if (optimizationEntry.shared > 0) {\n        // It's a shared snapshot\n        // We can't change it, so we can only use it when all files match\n        // and startTime is compatible\n        if (this._useStartTime && newSnapshot.startTime && (!snapshot.startTime || snapshot.startTime > newSnapshot.startTime)) {\n          continue;\n        }\n        const nonSharedFiles = new Set();\n        const snapshotContent = optimizationEntry.snapshotContent;\n        const snapshotEntries = this._get(snapshot);\n        for (const path of snapshotContent) {\n          if (!capturedFiles.has(path)) {\n            if (!snapshotEntries.has(path)) {\n              // File is not shared and can't be removed from the snapshot\n              // because it's in a child of the snapshot\n              continue optimizationEntries;\n            }\n            nonSharedFiles.add(path);\n            continue;\n          }\n        }\n        if (nonSharedFiles.size === 0) {\n          // The complete snapshot is shared\n          // add it as child\n          newSnapshot.addChild(snapshot);\n          increaseSharedAndStoreOptimizationEntry(optimizationEntry);\n          this._statReusedSharedSnapshots++;\n        } else {\n          // Only a part of the snapshot is shared\n          const sharedCount = snapshotContent.size - nonSharedFiles.size;\n          if (sharedCount < MIN_COMMON_SNAPSHOT_SIZE) {\n            // Common part it too small\n            continue optimizationEntries;\n          }\n          // Extract common timestamps from both snapshots\n          let commonMap;\n          if (this._isSet) {\n            commonMap = new Set();\n            for (const path of /** @type {Set<string>} */snapshotEntries) {\n              if (nonSharedFiles.has(path)) continue;\n              commonMap.add(path);\n              snapshotEntries.delete(path);\n            }\n          } else {\n            commonMap = new Map();\n            const map = /** @type {Map<string, T>} */snapshotEntries;\n            for (const [path, value] of map) {\n              if (nonSharedFiles.has(path)) continue;\n              commonMap.set(path, value);\n              snapshotEntries.delete(path);\n            }\n          }\n          // Create and attach snapshot\n          const commonSnapshot = new Snapshot();\n          if (this._useStartTime) {\n            commonSnapshot.setMergedStartTime(newSnapshot.startTime, snapshot);\n          }\n          this._set(commonSnapshot, commonMap);\n          newSnapshot.addChild(commonSnapshot);\n          snapshot.addChild(commonSnapshot);\n          // Create optimization entry\n          const newEntry = {\n            snapshot: commonSnapshot,\n            shared: optimizationEntry.shared + 1,\n            snapshotContent: new Set(commonMap.keys()),\n            children: undefined\n          };\n          if (optimizationEntry.children === undefined) optimizationEntry.children = new Set();\n          optimizationEntry.children.add(newEntry);\n          storeOptimizationEntry(newEntry);\n          this._statSharedSnapshots++;\n        }\n      } else {\n        // It's a unshared snapshot\n        // We can extract a common shared snapshot\n        // with all common files\n        const snapshotEntries = this._get(snapshot);\n        if (snapshotEntries === undefined) {\n          // Incomplete snapshot, that can't be used\n          continue optimizationEntries;\n        }\n        let commonMap;\n        if (this._isSet) {\n          commonMap = new Set();\n          const set = /** @type {Set<string>} */snapshotEntries;\n          if (capturedFiles.size < set.size) {\n            for (const path of capturedFiles) {\n              if (set.has(path)) commonMap.add(path);\n            }\n          } else {\n            for (const path of set) {\n              if (capturedFiles.has(path)) commonMap.add(path);\n            }\n          }\n        } else {\n          commonMap = new Map();\n          const map = /** @type {Map<string, T>} */snapshotEntries;\n          for (const path of capturedFiles) {\n            const ts = map.get(path);\n            if (ts === undefined) continue;\n            commonMap.set(path, ts);\n          }\n        }\n        if (commonMap.size < MIN_COMMON_SNAPSHOT_SIZE) {\n          // Common part it too small\n          continue optimizationEntries;\n        }\n        // Create and attach snapshot\n        const commonSnapshot = new Snapshot();\n        if (this._useStartTime) {\n          commonSnapshot.setMergedStartTime(newSnapshot.startTime, snapshot);\n        }\n        this._set(commonSnapshot, commonMap);\n        newSnapshot.addChild(commonSnapshot);\n        snapshot.addChild(commonSnapshot);\n        // Remove files from snapshot\n        for (const path of commonMap.keys()) snapshotEntries.delete(path);\n        const sharedCount = commonMap.size;\n        this._statItemsUnshared -= sharedCount;\n        this._statItemsShared += sharedCount;\n        // Create optimization entry\n        storeOptimizationEntry({\n          snapshot: commonSnapshot,\n          shared: 2,\n          snapshotContent: new Set(commonMap.keys()),\n          children: undefined\n        });\n        this._statSharedSnapshots++;\n      }\n    }\n    const unshared = capturedFiles.size;\n    this._statItemsUnshared += unshared;\n    this._statItemsShared += capturedFilesSize - unshared;\n  }\n}\nconst parseString = str => {\n  if (str[0] === \"'\") str = `\"${str.slice(1, -1).replace(/\"/g, '\\\\\"')}\"`;\n  return JSON.parse(str);\n};\n\n/* istanbul ignore next */\n/**\n * @param {number} mtime mtime\n */\nconst applyMtime = mtime => {\n  if (FS_ACCURACY > 1 && mtime % 2 !== 0) FS_ACCURACY = 1;else if (FS_ACCURACY > 10 && mtime % 20 !== 0) FS_ACCURACY = 10;else if (FS_ACCURACY > 100 && mtime % 200 !== 0) FS_ACCURACY = 100;else if (FS_ACCURACY > 1000 && mtime % 2000 !== 0) FS_ACCURACY = 1000;\n};\n\n/**\n * @template T\n * @template K\n * @param {Map<T, K>} a source map\n * @param {Map<T, K>} b joining map\n * @returns {Map<T, K>} joined map\n */\nconst mergeMaps = (a, b) => {\n  if (!b || b.size === 0) return a;\n  if (!a || a.size === 0) return b;\n  const map = new Map(a);\n  for (const [key, value] of b) {\n    map.set(key, value);\n  }\n  return map;\n};\n\n/**\n * @template T\n * @template K\n * @param {Set<T, K>} a source map\n * @param {Set<T, K>} b joining map\n * @returns {Set<T, K>} joined map\n */\nconst mergeSets = (a, b) => {\n  if (!b || b.size === 0) return a;\n  if (!a || a.size === 0) return b;\n  const map = new Set(a);\n  for (const item of b) {\n    map.add(item);\n  }\n  return map;\n};\n\n/**\n * Finding file or directory to manage\n * @param {string} managedPath path that is managing by {@link FileSystemInfo}\n * @param {string} path path to file or directory\n * @returns {string|null} managed item\n * @example\n * getManagedItem(\n *   '/Users/user/my-project/node_modules/',\n *   '/Users/user/my-project/node_modules/package/index.js'\n * ) === '/Users/user/my-project/node_modules/package'\n * getManagedItem(\n *   '/Users/user/my-project/node_modules/',\n *   '/Users/user/my-project/node_modules/package1/node_modules/package2'\n * ) === '/Users/user/my-project/node_modules/package1/node_modules/package2'\n * getManagedItem(\n *   '/Users/user/my-project/node_modules/',\n *   '/Users/user/my-project/node_modules/.bin/script.js'\n * ) === null // hidden files are disallowed as managed items\n * getManagedItem(\n *   '/Users/user/my-project/node_modules/',\n *   '/Users/user/my-project/node_modules/package'\n * ) === '/Users/user/my-project/node_modules/package'\n */\nconst getManagedItem = (managedPath, path) => {\n  let i = managedPath.length;\n  let slashes = 1;\n  let startingPosition = true;\n  loop: while (i < path.length) {\n    switch (path.charCodeAt(i)) {\n      case 47: // slash\n      case 92:\n        // backslash\n        if (--slashes === 0) break loop;\n        startingPosition = true;\n        break;\n      case 46:\n        // .\n        // hidden files are disallowed as managed items\n        // it's probably .yarn-integrity or .cache\n        if (startingPosition) return null;\n        break;\n      case 64:\n        // @\n        if (!startingPosition) return null;\n        slashes++;\n        break;\n      default:\n        startingPosition = false;\n        break;\n    }\n    i++;\n  }\n  if (i === path.length) slashes--;\n  // return null when path is incomplete\n  if (slashes !== 0) return null;\n  // if (path.slice(i + 1, i + 13) === \"node_modules\")\n  if (path.length >= i + 13 && path.charCodeAt(i + 1) === 110 && path.charCodeAt(i + 2) === 111 && path.charCodeAt(i + 3) === 100 && path.charCodeAt(i + 4) === 101 && path.charCodeAt(i + 5) === 95 && path.charCodeAt(i + 6) === 109 && path.charCodeAt(i + 7) === 111 && path.charCodeAt(i + 8) === 100 && path.charCodeAt(i + 9) === 117 && path.charCodeAt(i + 10) === 108 && path.charCodeAt(i + 11) === 101 && path.charCodeAt(i + 12) === 115) {\n    // if this is the end of the path\n    if (path.length === i + 13) {\n      // return the node_modules directory\n      // it's special\n      return path;\n    }\n    const c = path.charCodeAt(i + 13);\n    // if next symbol is slash or backslash\n    if (c === 47 || c === 92) {\n      // Managed subpath\n      return getManagedItem(path.slice(0, i + 14), path);\n    }\n  }\n  return path.slice(0, i);\n};\n\n/**\n * @template {ContextFileSystemInfoEntry | ContextTimestampAndHash} T\n * @param {T} entry entry\n * @returns {T[\"resolved\"] | undefined} the resolved entry\n */\nconst getResolvedTimestamp = entry => {\n  if (entry === null) return null;\n  if (entry.resolved !== undefined) return entry.resolved;\n  return entry.symlinks === undefined ? entry : undefined;\n};\n\n/**\n * @param {ContextHash} entry entry\n * @returns {string | undefined} the resolved entry\n */\nconst getResolvedHash = entry => {\n  if (entry === null) return null;\n  if (entry.resolved !== undefined) return entry.resolved;\n  return entry.symlinks === undefined ? entry.hash : undefined;\n};\nconst addAll = (source, target) => {\n  for (const key of source) target.add(key);\n};\n\n/**\n * Used to access information about the filesystem in a cached way\n */\nclass FileSystemInfo {\n  /**\n   * @param {InputFileSystem} fs file system\n   * @param {Object} options options\n   * @param {Iterable<string | RegExp>=} options.managedPaths paths that are only managed by a package manager\n   * @param {Iterable<string | RegExp>=} options.immutablePaths paths that are immutable\n   * @param {Logger=} options.logger logger used to log invalid snapshots\n   * @param {string | Hash=} options.hashFunction the hash function to use\n   */\n  constructor(fs) {\n    let {\n      managedPaths = [],\n      immutablePaths = [],\n      logger,\n      hashFunction = \"md4\"\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.fs = fs;\n    this.logger = logger;\n    this._remainingLogs = logger ? 40 : 0;\n    this._loggedPaths = logger ? new Set() : undefined;\n    this._hashFunction = hashFunction;\n    /** @type {WeakMap<Snapshot, boolean | (function(WebpackError=, boolean=): void)[]>} */\n    this._snapshotCache = new WeakMap();\n    this._fileTimestampsOptimization = new SnapshotOptimization(s => s.hasFileTimestamps(), s => s.fileTimestamps, (s, v) => s.setFileTimestamps(v));\n    this._fileHashesOptimization = new SnapshotOptimization(s => s.hasFileHashes(), s => s.fileHashes, (s, v) => s.setFileHashes(v), false);\n    this._fileTshsOptimization = new SnapshotOptimization(s => s.hasFileTshs(), s => s.fileTshs, (s, v) => s.setFileTshs(v));\n    this._contextTimestampsOptimization = new SnapshotOptimization(s => s.hasContextTimestamps(), s => s.contextTimestamps, (s, v) => s.setContextTimestamps(v));\n    this._contextHashesOptimization = new SnapshotOptimization(s => s.hasContextHashes(), s => s.contextHashes, (s, v) => s.setContextHashes(v), false);\n    this._contextTshsOptimization = new SnapshotOptimization(s => s.hasContextTshs(), s => s.contextTshs, (s, v) => s.setContextTshs(v));\n    this._missingExistenceOptimization = new SnapshotOptimization(s => s.hasMissingExistence(), s => s.missingExistence, (s, v) => s.setMissingExistence(v), false);\n    this._managedItemInfoOptimization = new SnapshotOptimization(s => s.hasManagedItemInfo(), s => s.managedItemInfo, (s, v) => s.setManagedItemInfo(v), false);\n    this._managedFilesOptimization = new SnapshotOptimization(s => s.hasManagedFiles(), s => s.managedFiles, (s, v) => s.setManagedFiles(v), false, true);\n    this._managedContextsOptimization = new SnapshotOptimization(s => s.hasManagedContexts(), s => s.managedContexts, (s, v) => s.setManagedContexts(v), false, true);\n    this._managedMissingOptimization = new SnapshotOptimization(s => s.hasManagedMissing(), s => s.managedMissing, (s, v) => s.setManagedMissing(v), false, true);\n    /** @type {StackedCacheMap<string, FileSystemInfoEntry | \"ignore\" | null>} */\n    this._fileTimestamps = new StackedCacheMap();\n    /** @type {Map<string, string>} */\n    this._fileHashes = new Map();\n    /** @type {Map<string, TimestampAndHash | string>} */\n    this._fileTshs = new Map();\n    /** @type {StackedCacheMap<string, ContextFileSystemInfoEntry | \"ignore\" | null>} */\n    this._contextTimestamps = new StackedCacheMap();\n    /** @type {Map<string, ContextHash>} */\n    this._contextHashes = new Map();\n    /** @type {Map<string, ContextTimestampAndHash>} */\n    this._contextTshs = new Map();\n    /** @type {Map<string, string>} */\n    this._managedItems = new Map();\n    /** @type {AsyncQueue<string, string, FileSystemInfoEntry | null>} */\n    this.fileTimestampQueue = new AsyncQueue({\n      name: \"file timestamp\",\n      parallelism: 30,\n      processor: this._readFileTimestamp.bind(this)\n    });\n    /** @type {AsyncQueue<string, string, string | null>} */\n    this.fileHashQueue = new AsyncQueue({\n      name: \"file hash\",\n      parallelism: 10,\n      processor: this._readFileHash.bind(this)\n    });\n    /** @type {AsyncQueue<string, string, ContextFileSystemInfoEntry | null>} */\n    this.contextTimestampQueue = new AsyncQueue({\n      name: \"context timestamp\",\n      parallelism: 2,\n      processor: this._readContextTimestamp.bind(this)\n    });\n    /** @type {AsyncQueue<string, string, ContextHash | null>} */\n    this.contextHashQueue = new AsyncQueue({\n      name: \"context hash\",\n      parallelism: 2,\n      processor: this._readContextHash.bind(this)\n    });\n    /** @type {AsyncQueue<string, string, ContextTimestampAndHash | null>} */\n    this.contextTshQueue = new AsyncQueue({\n      name: \"context hash and timestamp\",\n      parallelism: 2,\n      processor: this._readContextTimestampAndHash.bind(this)\n    });\n    /** @type {AsyncQueue<string, string, string | null>} */\n    this.managedItemQueue = new AsyncQueue({\n      name: \"managed item info\",\n      parallelism: 10,\n      processor: this._getManagedItemInfo.bind(this)\n    });\n    /** @type {AsyncQueue<string, string, Set<string>>} */\n    this.managedItemDirectoryQueue = new AsyncQueue({\n      name: \"managed item directory info\",\n      parallelism: 10,\n      processor: this._getManagedItemDirectoryInfo.bind(this)\n    });\n    this.managedPaths = Array.from(managedPaths);\n    this.managedPathsWithSlash = /** @type {string[]} */this.managedPaths.filter(p => typeof p === \"string\").map(p => join(fs, p, \"_\").slice(0, -1));\n    this.managedPathsRegExps = /** @type {RegExp[]} */\n    this.managedPaths.filter(p => typeof p !== \"string\");\n    this.immutablePaths = Array.from(immutablePaths);\n    this.immutablePathsWithSlash = /** @type {string[]} */this.immutablePaths.filter(p => typeof p === \"string\").map(p => join(fs, p, \"_\").slice(0, -1));\n    this.immutablePathsRegExps = /** @type {RegExp[]} */\n    this.immutablePaths.filter(p => typeof p !== \"string\");\n    this._cachedDeprecatedFileTimestamps = undefined;\n    this._cachedDeprecatedContextTimestamps = undefined;\n    this._warnAboutExperimentalEsmTracking = false;\n    this._statCreatedSnapshots = 0;\n    this._statTestedSnapshotsCached = 0;\n    this._statTestedSnapshotsNotCached = 0;\n    this._statTestedChildrenCached = 0;\n    this._statTestedChildrenNotCached = 0;\n    this._statTestedEntries = 0;\n  }\n  logStatistics() {\n    const logWhenMessage = (header, message) => {\n      if (message) {\n        this.logger.log(`${header}: ${message}`);\n      }\n    };\n    this.logger.log(`${this._statCreatedSnapshots} new snapshots created`);\n    this.logger.log(`${this._statTestedSnapshotsNotCached && Math.round(this._statTestedSnapshotsNotCached * 100 / (this._statTestedSnapshotsCached + this._statTestedSnapshotsNotCached))}% root snapshot uncached (${this._statTestedSnapshotsNotCached} / ${this._statTestedSnapshotsCached + this._statTestedSnapshotsNotCached})`);\n    this.logger.log(`${this._statTestedChildrenNotCached && Math.round(this._statTestedChildrenNotCached * 100 / (this._statTestedChildrenCached + this._statTestedChildrenNotCached))}% children snapshot uncached (${this._statTestedChildrenNotCached} / ${this._statTestedChildrenCached + this._statTestedChildrenNotCached})`);\n    this.logger.log(`${this._statTestedEntries} entries tested`);\n    this.logger.log(`File info in cache: ${this._fileTimestamps.size} timestamps ${this._fileHashes.size} hashes ${this._fileTshs.size} timestamp hash combinations`);\n    logWhenMessage(`File timestamp snapshot optimization`, this._fileTimestampsOptimization.getStatisticMessage());\n    logWhenMessage(`File hash snapshot optimization`, this._fileHashesOptimization.getStatisticMessage());\n    logWhenMessage(`File timestamp hash combination snapshot optimization`, this._fileTshsOptimization.getStatisticMessage());\n    this.logger.log(`Directory info in cache: ${this._contextTimestamps.size} timestamps ${this._contextHashes.size} hashes ${this._contextTshs.size} timestamp hash combinations`);\n    logWhenMessage(`Directory timestamp snapshot optimization`, this._contextTimestampsOptimization.getStatisticMessage());\n    logWhenMessage(`Directory hash snapshot optimization`, this._contextHashesOptimization.getStatisticMessage());\n    logWhenMessage(`Directory timestamp hash combination snapshot optimization`, this._contextTshsOptimization.getStatisticMessage());\n    logWhenMessage(`Missing items snapshot optimization`, this._missingExistenceOptimization.getStatisticMessage());\n    this.logger.log(`Managed items info in cache: ${this._managedItems.size} items`);\n    logWhenMessage(`Managed items snapshot optimization`, this._managedItemInfoOptimization.getStatisticMessage());\n    logWhenMessage(`Managed files snapshot optimization`, this._managedFilesOptimization.getStatisticMessage());\n    logWhenMessage(`Managed contexts snapshot optimization`, this._managedContextsOptimization.getStatisticMessage());\n    logWhenMessage(`Managed missing snapshot optimization`, this._managedMissingOptimization.getStatisticMessage());\n  }\n  _log(path, reason) {\n    const key = path + reason;\n    if (this._loggedPaths.has(key)) return;\n    this._loggedPaths.add(key);\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n    this.logger.debug(`${path} invalidated because ${reason}`, ...args);\n    if (--this._remainingLogs === 0) {\n      this.logger.debug(\"Logging limit has been reached and no further logging will be emitted by FileSystemInfo\");\n    }\n  }\n  clear() {\n    this._remainingLogs = this.logger ? 40 : 0;\n    if (this._loggedPaths !== undefined) this._loggedPaths.clear();\n    this._snapshotCache = new WeakMap();\n    this._fileTimestampsOptimization.clear();\n    this._fileHashesOptimization.clear();\n    this._fileTshsOptimization.clear();\n    this._contextTimestampsOptimization.clear();\n    this._contextHashesOptimization.clear();\n    this._contextTshsOptimization.clear();\n    this._missingExistenceOptimization.clear();\n    this._managedItemInfoOptimization.clear();\n    this._managedFilesOptimization.clear();\n    this._managedContextsOptimization.clear();\n    this._managedMissingOptimization.clear();\n    this._fileTimestamps.clear();\n    this._fileHashes.clear();\n    this._fileTshs.clear();\n    this._contextTimestamps.clear();\n    this._contextHashes.clear();\n    this._contextTshs.clear();\n    this._managedItems.clear();\n    this._managedItems.clear();\n    this._cachedDeprecatedFileTimestamps = undefined;\n    this._cachedDeprecatedContextTimestamps = undefined;\n    this._statCreatedSnapshots = 0;\n    this._statTestedSnapshotsCached = 0;\n    this._statTestedSnapshotsNotCached = 0;\n    this._statTestedChildrenCached = 0;\n    this._statTestedChildrenNotCached = 0;\n    this._statTestedEntries = 0;\n  }\n\n  /**\n   * @param {ReadonlyMap<string, FileSystemInfoEntry | \"ignore\" | null>} map timestamps\n   * @param {boolean=} immutable if 'map' is immutable and FileSystemInfo can keep referencing it\n   * @returns {void}\n   */\n  addFileTimestamps(map, immutable) {\n    this._fileTimestamps.addAll(map, immutable);\n    this._cachedDeprecatedFileTimestamps = undefined;\n  }\n\n  /**\n   * @param {ReadonlyMap<string, FileSystemInfoEntry | \"ignore\" | null>} map timestamps\n   * @param {boolean=} immutable if 'map' is immutable and FileSystemInfo can keep referencing it\n   * @returns {void}\n   */\n  addContextTimestamps(map, immutable) {\n    this._contextTimestamps.addAll(map, immutable);\n    this._cachedDeprecatedContextTimestamps = undefined;\n  }\n\n  /**\n   * @param {string} path file path\n   * @param {function((WebpackError | null)=, (FileSystemInfoEntry | \"ignore\" | null)=): void} callback callback function\n   * @returns {void}\n   */\n  getFileTimestamp(path, callback) {\n    const cache = this._fileTimestamps.get(path);\n    if (cache !== undefined) return callback(null, cache);\n    this.fileTimestampQueue.add(path, callback);\n  }\n\n  /**\n   * @param {string} path context path\n   * @param {function((WebpackError | null)=, (ResolvedContextFileSystemInfoEntry | \"ignore\" | null)=): void} callback callback function\n   * @returns {void}\n   */\n  getContextTimestamp(path, callback) {\n    const cache = this._contextTimestamps.get(path);\n    if (cache !== undefined) {\n      if (cache === \"ignore\") return callback(null, \"ignore\");\n      const resolved = getResolvedTimestamp(cache);\n      if (resolved !== undefined) return callback(null, resolved);\n      return this._resolveContextTimestamp(cache, callback);\n    }\n    this.contextTimestampQueue.add(path, (err, entry) => {\n      if (err) return callback(err);\n      const resolved = getResolvedTimestamp(entry);\n      if (resolved !== undefined) return callback(null, resolved);\n      this._resolveContextTimestamp(entry, callback);\n    });\n  }\n\n  /**\n   * @param {string} path context path\n   * @param {function((WebpackError | null)=, (ContextFileSystemInfoEntry | \"ignore\" | null)=): void} callback callback function\n   * @returns {void}\n   */\n  _getUnresolvedContextTimestamp(path, callback) {\n    const cache = this._contextTimestamps.get(path);\n    if (cache !== undefined) return callback(null, cache);\n    this.contextTimestampQueue.add(path, callback);\n  }\n\n  /**\n   * @param {string} path file path\n   * @param {function((WebpackError | null)=, string=): void} callback callback function\n   * @returns {void}\n   */\n  getFileHash(path, callback) {\n    const cache = this._fileHashes.get(path);\n    if (cache !== undefined) return callback(null, cache);\n    this.fileHashQueue.add(path, callback);\n  }\n\n  /**\n   * @param {string} path context path\n   * @param {function((WebpackError | null)=, string=): void} callback callback function\n   * @returns {void}\n   */\n  getContextHash(path, callback) {\n    const cache = this._contextHashes.get(path);\n    if (cache !== undefined) {\n      const resolved = getResolvedHash(cache);\n      if (resolved !== undefined) return callback(null, resolved);\n      return this._resolveContextHash(cache, callback);\n    }\n    this.contextHashQueue.add(path, (err, entry) => {\n      if (err) return callback(err);\n      const resolved = getResolvedHash(entry);\n      if (resolved !== undefined) return callback(null, resolved);\n      this._resolveContextHash(entry, callback);\n    });\n  }\n\n  /**\n   * @param {string} path context path\n   * @param {function((WebpackError | null)=, ContextHash=): void} callback callback function\n   * @returns {void}\n   */\n  _getUnresolvedContextHash(path, callback) {\n    const cache = this._contextHashes.get(path);\n    if (cache !== undefined) return callback(null, cache);\n    this.contextHashQueue.add(path, callback);\n  }\n\n  /**\n   * @param {string} path context path\n   * @param {function((WebpackError | null)=, ResolvedContextTimestampAndHash=): void} callback callback function\n   * @returns {void}\n   */\n  getContextTsh(path, callback) {\n    const cache = this._contextTshs.get(path);\n    if (cache !== undefined) {\n      const resolved = getResolvedTimestamp(cache);\n      if (resolved !== undefined) return callback(null, resolved);\n      return this._resolveContextTsh(cache, callback);\n    }\n    this.contextTshQueue.add(path, (err, entry) => {\n      if (err) return callback(err);\n      const resolved = getResolvedTimestamp(entry);\n      if (resolved !== undefined) return callback(null, resolved);\n      this._resolveContextTsh(entry, callback);\n    });\n  }\n\n  /**\n   * @param {string} path context path\n   * @param {function((WebpackError | null)=, ContextTimestampAndHash=): void} callback callback function\n   * @returns {void}\n   */\n  _getUnresolvedContextTsh(path, callback) {\n    const cache = this._contextTshs.get(path);\n    if (cache !== undefined) return callback(null, cache);\n    this.contextTshQueue.add(path, callback);\n  }\n  _createBuildDependenciesResolvers() {\n    const resolveContext = createResolver({\n      resolveToContext: true,\n      exportsFields: [],\n      fileSystem: this.fs\n    });\n    const resolveCjs = createResolver({\n      extensions: [\".js\", \".json\", \".node\"],\n      conditionNames: [\"require\", \"node\"],\n      exportsFields: [\"exports\"],\n      fileSystem: this.fs\n    });\n    const resolveCjsAsChild = createResolver({\n      extensions: [\".js\", \".json\", \".node\"],\n      conditionNames: [\"require\", \"node\"],\n      exportsFields: [],\n      fileSystem: this.fs\n    });\n    const resolveEsm = createResolver({\n      extensions: [\".js\", \".json\", \".node\"],\n      fullySpecified: true,\n      conditionNames: [\"import\", \"node\"],\n      exportsFields: [\"exports\"],\n      fileSystem: this.fs\n    });\n    return {\n      resolveContext,\n      resolveEsm,\n      resolveCjs,\n      resolveCjsAsChild\n    };\n  }\n\n  /**\n   * @param {string} context context directory\n   * @param {Iterable<string>} deps dependencies\n   * @param {function((Error | null)=, ResolveBuildDependenciesResult=): void} callback callback function\n   * @returns {void}\n   */\n  resolveBuildDependencies(context, deps, callback) {\n    const {\n      resolveContext,\n      resolveEsm,\n      resolveCjs,\n      resolveCjsAsChild\n    } = this._createBuildDependenciesResolvers();\n\n    /** @type {Set<string>} */\n    const files = new Set();\n    /** @type {Set<string>} */\n    const fileSymlinks = new Set();\n    /** @type {Set<string>} */\n    const directories = new Set();\n    /** @type {Set<string>} */\n    const directorySymlinks = new Set();\n    /** @type {Set<string>} */\n    const missing = new Set();\n    /** @type {Set<string>} */\n    const resolveFiles = new Set();\n    /** @type {Set<string>} */\n    const resolveDirectories = new Set();\n    /** @type {Set<string>} */\n    const resolveMissing = new Set();\n    /** @type {Map<string, string | false>} */\n    const resolveResults = new Map();\n    const invalidResolveResults = new Set();\n    const resolverContext = {\n      fileDependencies: resolveFiles,\n      contextDependencies: resolveDirectories,\n      missingDependencies: resolveMissing\n    };\n    const expectedToString = expected => {\n      return expected ? ` (expected ${expected})` : \"\";\n    };\n    const jobToString = job => {\n      switch (job.type) {\n        case RBDT_RESOLVE_CJS:\n          return `resolve commonjs ${job.path}${expectedToString(job.expected)}`;\n        case RBDT_RESOLVE_ESM:\n          return `resolve esm ${job.path}${expectedToString(job.expected)}`;\n        case RBDT_RESOLVE_DIRECTORY:\n          return `resolve directory ${job.path}`;\n        case RBDT_RESOLVE_CJS_FILE:\n          return `resolve commonjs file ${job.path}${expectedToString(job.expected)}`;\n        case RBDT_RESOLVE_ESM_FILE:\n          return `resolve esm file ${job.path}${expectedToString(job.expected)}`;\n        case RBDT_DIRECTORY:\n          return `directory ${job.path}`;\n        case RBDT_FILE:\n          return `file ${job.path}`;\n        case RBDT_DIRECTORY_DEPENDENCIES:\n          return `directory dependencies ${job.path}`;\n        case RBDT_FILE_DEPENDENCIES:\n          return `file dependencies ${job.path}`;\n      }\n      return `unknown ${job.type} ${job.path}`;\n    };\n    const pathToString = job => {\n      let result = ` at ${jobToString(job)}`;\n      job = job.issuer;\n      while (job !== undefined) {\n        result += `\\n at ${jobToString(job)}`;\n        job = job.issuer;\n      }\n      return result;\n    };\n    processAsyncTree(Array.from(deps, dep => ({\n      type: RBDT_RESOLVE_CJS,\n      context,\n      path: dep,\n      expected: undefined,\n      issuer: undefined\n    })), 20, (job, push, callback) => {\n      const {\n        type,\n        context,\n        path,\n        expected\n      } = job;\n      const resolveDirectory = path => {\n        const key = `d\\n${context}\\n${path}`;\n        if (resolveResults.has(key)) {\n          return callback();\n        }\n        resolveResults.set(key, undefined);\n        resolveContext(context, path, resolverContext, (err, _, result) => {\n          if (err) {\n            if (expected === false) {\n              resolveResults.set(key, false);\n              return callback();\n            }\n            invalidResolveResults.add(key);\n            err.message += `\\nwhile resolving '${path}' in ${context} to a directory`;\n            return callback(err);\n          }\n          const resultPath = result.path;\n          resolveResults.set(key, resultPath);\n          push({\n            type: RBDT_DIRECTORY,\n            context: undefined,\n            path: resultPath,\n            expected: undefined,\n            issuer: job\n          });\n          callback();\n        });\n      };\n      const resolveFile = (path, symbol, resolve) => {\n        const key = `${symbol}\\n${context}\\n${path}`;\n        if (resolveResults.has(key)) {\n          return callback();\n        }\n        resolveResults.set(key, undefined);\n        resolve(context, path, resolverContext, (err, _, result) => {\n          if (typeof expected === \"string\") {\n            if (!err && result && result.path === expected) {\n              resolveResults.set(key, result.path);\n            } else {\n              invalidResolveResults.add(key);\n              this.logger.warn(`Resolving '${path}' in ${context} for build dependencies doesn't lead to expected result '${expected}', but to '${err || result && result.path}' instead. Resolving dependencies are ignored for this path.\\n${pathToString(job)}`);\n            }\n          } else {\n            if (err) {\n              if (expected === false) {\n                resolveResults.set(key, false);\n                return callback();\n              }\n              invalidResolveResults.add(key);\n              err.message += `\\nwhile resolving '${path}' in ${context} as file\\n${pathToString(job)}`;\n              return callback(err);\n            }\n            const resultPath = result.path;\n            resolveResults.set(key, resultPath);\n            push({\n              type: RBDT_FILE,\n              context: undefined,\n              path: resultPath,\n              expected: undefined,\n              issuer: job\n            });\n          }\n          callback();\n        });\n      };\n      switch (type) {\n        case RBDT_RESOLVE_CJS:\n          {\n            const isDirectory = /[\\\\/]$/.test(path);\n            if (isDirectory) {\n              resolveDirectory(path.slice(0, path.length - 1));\n            } else {\n              resolveFile(path, \"f\", resolveCjs);\n            }\n            break;\n          }\n        case RBDT_RESOLVE_ESM:\n          {\n            const isDirectory = /[\\\\/]$/.test(path);\n            if (isDirectory) {\n              resolveDirectory(path.slice(0, path.length - 1));\n            } else {\n              resolveFile(path);\n            }\n            break;\n          }\n        case RBDT_RESOLVE_DIRECTORY:\n          {\n            resolveDirectory(path);\n            break;\n          }\n        case RBDT_RESOLVE_CJS_FILE:\n          {\n            resolveFile(path, \"f\", resolveCjs);\n            break;\n          }\n        case RBDT_RESOLVE_CJS_FILE_AS_CHILD:\n          {\n            resolveFile(path, \"c\", resolveCjsAsChild);\n            break;\n          }\n        case RBDT_RESOLVE_ESM_FILE:\n          {\n            resolveFile(path, \"e\", resolveEsm);\n            break;\n          }\n        case RBDT_FILE:\n          {\n            if (files.has(path)) {\n              callback();\n              break;\n            }\n            files.add(path);\n            this.fs.realpath(path, (err, _realPath) => {\n              if (err) return callback(err);\n              const realPath = /** @type {string} */_realPath;\n              if (realPath !== path) {\n                fileSymlinks.add(path);\n                resolveFiles.add(path);\n                if (files.has(realPath)) return callback();\n                files.add(realPath);\n              }\n              push({\n                type: RBDT_FILE_DEPENDENCIES,\n                context: undefined,\n                path: realPath,\n                expected: undefined,\n                issuer: job\n              });\n              callback();\n            });\n            break;\n          }\n        case RBDT_DIRECTORY:\n          {\n            if (directories.has(path)) {\n              callback();\n              break;\n            }\n            directories.add(path);\n            this.fs.realpath(path, (err, _realPath) => {\n              if (err) return callback(err);\n              const realPath = /** @type {string} */_realPath;\n              if (realPath !== path) {\n                directorySymlinks.add(path);\n                resolveFiles.add(path);\n                if (directories.has(realPath)) return callback();\n                directories.add(realPath);\n              }\n              push({\n                type: RBDT_DIRECTORY_DEPENDENCIES,\n                context: undefined,\n                path: realPath,\n                expected: undefined,\n                issuer: job\n              });\n              callback();\n            });\n            break;\n          }\n        case RBDT_FILE_DEPENDENCIES:\n          {\n            // Check for known files without dependencies\n            if (/\\.json5?$|\\.yarn-integrity$|yarn\\.lock$|\\.ya?ml/.test(path)) {\n              process.nextTick(callback);\n              break;\n            }\n            // Check commonjs cache for the module\n            /** @type {NodeModule} */\n            const module = require.cache[path];\n            if (module && Array.isArray(module.children)) {\n              children: for (const child of module.children) {\n                let childPath = child.filename;\n                if (childPath) {\n                  push({\n                    type: RBDT_FILE,\n                    context: undefined,\n                    path: childPath,\n                    expected: undefined,\n                    issuer: job\n                  });\n                  const context = dirname(this.fs, path);\n                  for (const modulePath of module.paths) {\n                    if (childPath.startsWith(modulePath)) {\n                      let subPath = childPath.slice(modulePath.length + 1);\n                      const packageMatch = /^(@[^\\\\/]+[\\\\/])[^\\\\/]+/.exec(subPath);\n                      if (packageMatch) {\n                        push({\n                          type: RBDT_FILE,\n                          context: undefined,\n                          path: modulePath + childPath[modulePath.length] + packageMatch[0] + childPath[modulePath.length] + \"package.json\",\n                          expected: false,\n                          issuer: job\n                        });\n                      }\n                      let request = subPath.replace(/\\\\/g, \"/\");\n                      if (request.endsWith(\".js\")) request = request.slice(0, -3);\n                      push({\n                        type: RBDT_RESOLVE_CJS_FILE_AS_CHILD,\n                        context,\n                        path: request,\n                        expected: child.filename,\n                        issuer: job\n                      });\n                      continue children;\n                    }\n                  }\n                  let request = relative(this.fs, context, childPath);\n                  if (request.endsWith(\".js\")) request = request.slice(0, -3);\n                  request = request.replace(/\\\\/g, \"/\");\n                  if (!request.startsWith(\"../\") && !isAbsolute(request)) {\n                    request = `./${request}`;\n                  }\n                  push({\n                    type: RBDT_RESOLVE_CJS_FILE,\n                    context,\n                    path: request,\n                    expected: child.filename,\n                    issuer: job\n                  });\n                }\n              }\n            } else if (supportsEsm && /\\.m?js$/.test(path)) {\n              if (!this._warnAboutExperimentalEsmTracking) {\n                this.logger.log(\"Node.js doesn't offer a (nice) way to introspect the ESM dependency graph yet.\\n\" + \"Until a full solution is available webpack uses an experimental ESM tracking based on parsing.\\n\" + \"As best effort webpack parses the ESM files to guess dependencies. But this can lead to expensive and incorrect tracking.\");\n                this._warnAboutExperimentalEsmTracking = true;\n              }\n              const lexer = require(\"es-module-lexer\");\n              lexer.init.then(() => {\n                this.fs.readFile(path, (err, content) => {\n                  if (err) return callback(err);\n                  try {\n                    const context = dirname(this.fs, path);\n                    const source = content.toString();\n                    const [imports] = lexer.parse(source);\n                    for (const imp of imports) {\n                      try {\n                        let dependency;\n                        if (imp.d === -1) {\n                          // import ... from \"...\"\n                          dependency = parseString(source.substring(imp.s - 1, imp.e + 1));\n                        } else if (imp.d > -1) {\n                          // import()\n                          let expr = source.substring(imp.s, imp.e).trim();\n                          dependency = parseString(expr);\n                        } else {\n                          // e.g. import.meta\n                          continue;\n                        }\n\n                        // we should not track Node.js build dependencies\n                        if (dependency.startsWith(\"node:\")) continue;\n                        if (builtinModules.has(dependency)) continue;\n                        push({\n                          type: RBDT_RESOLVE_ESM_FILE,\n                          context,\n                          path: dependency,\n                          expected: undefined,\n                          issuer: job\n                        });\n                      } catch (e) {\n                        this.logger.warn(`Parsing of ${path} for build dependencies failed at 'import(${source.substring(imp.s, imp.e)})'.\\n` + \"Build dependencies behind this expression are ignored and might cause incorrect cache invalidation.\");\n                        this.logger.debug(pathToString(job));\n                        this.logger.debug(e.stack);\n                      }\n                    }\n                  } catch (e) {\n                    this.logger.warn(`Parsing of ${path} for build dependencies failed and all dependencies of this file are ignored, which might cause incorrect cache invalidation..`);\n                    this.logger.debug(pathToString(job));\n                    this.logger.debug(e.stack);\n                  }\n                  process.nextTick(callback);\n                });\n              }, callback);\n              break;\n            } else {\n              this.logger.log(`Assuming ${path} has no dependencies as we were unable to assign it to any module system.`);\n              this.logger.debug(pathToString(job));\n            }\n            process.nextTick(callback);\n            break;\n          }\n        case RBDT_DIRECTORY_DEPENDENCIES:\n          {\n            const match = /(^.+[\\\\/]node_modules[\\\\/](?:@[^\\\\/]+[\\\\/])?[^\\\\/]+)/.exec(path);\n            const packagePath = match ? match[1] : path;\n            const packageJson = join(this.fs, packagePath, \"package.json\");\n            this.fs.readFile(packageJson, (err, content) => {\n              if (err) {\n                if (err.code === \"ENOENT\") {\n                  resolveMissing.add(packageJson);\n                  const parent = dirname(this.fs, packagePath);\n                  if (parent !== packagePath) {\n                    push({\n                      type: RBDT_DIRECTORY_DEPENDENCIES,\n                      context: undefined,\n                      path: parent,\n                      expected: undefined,\n                      issuer: job\n                    });\n                  }\n                  callback();\n                  return;\n                }\n                return callback(err);\n              }\n              resolveFiles.add(packageJson);\n              let packageData;\n              try {\n                packageData = JSON.parse(content.toString(\"utf-8\"));\n              } catch (e) {\n                return callback(e);\n              }\n              const depsObject = packageData.dependencies;\n              const optionalDepsObject = packageData.optionalDependencies;\n              const allDeps = new Set();\n              const optionalDeps = new Set();\n              if (typeof depsObject === \"object\" && depsObject) {\n                for (const dep of Object.keys(depsObject)) {\n                  allDeps.add(dep);\n                }\n              }\n              if (typeof optionalDepsObject === \"object\" && optionalDepsObject) {\n                for (const dep of Object.keys(optionalDepsObject)) {\n                  allDeps.add(dep);\n                  optionalDeps.add(dep);\n                }\n              }\n              for (const dep of allDeps) {\n                push({\n                  type: RBDT_RESOLVE_DIRECTORY,\n                  context: packagePath,\n                  path: dep,\n                  expected: !optionalDeps.has(dep),\n                  issuer: job\n                });\n              }\n              callback();\n            });\n            break;\n          }\n      }\n    }, err => {\n      if (err) return callback(err);\n      for (const l of fileSymlinks) files.delete(l);\n      for (const l of directorySymlinks) directories.delete(l);\n      for (const k of invalidResolveResults) resolveResults.delete(k);\n      callback(null, {\n        files,\n        directories,\n        missing,\n        resolveResults,\n        resolveDependencies: {\n          files: resolveFiles,\n          directories: resolveDirectories,\n          missing: resolveMissing\n        }\n      });\n    });\n  }\n\n  /**\n   * @param {Map<string, string | false>} resolveResults results from resolving\n   * @param {function((Error | null)=, boolean=): void} callback callback with true when resolveResults resolve the same way\n   * @returns {void}\n   */\n  checkResolveResultsValid(resolveResults, callback) {\n    const {\n      resolveCjs,\n      resolveCjsAsChild,\n      resolveEsm,\n      resolveContext\n    } = this._createBuildDependenciesResolvers();\n    asyncLib.eachLimit(resolveResults, 20, (_ref3, callback) => {\n      let [key, expectedResult] = _ref3;\n      const [type, context, path] = key.split(\"\\n\");\n      switch (type) {\n        case \"d\":\n          resolveContext(context, path, {}, (err, _, result) => {\n            if (expectedResult === false) return callback(err ? undefined : INVALID);\n            if (err) return callback(err);\n            const resultPath = result.path;\n            if (resultPath !== expectedResult) return callback(INVALID);\n            callback();\n          });\n          break;\n        case \"f\":\n          resolveCjs(context, path, {}, (err, _, result) => {\n            if (expectedResult === false) return callback(err ? undefined : INVALID);\n            if (err) return callback(err);\n            const resultPath = result.path;\n            if (resultPath !== expectedResult) return callback(INVALID);\n            callback();\n          });\n          break;\n        case \"c\":\n          resolveCjsAsChild(context, path, {}, (err, _, result) => {\n            if (expectedResult === false) return callback(err ? undefined : INVALID);\n            if (err) return callback(err);\n            const resultPath = result.path;\n            if (resultPath !== expectedResult) return callback(INVALID);\n            callback();\n          });\n          break;\n        case \"e\":\n          resolveEsm(context, path, {}, (err, _, result) => {\n            if (expectedResult === false) return callback(err ? undefined : INVALID);\n            if (err) return callback(err);\n            const resultPath = result.path;\n            if (resultPath !== expectedResult) return callback(INVALID);\n            callback();\n          });\n          break;\n        default:\n          callback(new Error(\"Unexpected type in resolve result key\"));\n          break;\n      }\n    },\n    /**\n     * @param {Error | typeof INVALID=} err error or invalid flag\n     * @returns {void}\n     */\n    err => {\n      if (err === INVALID) {\n        return callback(null, false);\n      }\n      if (err) {\n        return callback(err);\n      }\n      return callback(null, true);\n    });\n  }\n\n  /**\n   *\n   * @param {number} startTime when processing the files has started\n   * @param {Iterable<string>} files all files\n   * @param {Iterable<string>} directories all directories\n   * @param {Iterable<string>} missing all missing files or directories\n   * @param {Object} options options object (for future extensions)\n   * @param {boolean=} options.hash should use hash to snapshot\n   * @param {boolean=} options.timestamp should use timestamp to snapshot\n   * @param {function((WebpackError | null)=, (Snapshot | null)=): void} callback callback function\n   * @returns {void}\n   */\n  createSnapshot(startTime, files, directories, missing, options, callback) {\n    /** @type {Map<string, FileSystemInfoEntry | null>} */\n    const fileTimestamps = new Map();\n    /** @type {Map<string, string | null>} */\n    const fileHashes = new Map();\n    /** @type {Map<string, TimestampAndHash | string | null>} */\n    const fileTshs = new Map();\n    /** @type {Map<string, FileSystemInfoEntry | null>} */\n    const contextTimestamps = new Map();\n    /** @type {Map<string, string | null>} */\n    const contextHashes = new Map();\n    /** @type {Map<string, ResolvedContextTimestampAndHash | null>} */\n    const contextTshs = new Map();\n    /** @type {Map<string, boolean>} */\n    const missingExistence = new Map();\n    /** @type {Map<string, string>} */\n    const managedItemInfo = new Map();\n    /** @type {Set<string>} */\n    const managedFiles = new Set();\n    /** @type {Set<string>} */\n    const managedContexts = new Set();\n    /** @type {Set<string>} */\n    const managedMissing = new Set();\n    /** @type {Set<Snapshot>} */\n    const children = new Set();\n    const snapshot = new Snapshot();\n    if (startTime) snapshot.setStartTime(startTime);\n\n    /** @type {Set<string>} */\n    const managedItems = new Set();\n\n    /** 1 = timestamp, 2 = hash, 3 = timestamp + hash */\n    const mode = options && options.hash ? options.timestamp ? 3 : 2 : 1;\n    let jobs = 1;\n    const jobDone = () => {\n      if (--jobs === 0) {\n        if (fileTimestamps.size !== 0) {\n          snapshot.setFileTimestamps(fileTimestamps);\n        }\n        if (fileHashes.size !== 0) {\n          snapshot.setFileHashes(fileHashes);\n        }\n        if (fileTshs.size !== 0) {\n          snapshot.setFileTshs(fileTshs);\n        }\n        if (contextTimestamps.size !== 0) {\n          snapshot.setContextTimestamps(contextTimestamps);\n        }\n        if (contextHashes.size !== 0) {\n          snapshot.setContextHashes(contextHashes);\n        }\n        if (contextTshs.size !== 0) {\n          snapshot.setContextTshs(contextTshs);\n        }\n        if (missingExistence.size !== 0) {\n          snapshot.setMissingExistence(missingExistence);\n        }\n        if (managedItemInfo.size !== 0) {\n          snapshot.setManagedItemInfo(managedItemInfo);\n        }\n        this._managedFilesOptimization.optimize(snapshot, managedFiles);\n        if (managedFiles.size !== 0) {\n          snapshot.setManagedFiles(managedFiles);\n        }\n        this._managedContextsOptimization.optimize(snapshot, managedContexts);\n        if (managedContexts.size !== 0) {\n          snapshot.setManagedContexts(managedContexts);\n        }\n        this._managedMissingOptimization.optimize(snapshot, managedMissing);\n        if (managedMissing.size !== 0) {\n          snapshot.setManagedMissing(managedMissing);\n        }\n        if (children.size !== 0) {\n          snapshot.setChildren(children);\n        }\n        this._snapshotCache.set(snapshot, true);\n        this._statCreatedSnapshots++;\n        callback(null, snapshot);\n      }\n    };\n    const jobError = () => {\n      if (jobs > 0) {\n        // large negative number instead of NaN or something else to keep jobs to stay a SMI (v8)\n        jobs = -100000000;\n        callback(null, null);\n      }\n    };\n    const checkManaged = (path, managedSet) => {\n      for (const immutablePath of this.immutablePathsRegExps) {\n        if (immutablePath.test(path)) {\n          managedSet.add(path);\n          return true;\n        }\n      }\n      for (const immutablePath of this.immutablePathsWithSlash) {\n        if (path.startsWith(immutablePath)) {\n          managedSet.add(path);\n          return true;\n        }\n      }\n      for (const managedPath of this.managedPathsRegExps) {\n        const match = managedPath.exec(path);\n        if (match) {\n          const managedItem = getManagedItem(match[1], path);\n          if (managedItem) {\n            managedItems.add(managedItem);\n            managedSet.add(path);\n            return true;\n          }\n        }\n      }\n      for (const managedPath of this.managedPathsWithSlash) {\n        if (path.startsWith(managedPath)) {\n          const managedItem = getManagedItem(managedPath, path);\n          if (managedItem) {\n            managedItems.add(managedItem);\n            managedSet.add(path);\n            return true;\n          }\n        }\n      }\n      return false;\n    };\n    const captureNonManaged = (items, managedSet) => {\n      const capturedItems = new Set();\n      for (const path of items) {\n        if (!checkManaged(path, managedSet)) capturedItems.add(path);\n      }\n      return capturedItems;\n    };\n    const processCapturedFiles = capturedFiles => {\n      switch (mode) {\n        case 3:\n          this._fileTshsOptimization.optimize(snapshot, capturedFiles);\n          for (const path of capturedFiles) {\n            const cache = this._fileTshs.get(path);\n            if (cache !== undefined) {\n              fileTshs.set(path, cache);\n            } else {\n              jobs++;\n              this._getFileTimestampAndHash(path, (err, entry) => {\n                if (err) {\n                  if (this.logger) {\n                    this.logger.debug(`Error snapshotting file timestamp hash combination of ${path}: ${err.stack}`);\n                  }\n                  jobError();\n                } else {\n                  fileTshs.set(path, entry);\n                  jobDone();\n                }\n              });\n            }\n          }\n          break;\n        case 2:\n          this._fileHashesOptimization.optimize(snapshot, capturedFiles);\n          for (const path of capturedFiles) {\n            const cache = this._fileHashes.get(path);\n            if (cache !== undefined) {\n              fileHashes.set(path, cache);\n            } else {\n              jobs++;\n              this.fileHashQueue.add(path, (err, entry) => {\n                if (err) {\n                  if (this.logger) {\n                    this.logger.debug(`Error snapshotting file hash of ${path}: ${err.stack}`);\n                  }\n                  jobError();\n                } else {\n                  fileHashes.set(path, entry);\n                  jobDone();\n                }\n              });\n            }\n          }\n          break;\n        case 1:\n          this._fileTimestampsOptimization.optimize(snapshot, capturedFiles);\n          for (const path of capturedFiles) {\n            const cache = this._fileTimestamps.get(path);\n            if (cache !== undefined) {\n              if (cache !== \"ignore\") {\n                fileTimestamps.set(path, cache);\n              }\n            } else {\n              jobs++;\n              this.fileTimestampQueue.add(path, (err, entry) => {\n                if (err) {\n                  if (this.logger) {\n                    this.logger.debug(`Error snapshotting file timestamp of ${path}: ${err.stack}`);\n                  }\n                  jobError();\n                } else {\n                  fileTimestamps.set(path, entry);\n                  jobDone();\n                }\n              });\n            }\n          }\n          break;\n      }\n    };\n    if (files) {\n      processCapturedFiles(captureNonManaged(files, managedFiles));\n    }\n    const processCapturedDirectories = capturedDirectories => {\n      switch (mode) {\n        case 3:\n          this._contextTshsOptimization.optimize(snapshot, capturedDirectories);\n          for (const path of capturedDirectories) {\n            const cache = this._contextTshs.get(path);\n            /** @type {ResolvedContextTimestampAndHash} */\n            let resolved;\n            if (cache !== undefined && (resolved = getResolvedTimestamp(cache)) !== undefined) {\n              contextTshs.set(path, resolved);\n            } else {\n              jobs++;\n              /**\n               * @param {Error=} err error\n               * @param {ResolvedContextTimestampAndHash=} entry entry\n               * @returns {void}\n               */\n              const callback = (err, entry) => {\n                if (err) {\n                  if (this.logger) {\n                    this.logger.debug(`Error snapshotting context timestamp hash combination of ${path}: ${err.stack}`);\n                  }\n                  jobError();\n                } else {\n                  contextTshs.set(path, entry);\n                  jobDone();\n                }\n              };\n              if (cache !== undefined) {\n                this._resolveContextTsh(cache, callback);\n              } else {\n                this.getContextTsh(path, callback);\n              }\n            }\n          }\n          break;\n        case 2:\n          this._contextHashesOptimization.optimize(snapshot, capturedDirectories);\n          for (const path of capturedDirectories) {\n            const cache = this._contextHashes.get(path);\n            let resolved;\n            if (cache !== undefined && (resolved = getResolvedHash(cache)) !== undefined) {\n              contextHashes.set(path, resolved);\n            } else {\n              jobs++;\n              const callback = (err, entry) => {\n                if (err) {\n                  if (this.logger) {\n                    this.logger.debug(`Error snapshotting context hash of ${path}: ${err.stack}`);\n                  }\n                  jobError();\n                } else {\n                  contextHashes.set(path, entry);\n                  jobDone();\n                }\n              };\n              if (cache !== undefined) {\n                this._resolveContextHash(cache, callback);\n              } else {\n                this.getContextHash(path, callback);\n              }\n            }\n          }\n          break;\n        case 1:\n          this._contextTimestampsOptimization.optimize(snapshot, capturedDirectories);\n          for (const path of capturedDirectories) {\n            const cache = this._contextTimestamps.get(path);\n            if (cache === \"ignore\") continue;\n            let resolved;\n            if (cache !== undefined && (resolved = getResolvedTimestamp(cache)) !== undefined) {\n              contextTimestamps.set(path, resolved);\n            } else {\n              jobs++;\n              /**\n               * @param {Error=} err error\n               * @param {ResolvedContextFileSystemInfoEntry=} entry entry\n               * @returns {void}\n               */\n              const callback = (err, entry) => {\n                if (err) {\n                  if (this.logger) {\n                    this.logger.debug(`Error snapshotting context timestamp of ${path}: ${err.stack}`);\n                  }\n                  jobError();\n                } else {\n                  contextTimestamps.set(path, entry);\n                  jobDone();\n                }\n              };\n              if (cache !== undefined) {\n                this._resolveContextTimestamp(cache, callback);\n              } else {\n                this.getContextTimestamp(path, callback);\n              }\n            }\n          }\n          break;\n      }\n    };\n    if (directories) {\n      processCapturedDirectories(captureNonManaged(directories, managedContexts));\n    }\n    const processCapturedMissing = capturedMissing => {\n      this._missingExistenceOptimization.optimize(snapshot, capturedMissing);\n      for (const path of capturedMissing) {\n        const cache = this._fileTimestamps.get(path);\n        if (cache !== undefined) {\n          if (cache !== \"ignore\") {\n            missingExistence.set(path, Boolean(cache));\n          }\n        } else {\n          jobs++;\n          this.fileTimestampQueue.add(path, (err, entry) => {\n            if (err) {\n              if (this.logger) {\n                this.logger.debug(`Error snapshotting missing timestamp of ${path}: ${err.stack}`);\n              }\n              jobError();\n            } else {\n              missingExistence.set(path, Boolean(entry));\n              jobDone();\n            }\n          });\n        }\n      }\n    };\n    if (missing) {\n      processCapturedMissing(captureNonManaged(missing, managedMissing));\n    }\n    this._managedItemInfoOptimization.optimize(snapshot, managedItems);\n    for (const path of managedItems) {\n      const cache = this._managedItems.get(path);\n      if (cache !== undefined) {\n        if (!cache.startsWith(\"*\")) {\n          managedFiles.add(join(this.fs, path, \"package.json\"));\n        } else if (cache === \"*nested\") {\n          managedMissing.add(join(this.fs, path, \"package.json\"));\n        }\n        managedItemInfo.set(path, cache);\n      } else {\n        jobs++;\n        this.managedItemQueue.add(path, (err, entry) => {\n          if (err) {\n            if (this.logger) {\n              this.logger.debug(`Error snapshotting managed item ${path}: ${err.stack}`);\n            }\n            jobError();\n          } else if (entry) {\n            if (!entry.startsWith(\"*\")) {\n              managedFiles.add(join(this.fs, path, \"package.json\"));\n            } else if (cache === \"*nested\") {\n              managedMissing.add(join(this.fs, path, \"package.json\"));\n            }\n            managedItemInfo.set(path, entry);\n            jobDone();\n          } else {\n            // Fallback to normal snapshotting\n            const process = (set, fn) => {\n              if (set.size === 0) return;\n              const captured = new Set();\n              for (const file of set) {\n                if (file.startsWith(path)) captured.add(file);\n              }\n              if (captured.size > 0) fn(captured);\n            };\n            process(managedFiles, processCapturedFiles);\n            process(managedContexts, processCapturedDirectories);\n            process(managedMissing, processCapturedMissing);\n            jobDone();\n          }\n        });\n      }\n    }\n    jobDone();\n  }\n\n  /**\n   * @param {Snapshot} snapshot1 a snapshot\n   * @param {Snapshot} snapshot2 a snapshot\n   * @returns {Snapshot} merged snapshot\n   */\n  mergeSnapshots(snapshot1, snapshot2) {\n    const snapshot = new Snapshot();\n    if (snapshot1.hasStartTime() && snapshot2.hasStartTime()) snapshot.setStartTime(Math.min(snapshot1.startTime, snapshot2.startTime));else if (snapshot2.hasStartTime()) snapshot.startTime = snapshot2.startTime;else if (snapshot1.hasStartTime()) snapshot.startTime = snapshot1.startTime;\n    if (snapshot1.hasFileTimestamps() || snapshot2.hasFileTimestamps()) {\n      snapshot.setFileTimestamps(mergeMaps(snapshot1.fileTimestamps, snapshot2.fileTimestamps));\n    }\n    if (snapshot1.hasFileHashes() || snapshot2.hasFileHashes()) {\n      snapshot.setFileHashes(mergeMaps(snapshot1.fileHashes, snapshot2.fileHashes));\n    }\n    if (snapshot1.hasFileTshs() || snapshot2.hasFileTshs()) {\n      snapshot.setFileTshs(mergeMaps(snapshot1.fileTshs, snapshot2.fileTshs));\n    }\n    if (snapshot1.hasContextTimestamps() || snapshot2.hasContextTimestamps()) {\n      snapshot.setContextTimestamps(mergeMaps(snapshot1.contextTimestamps, snapshot2.contextTimestamps));\n    }\n    if (snapshot1.hasContextHashes() || snapshot2.hasContextHashes()) {\n      snapshot.setContextHashes(mergeMaps(snapshot1.contextHashes, snapshot2.contextHashes));\n    }\n    if (snapshot1.hasContextTshs() || snapshot2.hasContextTshs()) {\n      snapshot.setContextTshs(mergeMaps(snapshot1.contextTshs, snapshot2.contextTshs));\n    }\n    if (snapshot1.hasMissingExistence() || snapshot2.hasMissingExistence()) {\n      snapshot.setMissingExistence(mergeMaps(snapshot1.missingExistence, snapshot2.missingExistence));\n    }\n    if (snapshot1.hasManagedItemInfo() || snapshot2.hasManagedItemInfo()) {\n      snapshot.setManagedItemInfo(mergeMaps(snapshot1.managedItemInfo, snapshot2.managedItemInfo));\n    }\n    if (snapshot1.hasManagedFiles() || snapshot2.hasManagedFiles()) {\n      snapshot.setManagedFiles(mergeSets(snapshot1.managedFiles, snapshot2.managedFiles));\n    }\n    if (snapshot1.hasManagedContexts() || snapshot2.hasManagedContexts()) {\n      snapshot.setManagedContexts(mergeSets(snapshot1.managedContexts, snapshot2.managedContexts));\n    }\n    if (snapshot1.hasManagedMissing() || snapshot2.hasManagedMissing()) {\n      snapshot.setManagedMissing(mergeSets(snapshot1.managedMissing, snapshot2.managedMissing));\n    }\n    if (snapshot1.hasChildren() || snapshot2.hasChildren()) {\n      snapshot.setChildren(mergeSets(snapshot1.children, snapshot2.children));\n    }\n    if (this._snapshotCache.get(snapshot1) === true && this._snapshotCache.get(snapshot2) === true) {\n      this._snapshotCache.set(snapshot, true);\n    }\n    return snapshot;\n  }\n\n  /**\n   * @param {Snapshot} snapshot the snapshot made\n   * @param {function((WebpackError | null)=, boolean=): void} callback callback function\n   * @returns {void}\n   */\n  checkSnapshotValid(snapshot, callback) {\n    const cachedResult = this._snapshotCache.get(snapshot);\n    if (cachedResult !== undefined) {\n      this._statTestedSnapshotsCached++;\n      if (typeof cachedResult === \"boolean\") {\n        callback(null, cachedResult);\n      } else {\n        cachedResult.push(callback);\n      }\n      return;\n    }\n    this._statTestedSnapshotsNotCached++;\n    this._checkSnapshotValidNoCache(snapshot, callback);\n  }\n\n  /**\n   * @param {Snapshot} snapshot the snapshot made\n   * @param {function((WebpackError | null)=, boolean=): void} callback callback function\n   * @returns {void}\n   */\n  _checkSnapshotValidNoCache(snapshot, callback) {\n    var _this = this;\n    /** @type {number | undefined} */\n    let startTime = undefined;\n    if (snapshot.hasStartTime()) {\n      startTime = snapshot.startTime;\n    }\n    let jobs = 1;\n    const jobDone = () => {\n      if (--jobs === 0) {\n        this._snapshotCache.set(snapshot, true);\n        callback(null, true);\n      }\n    };\n    const invalid = () => {\n      if (jobs > 0) {\n        // large negative number instead of NaN or something else to keep jobs to stay a SMI (v8)\n        jobs = -100000000;\n        this._snapshotCache.set(snapshot, false);\n        callback(null, false);\n      }\n    };\n    const invalidWithError = (path, err) => {\n      if (this._remainingLogs > 0) {\n        this._log(path, `error occurred: %s`, err);\n      }\n      invalid();\n    };\n    /**\n     * @param {string} path file path\n     * @param {string} current current hash\n     * @param {string} snap snapshot hash\n     * @returns {boolean} true, if ok\n     */\n    const checkHash = (path, current, snap) => {\n      if (current !== snap) {\n        // If hash differ it's invalid\n        if (this._remainingLogs > 0) {\n          this._log(path, `hashes differ (%s != %s)`, current, snap);\n        }\n        return false;\n      }\n      return true;\n    };\n    /**\n     * @param {string} path file path\n     * @param {boolean} current current entry\n     * @param {boolean} snap entry from snapshot\n     * @returns {boolean} true, if ok\n     */\n    const checkExistence = (path, current, snap) => {\n      if (!current !== !snap) {\n        // If existence of item differs\n        // it's invalid\n        if (this._remainingLogs > 0) {\n          this._log(path, current ? \"it didn't exist before\" : \"it does no longer exist\");\n        }\n        return false;\n      }\n      return true;\n    };\n    /**\n     * @param {string} path file path\n     * @param {FileSystemInfoEntry} current current entry\n     * @param {FileSystemInfoEntry} snap entry from snapshot\n     * @param {boolean} log log reason\n     * @returns {boolean} true, if ok\n     */\n    const checkFile = function (path, current, snap) {\n      let log = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      if (current === snap) return true;\n      if (!checkExistence(path, Boolean(current), Boolean(snap))) return false;\n      if (current) {\n        // For existing items only\n        if (typeof startTime === \"number\" && current.safeTime > startTime) {\n          // If a change happened after starting reading the item\n          // this may no longer be valid\n          if (log && _this._remainingLogs > 0) {\n            _this._log(path, `it may have changed (%d) after the start time of the snapshot (%d)`, current.safeTime, startTime);\n          }\n          return false;\n        }\n        if (snap.timestamp !== undefined && current.timestamp !== snap.timestamp) {\n          // If we have a timestamp (it was a file or symlink) and it differs from current timestamp\n          // it's invalid\n          if (log && _this._remainingLogs > 0) {\n            _this._log(path, `timestamps differ (%d != %d)`, current.timestamp, snap.timestamp);\n          }\n          return false;\n        }\n      }\n      return true;\n    };\n    /**\n     * @param {string} path file path\n     * @param {ResolvedContextFileSystemInfoEntry} current current entry\n     * @param {ResolvedContextFileSystemInfoEntry} snap entry from snapshot\n     * @param {boolean} log log reason\n     * @returns {boolean} true, if ok\n     */\n    const checkContext = function (path, current, snap) {\n      let log = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      if (current === snap) return true;\n      if (!checkExistence(path, Boolean(current), Boolean(snap))) return false;\n      if (current) {\n        // For existing items only\n        if (typeof startTime === \"number\" && current.safeTime > startTime) {\n          // If a change happened after starting reading the item\n          // this may no longer be valid\n          if (log && _this._remainingLogs > 0) {\n            _this._log(path, `it may have changed (%d) after the start time of the snapshot (%d)`, current.safeTime, startTime);\n          }\n          return false;\n        }\n        if (snap.timestampHash !== undefined && current.timestampHash !== snap.timestampHash) {\n          // If we have a timestampHash (it was a directory) and it differs from current timestampHash\n          // it's invalid\n          if (log && _this._remainingLogs > 0) {\n            _this._log(path, `timestamps hashes differ (%s != %s)`, current.timestampHash, snap.timestampHash);\n          }\n          return false;\n        }\n      }\n      return true;\n    };\n    if (snapshot.hasChildren()) {\n      const childCallback = (err, result) => {\n        if (err || !result) return invalid();else jobDone();\n      };\n      for (const child of snapshot.children) {\n        const cache = this._snapshotCache.get(child);\n        if (cache !== undefined) {\n          this._statTestedChildrenCached++;\n          /* istanbul ignore else */\n          if (typeof cache === \"boolean\") {\n            if (cache === false) {\n              invalid();\n              return;\n            }\n          } else {\n            jobs++;\n            cache.push(childCallback);\n          }\n        } else {\n          this._statTestedChildrenNotCached++;\n          jobs++;\n          this._checkSnapshotValidNoCache(child, childCallback);\n        }\n      }\n    }\n    if (snapshot.hasFileTimestamps()) {\n      const {\n        fileTimestamps\n      } = snapshot;\n      this._statTestedEntries += fileTimestamps.size;\n      for (const [path, ts] of fileTimestamps) {\n        const cache = this._fileTimestamps.get(path);\n        if (cache !== undefined) {\n          if (cache !== \"ignore\" && !checkFile(path, cache, ts)) {\n            invalid();\n            return;\n          }\n        } else {\n          jobs++;\n          this.fileTimestampQueue.add(path, (err, entry) => {\n            if (err) return invalidWithError(path, err);\n            if (!checkFile(path, entry, ts)) {\n              invalid();\n            } else {\n              jobDone();\n            }\n          });\n        }\n      }\n    }\n    const processFileHashSnapshot = (path, hash) => {\n      const cache = this._fileHashes.get(path);\n      if (cache !== undefined) {\n        if (cache !== \"ignore\" && !checkHash(path, cache, hash)) {\n          invalid();\n          return;\n        }\n      } else {\n        jobs++;\n        this.fileHashQueue.add(path, (err, entry) => {\n          if (err) return invalidWithError(path, err);\n          if (!checkHash(path, entry, hash)) {\n            invalid();\n          } else {\n            jobDone();\n          }\n        });\n      }\n    };\n    if (snapshot.hasFileHashes()) {\n      const {\n        fileHashes\n      } = snapshot;\n      this._statTestedEntries += fileHashes.size;\n      for (const [path, hash] of fileHashes) {\n        processFileHashSnapshot(path, hash);\n      }\n    }\n    if (snapshot.hasFileTshs()) {\n      const {\n        fileTshs\n      } = snapshot;\n      this._statTestedEntries += fileTshs.size;\n      for (const [path, tsh] of fileTshs) {\n        if (typeof tsh === \"string\") {\n          processFileHashSnapshot(path, tsh);\n        } else {\n          const cache = this._fileTimestamps.get(path);\n          if (cache !== undefined) {\n            if (cache === \"ignore\" || !checkFile(path, cache, tsh, false)) {\n              processFileHashSnapshot(path, tsh && tsh.hash);\n            }\n          } else {\n            jobs++;\n            this.fileTimestampQueue.add(path, (err, entry) => {\n              if (err) return invalidWithError(path, err);\n              if (!checkFile(path, entry, tsh, false)) {\n                processFileHashSnapshot(path, tsh && tsh.hash);\n              }\n              jobDone();\n            });\n          }\n        }\n      }\n    }\n    if (snapshot.hasContextTimestamps()) {\n      const {\n        contextTimestamps\n      } = snapshot;\n      this._statTestedEntries += contextTimestamps.size;\n      for (const [path, ts] of contextTimestamps) {\n        const cache = this._contextTimestamps.get(path);\n        if (cache === \"ignore\") continue;\n        let resolved;\n        if (cache !== undefined && (resolved = getResolvedTimestamp(cache)) !== undefined) {\n          if (!checkContext(path, resolved, ts)) {\n            invalid();\n            return;\n          }\n        } else {\n          jobs++;\n          /**\n           * @param {Error=} err error\n           * @param {ResolvedContextFileSystemInfoEntry=} entry entry\n           * @returns {void}\n           */\n          const callback = (err, entry) => {\n            if (err) return invalidWithError(path, err);\n            if (!checkContext(path, entry, ts)) {\n              invalid();\n            } else {\n              jobDone();\n            }\n          };\n          if (cache !== undefined) {\n            this._resolveContextTimestamp(cache, callback);\n          } else {\n            this.getContextTimestamp(path, callback);\n          }\n        }\n      }\n    }\n    const processContextHashSnapshot = (path, hash) => {\n      const cache = this._contextHashes.get(path);\n      let resolved;\n      if (cache !== undefined && (resolved = getResolvedHash(cache)) !== undefined) {\n        if (!checkHash(path, resolved, hash)) {\n          invalid();\n          return;\n        }\n      } else {\n        jobs++;\n        const callback = (err, entry) => {\n          if (err) return invalidWithError(path, err);\n          if (!checkHash(path, entry, hash)) {\n            invalid();\n          } else {\n            jobDone();\n          }\n        };\n        if (cache !== undefined) {\n          this._resolveContextHash(cache, callback);\n        } else {\n          this.getContextHash(path, callback);\n        }\n      }\n    };\n    if (snapshot.hasContextHashes()) {\n      const {\n        contextHashes\n      } = snapshot;\n      this._statTestedEntries += contextHashes.size;\n      for (const [path, hash] of contextHashes) {\n        processContextHashSnapshot(path, hash);\n      }\n    }\n    if (snapshot.hasContextTshs()) {\n      const {\n        contextTshs\n      } = snapshot;\n      this._statTestedEntries += contextTshs.size;\n      for (const [path, tsh] of contextTshs) {\n        if (typeof tsh === \"string\") {\n          processContextHashSnapshot(path, tsh);\n        } else {\n          const cache = this._contextTimestamps.get(path);\n          if (cache === \"ignore\") continue;\n          let resolved;\n          if (cache !== undefined && (resolved = getResolvedTimestamp(cache)) !== undefined) {\n            if (!checkContext(path, resolved, tsh, false)) {\n              processContextHashSnapshot(path, tsh && tsh.hash);\n            }\n          } else {\n            jobs++;\n            /**\n             * @param {Error=} err error\n             * @param {ResolvedContextFileSystemInfoEntry=} entry entry\n             * @returns {void}\n             */\n            const callback = (err, entry) => {\n              if (err) return invalidWithError(path, err);\n              if (!checkContext(path, entry, tsh, false)) {\n                processContextHashSnapshot(path, tsh && tsh.hash);\n              }\n              jobDone();\n            };\n            if (cache !== undefined) {\n              this._resolveContextTimestamp(cache, callback);\n            } else {\n              this.getContextTimestamp(path, callback);\n            }\n          }\n        }\n      }\n    }\n    if (snapshot.hasMissingExistence()) {\n      const {\n        missingExistence\n      } = snapshot;\n      this._statTestedEntries += missingExistence.size;\n      for (const [path, existence] of missingExistence) {\n        const cache = this._fileTimestamps.get(path);\n        if (cache !== undefined) {\n          if (cache !== \"ignore\" && !checkExistence(path, Boolean(cache), Boolean(existence))) {\n            invalid();\n            return;\n          }\n        } else {\n          jobs++;\n          this.fileTimestampQueue.add(path, (err, entry) => {\n            if (err) return invalidWithError(path, err);\n            if (!checkExistence(path, Boolean(entry), Boolean(existence))) {\n              invalid();\n            } else {\n              jobDone();\n            }\n          });\n        }\n      }\n    }\n    if (snapshot.hasManagedItemInfo()) {\n      const {\n        managedItemInfo\n      } = snapshot;\n      this._statTestedEntries += managedItemInfo.size;\n      for (const [path, info] of managedItemInfo) {\n        const cache = this._managedItems.get(path);\n        if (cache !== undefined) {\n          if (!checkHash(path, cache, info)) {\n            invalid();\n            return;\n          }\n        } else {\n          jobs++;\n          this.managedItemQueue.add(path, (err, entry) => {\n            if (err) return invalidWithError(path, err);\n            if (!checkHash(path, entry, info)) {\n              invalid();\n            } else {\n              jobDone();\n            }\n          });\n        }\n      }\n    }\n    jobDone();\n\n    // if there was an async action\n    // try to join multiple concurrent request for this snapshot\n    if (jobs > 0) {\n      const callbacks = [callback];\n      callback = (err, result) => {\n        for (const callback of callbacks) callback(err, result);\n      };\n      this._snapshotCache.set(snapshot, callbacks);\n    }\n  }\n  _readFileTimestamp(path, callback) {\n    this.fs.stat(path, (err, stat) => {\n      if (err) {\n        if (err.code === \"ENOENT\") {\n          this._fileTimestamps.set(path, null);\n          this._cachedDeprecatedFileTimestamps = undefined;\n          return callback(null, null);\n        }\n        return callback(err);\n      }\n      let ts;\n      if (stat.isDirectory()) {\n        ts = {\n          safeTime: 0,\n          timestamp: undefined\n        };\n      } else {\n        const mtime = +stat.mtime;\n        if (mtime) applyMtime(mtime);\n        ts = {\n          safeTime: mtime ? mtime + FS_ACCURACY : Infinity,\n          timestamp: mtime\n        };\n      }\n      this._fileTimestamps.set(path, ts);\n      this._cachedDeprecatedFileTimestamps = undefined;\n      callback(null, ts);\n    });\n  }\n  _readFileHash(path, callback) {\n    this.fs.readFile(path, (err, content) => {\n      if (err) {\n        if (err.code === \"EISDIR\") {\n          this._fileHashes.set(path, \"directory\");\n          return callback(null, \"directory\");\n        }\n        if (err.code === \"ENOENT\") {\n          this._fileHashes.set(path, null);\n          return callback(null, null);\n        }\n        if (err.code === \"ERR_FS_FILE_TOO_LARGE\") {\n          this.logger.warn(`Ignoring ${path} for hashing as it's very large`);\n          this._fileHashes.set(path, \"too large\");\n          return callback(null, \"too large\");\n        }\n        return callback(err);\n      }\n      const hash = createHash(this._hashFunction);\n      hash.update(content);\n      const digest = /** @type {string} */hash.digest(\"hex\");\n      this._fileHashes.set(path, digest);\n      callback(null, digest);\n    });\n  }\n  _getFileTimestampAndHash(path, callback) {\n    const continueWithHash = hash => {\n      const cache = this._fileTimestamps.get(path);\n      if (cache !== undefined) {\n        if (cache !== \"ignore\") {\n          const result = {\n            ...cache,\n            hash\n          };\n          this._fileTshs.set(path, result);\n          return callback(null, result);\n        } else {\n          this._fileTshs.set(path, hash);\n          return callback(null, hash);\n        }\n      } else {\n        this.fileTimestampQueue.add(path, (err, entry) => {\n          if (err) {\n            return callback(err);\n          }\n          const result = {\n            ...entry,\n            hash\n          };\n          this._fileTshs.set(path, result);\n          return callback(null, result);\n        });\n      }\n    };\n    const cache = this._fileHashes.get(path);\n    if (cache !== undefined) {\n      continueWithHash(cache);\n    } else {\n      this.fileHashQueue.add(path, (err, entry) => {\n        if (err) {\n          return callback(err);\n        }\n        continueWithHash(entry);\n      });\n    }\n  }\n\n  /**\n   * @template T\n   * @template ItemType\n   * @param {Object} options options\n   * @param {string} options.path path\n   * @param {function(string): ItemType} options.fromImmutablePath called when context item is an immutable path\n   * @param {function(string): ItemType} options.fromManagedItem called when context item is a managed path\n   * @param {function(string, string, function(Error=, ItemType=): void): void} options.fromSymlink called when context item is a symlink\n   * @param {function(string, IStats, function(Error=, ItemType=): void): void} options.fromFile called when context item is a file\n   * @param {function(string, IStats, function(Error=, ItemType=): void): void} options.fromDirectory called when context item is a directory\n   * @param {function(string[], ItemType[]): T} options.reduce called from all context items\n   * @param {function((Error | null)=, (T)=): void} callback callback\n   */\n  _readContext(_ref4, callback) {\n    let {\n      path,\n      fromImmutablePath,\n      fromManagedItem,\n      fromSymlink,\n      fromFile,\n      fromDirectory,\n      reduce\n    } = _ref4;\n    this.fs.readdir(path, (err, _files) => {\n      if (err) {\n        if (err.code === \"ENOENT\") {\n          return callback(null, null);\n        }\n        return callback(err);\n      }\n      const files = /** @type {string[]} */_files.map(file => file.normalize(\"NFC\")).filter(file => !/^\\./.test(file)).sort();\n      asyncLib.map(files, (file, callback) => {\n        const child = join(this.fs, path, file);\n        for (const immutablePath of this.immutablePathsRegExps) {\n          if (immutablePath.test(path)) {\n            // ignore any immutable path for timestamping\n            return callback(null, fromImmutablePath(path));\n          }\n        }\n        for (const immutablePath of this.immutablePathsWithSlash) {\n          if (path.startsWith(immutablePath)) {\n            // ignore any immutable path for timestamping\n            return callback(null, fromImmutablePath(path));\n          }\n        }\n        for (const managedPath of this.managedPathsRegExps) {\n          const match = managedPath.exec(path);\n          if (match) {\n            const managedItem = getManagedItem(match[1], path);\n            if (managedItem) {\n              // construct timestampHash from managed info\n              return this.managedItemQueue.add(managedItem, (err, info) => {\n                if (err) return callback(err);\n                return callback(null, fromManagedItem(info));\n              });\n            }\n          }\n        }\n        for (const managedPath of this.managedPathsWithSlash) {\n          if (path.startsWith(managedPath)) {\n            const managedItem = getManagedItem(managedPath, child);\n            if (managedItem) {\n              // construct timestampHash from managed info\n              return this.managedItemQueue.add(managedItem, (err, info) => {\n                if (err) return callback(err);\n                return callback(null, fromManagedItem(info));\n              });\n            }\n          }\n        }\n        lstatReadlinkAbsolute(this.fs, child, (err, stat) => {\n          if (err) return callback(err);\n          if (typeof stat === \"string\") {\n            return fromSymlink(child, stat, callback);\n          }\n          if (stat.isFile()) {\n            return fromFile(child, stat, callback);\n          }\n          if (stat.isDirectory()) {\n            return fromDirectory(child, stat, callback);\n          }\n          callback(null, null);\n        });\n      }, (err, results) => {\n        if (err) return callback(err);\n        const result = reduce(files, results);\n        callback(null, result);\n      });\n    });\n  }\n  _readContextTimestamp(path, callback) {\n    this._readContext({\n      path,\n      fromImmutablePath: () => null,\n      fromManagedItem: info => ({\n        safeTime: 0,\n        timestampHash: info\n      }),\n      fromSymlink: (file, target, callback) => {\n        callback(null, {\n          timestampHash: target,\n          symlinks: new Set([target])\n        });\n      },\n      fromFile: (file, stat, callback) => {\n        // Prefer the cached value over our new stat to report consistent results\n        const cache = this._fileTimestamps.get(file);\n        if (cache !== undefined) return callback(null, cache === \"ignore\" ? null : cache);\n        const mtime = +stat.mtime;\n        if (mtime) applyMtime(mtime);\n        const ts = {\n          safeTime: mtime ? mtime + FS_ACCURACY : Infinity,\n          timestamp: mtime\n        };\n        this._fileTimestamps.set(file, ts);\n        this._cachedDeprecatedFileTimestamps = undefined;\n        callback(null, ts);\n      },\n      fromDirectory: (directory, stat, callback) => {\n        this.contextTimestampQueue.increaseParallelism();\n        this._getUnresolvedContextTimestamp(directory, (err, tsEntry) => {\n          this.contextTimestampQueue.decreaseParallelism();\n          callback(err, tsEntry);\n        });\n      },\n      reduce: (files, tsEntries) => {\n        let symlinks = undefined;\n        const hash = createHash(this._hashFunction);\n        for (const file of files) hash.update(file);\n        let safeTime = 0;\n        for (const entry of tsEntries) {\n          if (!entry) {\n            hash.update(\"n\");\n            continue;\n          }\n          if (entry.timestamp) {\n            hash.update(\"f\");\n            hash.update(`${entry.timestamp}`);\n          } else if (entry.timestampHash) {\n            hash.update(\"d\");\n            hash.update(`${entry.timestampHash}`);\n          }\n          if (entry.symlinks !== undefined) {\n            if (symlinks === undefined) symlinks = new Set();\n            addAll(entry.symlinks, symlinks);\n          }\n          if (entry.safeTime) {\n            safeTime = Math.max(safeTime, entry.safeTime);\n          }\n        }\n        const digest = /** @type {string} */hash.digest(\"hex\");\n        const result = {\n          safeTime,\n          timestampHash: digest\n        };\n        if (symlinks) result.symlinks = symlinks;\n        return result;\n      }\n    }, (err, result) => {\n      if (err) return callback(err);\n      this._contextTimestamps.set(path, result);\n      this._cachedDeprecatedContextTimestamps = undefined;\n      callback(null, result);\n    });\n  }\n\n  /**\n   * @param {ContextFileSystemInfoEntry} entry entry\n   * @param {function((Error | null)=, ResolvedContextFileSystemInfoEntry=): void} callback callback\n   * @returns {void}\n   */\n  _resolveContextTimestamp(entry, callback) {\n    const hashes = [];\n    let safeTime = 0;\n    processAsyncTree(entry.symlinks, 10, (target, push, callback) => {\n      this._getUnresolvedContextTimestamp(target, (err, entry) => {\n        if (err) return callback(err);\n        if (entry && entry !== \"ignore\") {\n          hashes.push(entry.timestampHash);\n          if (entry.safeTime) {\n            safeTime = Math.max(safeTime, entry.safeTime);\n          }\n          if (entry.symlinks !== undefined) {\n            for (const target of entry.symlinks) push(target);\n          }\n        }\n        callback();\n      });\n    }, err => {\n      if (err) return callback(err);\n      const hash = createHash(this._hashFunction);\n      hash.update(entry.timestampHash);\n      if (entry.safeTime) {\n        safeTime = Math.max(safeTime, entry.safeTime);\n      }\n      hashes.sort();\n      for (const h of hashes) {\n        hash.update(h);\n      }\n      callback(null, entry.resolved = {\n        safeTime,\n        timestampHash: /** @type {string} */hash.digest(\"hex\")\n      });\n    });\n  }\n  _readContextHash(path, callback) {\n    this._readContext({\n      path,\n      fromImmutablePath: () => \"\",\n      fromManagedItem: info => info || \"\",\n      fromSymlink: (file, target, callback) => {\n        callback(null, {\n          hash: target,\n          symlinks: new Set([target])\n        });\n      },\n      fromFile: (file, stat, callback) => this.getFileHash(file, (err, hash) => {\n        callback(err, hash || \"\");\n      }),\n      fromDirectory: (directory, stat, callback) => {\n        this.contextHashQueue.increaseParallelism();\n        this._getUnresolvedContextHash(directory, (err, hash) => {\n          this.contextHashQueue.decreaseParallelism();\n          callback(err, hash || \"\");\n        });\n      },\n      /**\n       * @param {string[]} files files\n       * @param {(string | ContextHash)[]} fileHashes hashes\n       * @returns {ContextHash} reduced hash\n       */\n      reduce: (files, fileHashes) => {\n        let symlinks = undefined;\n        const hash = createHash(this._hashFunction);\n        for (const file of files) hash.update(file);\n        for (const entry of fileHashes) {\n          if (typeof entry === \"string\") {\n            hash.update(entry);\n          } else {\n            hash.update(entry.hash);\n            if (entry.symlinks) {\n              if (symlinks === undefined) symlinks = new Set();\n              addAll(entry.symlinks, symlinks);\n            }\n          }\n        }\n        const result = {\n          hash: /** @type {string} */hash.digest(\"hex\")\n        };\n        if (symlinks) result.symlinks = symlinks;\n        return result;\n      }\n    }, (err, result) => {\n      if (err) return callback(err);\n      this._contextHashes.set(path, result);\n      return callback(null, result);\n    });\n  }\n\n  /**\n   * @param {ContextHash} entry context hash\n   * @param {function((Error | null)=, string=): void} callback callback\n   * @returns {void}\n   */\n  _resolveContextHash(entry, callback) {\n    const hashes = [];\n    processAsyncTree(entry.symlinks, 10, (target, push, callback) => {\n      this._getUnresolvedContextHash(target, (err, hash) => {\n        if (err) return callback(err);\n        if (hash) {\n          hashes.push(hash.hash);\n          if (hash.symlinks !== undefined) {\n            for (const target of hash.symlinks) push(target);\n          }\n        }\n        callback();\n      });\n    }, err => {\n      if (err) return callback(err);\n      const hash = createHash(this._hashFunction);\n      hash.update(entry.hash);\n      hashes.sort();\n      for (const h of hashes) {\n        hash.update(h);\n      }\n      callback(null, entry.resolved = /** @type {string} */hash.digest(\"hex\"));\n    });\n  }\n  _readContextTimestampAndHash(path, callback) {\n    const finalize = (timestamp, hash) => {\n      const result = timestamp === \"ignore\" ? hash : {\n        ...timestamp,\n        ...hash\n      };\n      this._contextTshs.set(path, result);\n      callback(null, result);\n    };\n    const cachedHash = this._contextHashes.get(path);\n    const cachedTimestamp = this._contextTimestamps.get(path);\n    if (cachedHash !== undefined) {\n      if (cachedTimestamp !== undefined) {\n        finalize(cachedTimestamp, cachedHash);\n      } else {\n        this.contextTimestampQueue.add(path, (err, entry) => {\n          if (err) return callback(err);\n          finalize(entry, cachedHash);\n        });\n      }\n    } else {\n      if (cachedTimestamp !== undefined) {\n        this.contextHashQueue.add(path, (err, entry) => {\n          if (err) return callback(err);\n          finalize(cachedTimestamp, entry);\n        });\n      } else {\n        this._readContext({\n          path,\n          fromImmutablePath: () => null,\n          fromManagedItem: info => ({\n            safeTime: 0,\n            timestampHash: info,\n            hash: info || \"\"\n          }),\n          fromSymlink: (fle, target, callback) => {\n            callback(null, {\n              timestampHash: target,\n              hash: target,\n              symlinks: new Set([target])\n            });\n          },\n          fromFile: (file, stat, callback) => {\n            this._getFileTimestampAndHash(file, callback);\n          },\n          fromDirectory: (directory, stat, callback) => {\n            this.contextTshQueue.increaseParallelism();\n            this.contextTshQueue.add(directory, (err, result) => {\n              this.contextTshQueue.decreaseParallelism();\n              callback(err, result);\n            });\n          },\n          /**\n           * @param {string[]} files files\n           * @param {(Partial<TimestampAndHash> & Partial<ContextTimestampAndHash> | string | null)[]} results results\n           * @returns {ContextTimestampAndHash} tsh\n           */\n          reduce: (files, results) => {\n            let symlinks = undefined;\n            const tsHash = createHash(this._hashFunction);\n            const hash = createHash(this._hashFunction);\n            for (const file of files) {\n              tsHash.update(file);\n              hash.update(file);\n            }\n            let safeTime = 0;\n            for (const entry of results) {\n              if (!entry) {\n                tsHash.update(\"n\");\n                continue;\n              }\n              if (typeof entry === \"string\") {\n                tsHash.update(\"n\");\n                hash.update(entry);\n                continue;\n              }\n              if (entry.timestamp) {\n                tsHash.update(\"f\");\n                tsHash.update(`${entry.timestamp}`);\n              } else if (entry.timestampHash) {\n                tsHash.update(\"d\");\n                tsHash.update(`${entry.timestampHash}`);\n              }\n              if (entry.symlinks !== undefined) {\n                if (symlinks === undefined) symlinks = new Set();\n                addAll(entry.symlinks, symlinks);\n              }\n              if (entry.safeTime) {\n                safeTime = Math.max(safeTime, entry.safeTime);\n              }\n              hash.update(entry.hash);\n            }\n            const result = {\n              safeTime,\n              timestampHash: /** @type {string} */tsHash.digest(\"hex\"),\n              hash: /** @type {string} */hash.digest(\"hex\")\n            };\n            if (symlinks) result.symlinks = symlinks;\n            return result;\n          }\n        }, (err, result) => {\n          if (err) return callback(err);\n          this._contextTshs.set(path, result);\n          return callback(null, result);\n        });\n      }\n    }\n  }\n\n  /**\n   * @param {ContextTimestampAndHash} entry entry\n   * @param {function((Error | null)=, ResolvedContextTimestampAndHash=): void} callback callback\n   * @returns {void}\n   */\n  _resolveContextTsh(entry, callback) {\n    const hashes = [];\n    const tsHashes = [];\n    let safeTime = 0;\n    processAsyncTree(entry.symlinks, 10, (target, push, callback) => {\n      this._getUnresolvedContextTsh(target, (err, entry) => {\n        if (err) return callback(err);\n        if (entry) {\n          hashes.push(entry.hash);\n          if (entry.timestampHash) tsHashes.push(entry.timestampHash);\n          if (entry.safeTime) {\n            safeTime = Math.max(safeTime, entry.safeTime);\n          }\n          if (entry.symlinks !== undefined) {\n            for (const target of entry.symlinks) push(target);\n          }\n        }\n        callback();\n      });\n    }, err => {\n      if (err) return callback(err);\n      const hash = createHash(this._hashFunction);\n      const tsHash = createHash(this._hashFunction);\n      hash.update(entry.hash);\n      if (entry.timestampHash) tsHash.update(entry.timestampHash);\n      if (entry.safeTime) {\n        safeTime = Math.max(safeTime, entry.safeTime);\n      }\n      hashes.sort();\n      for (const h of hashes) {\n        hash.update(h);\n      }\n      tsHashes.sort();\n      for (const h of tsHashes) {\n        tsHash.update(h);\n      }\n      callback(null, entry.resolved = {\n        safeTime,\n        timestampHash: /** @type {string} */tsHash.digest(\"hex\"),\n        hash: /** @type {string} */hash.digest(\"hex\")\n      });\n    });\n  }\n  _getManagedItemDirectoryInfo(path, callback) {\n    this.fs.readdir(path, (err, elements) => {\n      if (err) {\n        if (err.code === \"ENOENT\" || err.code === \"ENOTDIR\") {\n          return callback(null, EMPTY_SET);\n        }\n        return callback(err);\n      }\n      const set = new Set( /** @type {string[]} */elements.map(element => join(this.fs, path, element)));\n      callback(null, set);\n    });\n  }\n  _getManagedItemInfo(path, callback) {\n    const dir = dirname(this.fs, path);\n    this.managedItemDirectoryQueue.add(dir, (err, elements) => {\n      if (err) {\n        return callback(err);\n      }\n      if (!elements.has(path)) {\n        // file or directory doesn't exist\n        this._managedItems.set(path, \"*missing\");\n        return callback(null, \"*missing\");\n      }\n      // something exists\n      // it may be a file or directory\n      if (path.endsWith(\"node_modules\") && (path.endsWith(\"/node_modules\") || path.endsWith(\"\\\\node_modules\"))) {\n        // we are only interested in existence of this special directory\n        this._managedItems.set(path, \"*node_modules\");\n        return callback(null, \"*node_modules\");\n      }\n\n      // we assume it's a directory, as files shouldn't occur in managed paths\n      const packageJsonPath = join(this.fs, path, \"package.json\");\n      this.fs.readFile(packageJsonPath, (err, content) => {\n        if (err) {\n          if (err.code === \"ENOENT\" || err.code === \"ENOTDIR\") {\n            // no package.json or path is not a directory\n            this.fs.readdir(path, (err, elements) => {\n              if (!err && elements.length === 1 && elements[0] === \"node_modules\") {\n                // This is only a grouping folder e. g. used by yarn\n                // we are only interested in existence of this special directory\n                this._managedItems.set(path, \"*nested\");\n                return callback(null, \"*nested\");\n              }\n              this.logger.warn(`Managed item ${path} isn't a directory or doesn't contain a package.json (see snapshot.managedPaths option)`);\n              return callback();\n            });\n            return;\n          }\n          return callback(err);\n        }\n        let data;\n        try {\n          data = JSON.parse(content.toString(\"utf-8\"));\n        } catch (e) {\n          return callback(e);\n        }\n        if (!data.name) {\n          this.logger.warn(`${packageJsonPath} doesn't contain a \"name\" property (see snapshot.managedPaths option)`);\n          return callback();\n        }\n        const info = `${data.name || \"\"}@${data.version || \"\"}`;\n        this._managedItems.set(path, info);\n        callback(null, info);\n      });\n    });\n  }\n  getDeprecatedFileTimestamps() {\n    if (this._cachedDeprecatedFileTimestamps !== undefined) return this._cachedDeprecatedFileTimestamps;\n    const map = new Map();\n    for (const [path, info] of this._fileTimestamps) {\n      if (info) map.set(path, typeof info === \"object\" ? info.safeTime : null);\n    }\n    return this._cachedDeprecatedFileTimestamps = map;\n  }\n  getDeprecatedContextTimestamps() {\n    if (this._cachedDeprecatedContextTimestamps !== undefined) return this._cachedDeprecatedContextTimestamps;\n    const map = new Map();\n    for (const [path, info] of this._contextTimestamps) {\n      if (info) map.set(path, typeof info === \"object\" ? info.safeTime : null);\n    }\n    return this._cachedDeprecatedContextTimestamps = map;\n  }\n}\nmodule.exports = FileSystemInfo;\nmodule.exports.Snapshot = Snapshot;","map":{"version":3,"names":["create","createResolver","require","nodeModule","asyncLib","isAbsolute","AsyncQueue","StackedCacheMap","createHash","join","dirname","relative","lstatReadlinkAbsolute","makeSerializable","processAsyncTree","supportsEsm","process","versions","modules","builtinModules","Set","FS_ACCURACY","EMPTY_SET","RBDT_RESOLVE_CJS","RBDT_RESOLVE_ESM","RBDT_RESOLVE_DIRECTORY","RBDT_RESOLVE_CJS_FILE","RBDT_RESOLVE_CJS_FILE_AS_CHILD","RBDT_RESOLVE_ESM_FILE","RBDT_DIRECTORY","RBDT_FILE","RBDT_DIRECTORY_DEPENDENCIES","RBDT_FILE_DEPENDENCIES","INVALID","Symbol","DONE_ITERATOR_RESULT","keys","next","SnapshotIterator","constructor","SnapshotIterable","snapshot","getMaps","iterator","state","it","maps","queue","length","map","pop","undefined","result","done","children","size","child","push","Snapshot","_flags","_cachedFileIterable","_cachedContextIterable","_cachedMissingIterable","startTime","fileTimestamps","fileHashes","fileTshs","contextTimestamps","contextHashes","contextTshs","missingExistence","managedItemInfo","managedFiles","managedContexts","managedMissing","hasStartTime","setStartTime","value","setMergedStartTime","Math","min","hasFileTimestamps","setFileTimestamps","hasFileHashes","setFileHashes","hasFileTshs","setFileTshs","hasContextTimestamps","setContextTimestamps","hasContextHashes","setContextHashes","hasContextTshs","setContextTshs","hasMissingExistence","setMissingExistence","hasManagedItemInfo","setManagedItemInfo","hasManagedFiles","setManagedFiles","hasManagedContexts","setManagedContexts","hasManagedMissing","setManagedMissing","hasChildren","setChildren","addChild","add","serialize","write","deserialize","read","_createIterable","getFileIterable","s","getContextIterable","getMissingIterable","MIN_COMMON_SNAPSHOT_SIZE","SnapshotOptimization","has","get","set","useStartTime","isSet","_has","_get","_set","_useStartTime","_isSet","_map","Map","_statItemsShared","_statItemsUnshared","_statSharedSnapshots","_statReusedSharedSnapshots","getStatisticMessage","total","round","clear","optimize","newSnapshot","capturedFiles","increaseSharedAndStoreOptimizationEntry","entry","forEach","shared","storeOptimizationEntry","path","snapshotContent","old","delete","newOptimizationEntry","capturedFilesSize","optimizationEntries","optimizationEntry","nonSharedFiles","snapshotEntries","sharedCount","commonMap","commonSnapshot","newEntry","ts","unshared","parseString","str","slice","replace","JSON","parse","applyMtime","mtime","mergeMaps","a","b","key","mergeSets","item","getManagedItem","managedPath","i","slashes","startingPosition","loop","charCodeAt","c","getResolvedTimestamp","resolved","symlinks","getResolvedHash","hash","addAll","source","target","FileSystemInfo","fs","managedPaths","immutablePaths","logger","hashFunction","_remainingLogs","_loggedPaths","_hashFunction","_snapshotCache","WeakMap","_fileTimestampsOptimization","v","_fileHashesOptimization","_fileTshsOptimization","_contextTimestampsOptimization","_contextHashesOptimization","_contextTshsOptimization","_missingExistenceOptimization","_managedItemInfoOptimization","_managedFilesOptimization","_managedContextsOptimization","_managedMissingOptimization","_fileTimestamps","_fileHashes","_fileTshs","_contextTimestamps","_contextHashes","_contextTshs","_managedItems","fileTimestampQueue","name","parallelism","processor","_readFileTimestamp","bind","fileHashQueue","_readFileHash","contextTimestampQueue","_readContextTimestamp","contextHashQueue","_readContextHash","contextTshQueue","_readContextTimestampAndHash","managedItemQueue","_getManagedItemInfo","managedItemDirectoryQueue","_getManagedItemDirectoryInfo","Array","from","managedPathsWithSlash","filter","p","managedPathsRegExps","immutablePathsWithSlash","immutablePathsRegExps","_cachedDeprecatedFileTimestamps","_cachedDeprecatedContextTimestamps","_warnAboutExperimentalEsmTracking","_statCreatedSnapshots","_statTestedSnapshotsCached","_statTestedSnapshotsNotCached","_statTestedChildrenCached","_statTestedChildrenNotCached","_statTestedEntries","logStatistics","logWhenMessage","header","message","log","_log","reason","args","debug","addFileTimestamps","immutable","addContextTimestamps","getFileTimestamp","callback","cache","getContextTimestamp","_resolveContextTimestamp","err","_getUnresolvedContextTimestamp","getFileHash","getContextHash","_resolveContextHash","_getUnresolvedContextHash","getContextTsh","_resolveContextTsh","_getUnresolvedContextTsh","_createBuildDependenciesResolvers","resolveContext","resolveToContext","exportsFields","fileSystem","resolveCjs","extensions","conditionNames","resolveCjsAsChild","resolveEsm","fullySpecified","resolveBuildDependencies","context","deps","files","fileSymlinks","directories","directorySymlinks","missing","resolveFiles","resolveDirectories","resolveMissing","resolveResults","invalidResolveResults","resolverContext","fileDependencies","contextDependencies","missingDependencies","expectedToString","expected","jobToString","job","type","pathToString","issuer","dep","resolveDirectory","_","resultPath","resolveFile","symbol","resolve","warn","isDirectory","test","realpath","_realPath","realPath","nextTick","module","isArray","childPath","filename","modulePath","paths","startsWith","subPath","packageMatch","exec","request","endsWith","lexer","init","then","readFile","content","toString","imports","imp","dependency","d","substring","e","expr","trim","stack","match","packagePath","packageJson","code","parent","packageData","depsObject","dependencies","optionalDepsObject","optionalDependencies","allDeps","optionalDeps","Object","l","k","resolveDependencies","checkResolveResultsValid","eachLimit","expectedResult","split","Error","createSnapshot","options","managedItems","mode","timestamp","jobs","jobDone","jobError","checkManaged","managedSet","immutablePath","managedItem","captureNonManaged","items","capturedItems","processCapturedFiles","_getFileTimestampAndHash","processCapturedDirectories","capturedDirectories","processCapturedMissing","capturedMissing","Boolean","fn","captured","file","mergeSnapshots","snapshot1","snapshot2","checkSnapshotValid","cachedResult","_checkSnapshotValidNoCache","invalid","invalidWithError","checkHash","current","snap","checkExistence","checkFile","safeTime","checkContext","timestampHash","childCallback","processFileHashSnapshot","tsh","processContextHashSnapshot","existence","info","callbacks","stat","Infinity","update","digest","continueWithHash","_readContext","fromImmutablePath","fromManagedItem","fromSymlink","fromFile","fromDirectory","reduce","readdir","_files","normalize","sort","isFile","results","directory","increaseParallelism","tsEntry","decreaseParallelism","tsEntries","max","hashes","h","finalize","cachedHash","cachedTimestamp","fle","tsHash","tsHashes","elements","element","dir","packageJsonPath","data","version","getDeprecatedFileTimestamps","getDeprecatedContextTimestamps","exports"],"sources":["C:/Users/galia/OneDrive/Escritorio/rent-a-bike-app/node_modules/webpack/lib/FileSystemInfo.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { create: createResolver } = require(\"enhanced-resolve\");\nconst nodeModule = require(\"module\");\nconst asyncLib = require(\"neo-async\");\nconst { isAbsolute } = require(\"path\");\nconst AsyncQueue = require(\"./util/AsyncQueue\");\nconst StackedCacheMap = require(\"./util/StackedCacheMap\");\nconst createHash = require(\"./util/createHash\");\nconst { join, dirname, relative, lstatReadlinkAbsolute } = require(\"./util/fs\");\nconst makeSerializable = require(\"./util/makeSerializable\");\nconst processAsyncTree = require(\"./util/processAsyncTree\");\n\n/** @typedef {import(\"./WebpackError\")} WebpackError */\n/** @typedef {import(\"./logging/Logger\").Logger} Logger */\n/** @typedef {typeof import(\"./util/Hash\")} Hash */\n/** @typedef {import(\"./util/fs\").IStats} IStats */\n/** @typedef {import(\"./util/fs\").InputFileSystem} InputFileSystem */\n\nconst supportsEsm = +process.versions.modules >= 83;\n\nconst builtinModules = new Set(nodeModule.builtinModules);\n\nlet FS_ACCURACY = 2000;\n\nconst EMPTY_SET = new Set();\n\nconst RBDT_RESOLVE_CJS = 0;\nconst RBDT_RESOLVE_ESM = 1;\nconst RBDT_RESOLVE_DIRECTORY = 2;\nconst RBDT_RESOLVE_CJS_FILE = 3;\nconst RBDT_RESOLVE_CJS_FILE_AS_CHILD = 4;\nconst RBDT_RESOLVE_ESM_FILE = 5;\nconst RBDT_DIRECTORY = 6;\nconst RBDT_FILE = 7;\nconst RBDT_DIRECTORY_DEPENDENCIES = 8;\nconst RBDT_FILE_DEPENDENCIES = 9;\n\nconst INVALID = Symbol(\"invalid\");\n\n/**\n * @typedef {Object} FileSystemInfoEntry\n * @property {number} safeTime\n * @property {number=} timestamp\n */\n\n/**\n * @typedef {Object} ResolvedContextFileSystemInfoEntry\n * @property {number} safeTime\n * @property {string=} timestampHash\n */\n\n/**\n * @typedef {Object} ContextFileSystemInfoEntry\n * @property {number} safeTime\n * @property {string=} timestampHash\n * @property {ResolvedContextFileSystemInfoEntry=} resolved\n * @property {Set<string>=} symlinks\n */\n\n/**\n * @typedef {Object} TimestampAndHash\n * @property {number} safeTime\n * @property {number=} timestamp\n * @property {string} hash\n */\n\n/**\n * @typedef {Object} ResolvedContextTimestampAndHash\n * @property {number} safeTime\n * @property {string=} timestampHash\n * @property {string} hash\n */\n\n/**\n * @typedef {Object} ContextTimestampAndHash\n * @property {number} safeTime\n * @property {string=} timestampHash\n * @property {string} hash\n * @property {ResolvedContextTimestampAndHash=} resolved\n * @property {Set<string>=} symlinks\n */\n\n/**\n * @typedef {Object} ContextHash\n * @property {string} hash\n * @property {string=} resolved\n * @property {Set<string>=} symlinks\n */\n\n/**\n * @typedef {Object} SnapshotOptimizationEntry\n * @property {Snapshot} snapshot\n * @property {number} shared\n * @property {Set<string>} snapshotContent\n * @property {Set<SnapshotOptimizationEntry>} children\n */\n\n/**\n * @typedef {Object} ResolveBuildDependenciesResult\n * @property {Set<string>} files list of files\n * @property {Set<string>} directories list of directories\n * @property {Set<string>} missing list of missing entries\n * @property {Map<string, string | false>} resolveResults stored resolve results\n * @property {Object} resolveDependencies dependencies of the resolving\n * @property {Set<string>} resolveDependencies.files list of files\n * @property {Set<string>} resolveDependencies.directories list of directories\n * @property {Set<string>} resolveDependencies.missing list of missing entries\n */\n\nconst DONE_ITERATOR_RESULT = new Set().keys().next();\n\n// cspell:word tshs\n// Tsh = Timestamp + Hash\n// Tshs = Timestamp + Hash combinations\n\nclass SnapshotIterator {\n\tconstructor(next) {\n\t\tthis.next = next;\n\t}\n}\n\nclass SnapshotIterable {\n\tconstructor(snapshot, getMaps) {\n\t\tthis.snapshot = snapshot;\n\t\tthis.getMaps = getMaps;\n\t}\n\n\t[Symbol.iterator]() {\n\t\tlet state = 0;\n\t\t/** @type {IterableIterator<string>} */\n\t\tlet it;\n\t\t/** @type {(Snapshot) => (Map<string, any> | Set<string>)[]} */\n\t\tlet getMaps;\n\t\t/** @type {(Map<string, any> | Set<string>)[]} */\n\t\tlet maps;\n\t\t/** @type {Snapshot} */\n\t\tlet snapshot;\n\t\tlet queue;\n\t\treturn new SnapshotIterator(() => {\n\t\t\tfor (;;) {\n\t\t\t\tswitch (state) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tsnapshot = this.snapshot;\n\t\t\t\t\t\tgetMaps = this.getMaps;\n\t\t\t\t\t\tmaps = getMaps(snapshot);\n\t\t\t\t\t\tstate = 1;\n\t\t\t\t\t/* falls through */\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tif (maps.length > 0) {\n\t\t\t\t\t\t\tconst map = maps.pop();\n\t\t\t\t\t\t\tif (map !== undefined) {\n\t\t\t\t\t\t\t\tit = map.keys();\n\t\t\t\t\t\t\t\tstate = 2;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstate = 3;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t/* falls through */\n\t\t\t\t\tcase 2: {\n\t\t\t\t\t\tconst result = it.next();\n\t\t\t\t\t\tif (!result.done) return result;\n\t\t\t\t\t\tstate = 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 3: {\n\t\t\t\t\t\tconst children = snapshot.children;\n\t\t\t\t\t\tif (children !== undefined) {\n\t\t\t\t\t\t\tif (children.size === 1) {\n\t\t\t\t\t\t\t\t// shortcut for a single child\n\t\t\t\t\t\t\t\t// avoids allocation of queue\n\t\t\t\t\t\t\t\tfor (const child of children) snapshot = child;\n\t\t\t\t\t\t\t\tmaps = getMaps(snapshot);\n\t\t\t\t\t\t\t\tstate = 1;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (queue === undefined) queue = [];\n\t\t\t\t\t\t\tfor (const child of children) {\n\t\t\t\t\t\t\t\tqueue.push(child);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (queue !== undefined && queue.length > 0) {\n\t\t\t\t\t\t\tsnapshot = queue.pop();\n\t\t\t\t\t\t\tmaps = getMaps(snapshot);\n\t\t\t\t\t\t\tstate = 1;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstate = 4;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t/* falls through */\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\treturn DONE_ITERATOR_RESULT;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nclass Snapshot {\n\tconstructor() {\n\t\tthis._flags = 0;\n\t\t/** @type {Iterable<string> | undefined} */\n\t\tthis._cachedFileIterable = undefined;\n\t\t/** @type {Iterable<string> | undefined} */\n\t\tthis._cachedContextIterable = undefined;\n\t\t/** @type {Iterable<string> | undefined} */\n\t\tthis._cachedMissingIterable = undefined;\n\t\t/** @type {number | undefined} */\n\t\tthis.startTime = undefined;\n\t\t/** @type {Map<string, FileSystemInfoEntry | null> | undefined} */\n\t\tthis.fileTimestamps = undefined;\n\t\t/** @type {Map<string, string | null> | undefined} */\n\t\tthis.fileHashes = undefined;\n\t\t/** @type {Map<string, TimestampAndHash | string | null> | undefined} */\n\t\tthis.fileTshs = undefined;\n\t\t/** @type {Map<string, ResolvedContextFileSystemInfoEntry | null> | undefined} */\n\t\tthis.contextTimestamps = undefined;\n\t\t/** @type {Map<string, string | null> | undefined} */\n\t\tthis.contextHashes = undefined;\n\t\t/** @type {Map<string, ResolvedContextTimestampAndHash | null> | undefined} */\n\t\tthis.contextTshs = undefined;\n\t\t/** @type {Map<string, boolean> | undefined} */\n\t\tthis.missingExistence = undefined;\n\t\t/** @type {Map<string, string> | undefined} */\n\t\tthis.managedItemInfo = undefined;\n\t\t/** @type {Set<string> | undefined} */\n\t\tthis.managedFiles = undefined;\n\t\t/** @type {Set<string> | undefined} */\n\t\tthis.managedContexts = undefined;\n\t\t/** @type {Set<string> | undefined} */\n\t\tthis.managedMissing = undefined;\n\t\t/** @type {Set<Snapshot> | undefined} */\n\t\tthis.children = undefined;\n\t}\n\n\thasStartTime() {\n\t\treturn (this._flags & 1) !== 0;\n\t}\n\n\tsetStartTime(value) {\n\t\tthis._flags = this._flags | 1;\n\t\tthis.startTime = value;\n\t}\n\n\tsetMergedStartTime(value, snapshot) {\n\t\tif (value) {\n\t\t\tif (snapshot.hasStartTime()) {\n\t\t\t\tthis.setStartTime(Math.min(value, snapshot.startTime));\n\t\t\t} else {\n\t\t\t\tthis.setStartTime(value);\n\t\t\t}\n\t\t} else {\n\t\t\tif (snapshot.hasStartTime()) this.setStartTime(snapshot.startTime);\n\t\t}\n\t}\n\n\thasFileTimestamps() {\n\t\treturn (this._flags & 2) !== 0;\n\t}\n\n\tsetFileTimestamps(value) {\n\t\tthis._flags = this._flags | 2;\n\t\tthis.fileTimestamps = value;\n\t}\n\n\thasFileHashes() {\n\t\treturn (this._flags & 4) !== 0;\n\t}\n\n\tsetFileHashes(value) {\n\t\tthis._flags = this._flags | 4;\n\t\tthis.fileHashes = value;\n\t}\n\n\thasFileTshs() {\n\t\treturn (this._flags & 8) !== 0;\n\t}\n\n\tsetFileTshs(value) {\n\t\tthis._flags = this._flags | 8;\n\t\tthis.fileTshs = value;\n\t}\n\n\thasContextTimestamps() {\n\t\treturn (this._flags & 0x10) !== 0;\n\t}\n\n\tsetContextTimestamps(value) {\n\t\tthis._flags = this._flags | 0x10;\n\t\tthis.contextTimestamps = value;\n\t}\n\n\thasContextHashes() {\n\t\treturn (this._flags & 0x20) !== 0;\n\t}\n\n\tsetContextHashes(value) {\n\t\tthis._flags = this._flags | 0x20;\n\t\tthis.contextHashes = value;\n\t}\n\n\thasContextTshs() {\n\t\treturn (this._flags & 0x40) !== 0;\n\t}\n\n\tsetContextTshs(value) {\n\t\tthis._flags = this._flags | 0x40;\n\t\tthis.contextTshs = value;\n\t}\n\n\thasMissingExistence() {\n\t\treturn (this._flags & 0x80) !== 0;\n\t}\n\n\tsetMissingExistence(value) {\n\t\tthis._flags = this._flags | 0x80;\n\t\tthis.missingExistence = value;\n\t}\n\n\thasManagedItemInfo() {\n\t\treturn (this._flags & 0x100) !== 0;\n\t}\n\n\tsetManagedItemInfo(value) {\n\t\tthis._flags = this._flags | 0x100;\n\t\tthis.managedItemInfo = value;\n\t}\n\n\thasManagedFiles() {\n\t\treturn (this._flags & 0x200) !== 0;\n\t}\n\n\tsetManagedFiles(value) {\n\t\tthis._flags = this._flags | 0x200;\n\t\tthis.managedFiles = value;\n\t}\n\n\thasManagedContexts() {\n\t\treturn (this._flags & 0x400) !== 0;\n\t}\n\n\tsetManagedContexts(value) {\n\t\tthis._flags = this._flags | 0x400;\n\t\tthis.managedContexts = value;\n\t}\n\n\thasManagedMissing() {\n\t\treturn (this._flags & 0x800) !== 0;\n\t}\n\n\tsetManagedMissing(value) {\n\t\tthis._flags = this._flags | 0x800;\n\t\tthis.managedMissing = value;\n\t}\n\n\thasChildren() {\n\t\treturn (this._flags & 0x1000) !== 0;\n\t}\n\n\tsetChildren(value) {\n\t\tthis._flags = this._flags | 0x1000;\n\t\tthis.children = value;\n\t}\n\n\taddChild(child) {\n\t\tif (!this.hasChildren()) {\n\t\t\tthis.setChildren(new Set());\n\t\t}\n\t\tthis.children.add(child);\n\t}\n\n\tserialize({ write }) {\n\t\twrite(this._flags);\n\t\tif (this.hasStartTime()) write(this.startTime);\n\t\tif (this.hasFileTimestamps()) write(this.fileTimestamps);\n\t\tif (this.hasFileHashes()) write(this.fileHashes);\n\t\tif (this.hasFileTshs()) write(this.fileTshs);\n\t\tif (this.hasContextTimestamps()) write(this.contextTimestamps);\n\t\tif (this.hasContextHashes()) write(this.contextHashes);\n\t\tif (this.hasContextTshs()) write(this.contextTshs);\n\t\tif (this.hasMissingExistence()) write(this.missingExistence);\n\t\tif (this.hasManagedItemInfo()) write(this.managedItemInfo);\n\t\tif (this.hasManagedFiles()) write(this.managedFiles);\n\t\tif (this.hasManagedContexts()) write(this.managedContexts);\n\t\tif (this.hasManagedMissing()) write(this.managedMissing);\n\t\tif (this.hasChildren()) write(this.children);\n\t}\n\n\tdeserialize({ read }) {\n\t\tthis._flags = read();\n\t\tif (this.hasStartTime()) this.startTime = read();\n\t\tif (this.hasFileTimestamps()) this.fileTimestamps = read();\n\t\tif (this.hasFileHashes()) this.fileHashes = read();\n\t\tif (this.hasFileTshs()) this.fileTshs = read();\n\t\tif (this.hasContextTimestamps()) this.contextTimestamps = read();\n\t\tif (this.hasContextHashes()) this.contextHashes = read();\n\t\tif (this.hasContextTshs()) this.contextTshs = read();\n\t\tif (this.hasMissingExistence()) this.missingExistence = read();\n\t\tif (this.hasManagedItemInfo()) this.managedItemInfo = read();\n\t\tif (this.hasManagedFiles()) this.managedFiles = read();\n\t\tif (this.hasManagedContexts()) this.managedContexts = read();\n\t\tif (this.hasManagedMissing()) this.managedMissing = read();\n\t\tif (this.hasChildren()) this.children = read();\n\t}\n\n\t/**\n\t * @param {function(Snapshot): (ReadonlyMap<string, any> | ReadonlySet<string>)[]} getMaps first\n\t * @returns {Iterable<string>} iterable\n\t */\n\t_createIterable(getMaps) {\n\t\treturn new SnapshotIterable(this, getMaps);\n\t}\n\n\t/**\n\t * @returns {Iterable<string>} iterable\n\t */\n\tgetFileIterable() {\n\t\tif (this._cachedFileIterable === undefined) {\n\t\t\tthis._cachedFileIterable = this._createIterable(s => [\n\t\t\t\ts.fileTimestamps,\n\t\t\t\ts.fileHashes,\n\t\t\t\ts.fileTshs,\n\t\t\t\ts.managedFiles\n\t\t\t]);\n\t\t}\n\t\treturn this._cachedFileIterable;\n\t}\n\n\t/**\n\t * @returns {Iterable<string>} iterable\n\t */\n\tgetContextIterable() {\n\t\tif (this._cachedContextIterable === undefined) {\n\t\t\tthis._cachedContextIterable = this._createIterable(s => [\n\t\t\t\ts.contextTimestamps,\n\t\t\t\ts.contextHashes,\n\t\t\t\ts.contextTshs,\n\t\t\t\ts.managedContexts\n\t\t\t]);\n\t\t}\n\t\treturn this._cachedContextIterable;\n\t}\n\n\t/**\n\t * @returns {Iterable<string>} iterable\n\t */\n\tgetMissingIterable() {\n\t\tif (this._cachedMissingIterable === undefined) {\n\t\t\tthis._cachedMissingIterable = this._createIterable(s => [\n\t\t\t\ts.missingExistence,\n\t\t\t\ts.managedMissing\n\t\t\t]);\n\t\t}\n\t\treturn this._cachedMissingIterable;\n\t}\n}\n\nmakeSerializable(Snapshot, \"webpack/lib/FileSystemInfo\", \"Snapshot\");\n\nconst MIN_COMMON_SNAPSHOT_SIZE = 3;\n\n/**\n * @template T\n */\nclass SnapshotOptimization {\n\t/**\n\t * @param {function(Snapshot): boolean} has has value\n\t * @param {function(Snapshot): Map<string, T> | Set<string>} get get value\n\t * @param {function(Snapshot, Map<string, T> | Set<string>): void} set set value\n\t * @param {boolean=} useStartTime use the start time of snapshots\n\t * @param {boolean=} isSet value is an Set instead of a Map\n\t */\n\tconstructor(has, get, set, useStartTime = true, isSet = false) {\n\t\tthis._has = has;\n\t\tthis._get = get;\n\t\tthis._set = set;\n\t\tthis._useStartTime = useStartTime;\n\t\tthis._isSet = isSet;\n\t\t/** @type {Map<string, SnapshotOptimizationEntry>} */\n\t\tthis._map = new Map();\n\t\tthis._statItemsShared = 0;\n\t\tthis._statItemsUnshared = 0;\n\t\tthis._statSharedSnapshots = 0;\n\t\tthis._statReusedSharedSnapshots = 0;\n\t}\n\n\tgetStatisticMessage() {\n\t\tconst total = this._statItemsShared + this._statItemsUnshared;\n\t\tif (total === 0) return undefined;\n\t\treturn `${\n\t\t\tthis._statItemsShared && Math.round((this._statItemsShared * 100) / total)\n\t\t}% (${this._statItemsShared}/${total}) entries shared via ${\n\t\t\tthis._statSharedSnapshots\n\t\t} shared snapshots (${\n\t\t\tthis._statReusedSharedSnapshots + this._statSharedSnapshots\n\t\t} times referenced)`;\n\t}\n\n\tclear() {\n\t\tthis._map.clear();\n\t\tthis._statItemsShared = 0;\n\t\tthis._statItemsUnshared = 0;\n\t\tthis._statSharedSnapshots = 0;\n\t\tthis._statReusedSharedSnapshots = 0;\n\t}\n\n\t/**\n\t * @param {Snapshot} newSnapshot snapshot\n\t * @param {Set<string>} capturedFiles files to snapshot/share\n\t * @returns {void}\n\t */\n\toptimize(newSnapshot, capturedFiles) {\n\t\t/**\n\t\t * @param {SnapshotOptimizationEntry} entry optimization entry\n\t\t * @returns {void}\n\t\t */\n\t\tconst increaseSharedAndStoreOptimizationEntry = entry => {\n\t\t\tif (entry.children !== undefined) {\n\t\t\t\tentry.children.forEach(increaseSharedAndStoreOptimizationEntry);\n\t\t\t}\n\t\t\tentry.shared++;\n\t\t\tstoreOptimizationEntry(entry);\n\t\t};\n\t\t/**\n\t\t * @param {SnapshotOptimizationEntry} entry optimization entry\n\t\t * @returns {void}\n\t\t */\n\t\tconst storeOptimizationEntry = entry => {\n\t\t\tfor (const path of entry.snapshotContent) {\n\t\t\t\tconst old = this._map.get(path);\n\t\t\t\tif (old.shared < entry.shared) {\n\t\t\t\t\tthis._map.set(path, entry);\n\t\t\t\t}\n\t\t\t\tcapturedFiles.delete(path);\n\t\t\t}\n\t\t};\n\n\t\t/** @type {SnapshotOptimizationEntry} */\n\t\tlet newOptimizationEntry = undefined;\n\n\t\tconst capturedFilesSize = capturedFiles.size;\n\n\t\t/** @type {Set<SnapshotOptimizationEntry> | undefined} */\n\t\tconst optimizationEntries = new Set();\n\n\t\tfor (const path of capturedFiles) {\n\t\t\tconst optimizationEntry = this._map.get(path);\n\t\t\tif (optimizationEntry === undefined) {\n\t\t\t\tif (newOptimizationEntry === undefined) {\n\t\t\t\t\tnewOptimizationEntry = {\n\t\t\t\t\t\tsnapshot: newSnapshot,\n\t\t\t\t\t\tshared: 0,\n\t\t\t\t\t\tsnapshotContent: undefined,\n\t\t\t\t\t\tchildren: undefined\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tthis._map.set(path, newOptimizationEntry);\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\toptimizationEntries.add(optimizationEntry);\n\t\t\t}\n\t\t}\n\n\t\toptimizationEntries: for (const optimizationEntry of optimizationEntries) {\n\t\t\tconst snapshot = optimizationEntry.snapshot;\n\t\t\tif (optimizationEntry.shared > 0) {\n\t\t\t\t// It's a shared snapshot\n\t\t\t\t// We can't change it, so we can only use it when all files match\n\t\t\t\t// and startTime is compatible\n\t\t\t\tif (\n\t\t\t\t\tthis._useStartTime &&\n\t\t\t\t\tnewSnapshot.startTime &&\n\t\t\t\t\t(!snapshot.startTime || snapshot.startTime > newSnapshot.startTime)\n\t\t\t\t) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst nonSharedFiles = new Set();\n\t\t\t\tconst snapshotContent = optimizationEntry.snapshotContent;\n\t\t\t\tconst snapshotEntries = this._get(snapshot);\n\t\t\t\tfor (const path of snapshotContent) {\n\t\t\t\t\tif (!capturedFiles.has(path)) {\n\t\t\t\t\t\tif (!snapshotEntries.has(path)) {\n\t\t\t\t\t\t\t// File is not shared and can't be removed from the snapshot\n\t\t\t\t\t\t\t// because it's in a child of the snapshot\n\t\t\t\t\t\t\tcontinue optimizationEntries;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnonSharedFiles.add(path);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (nonSharedFiles.size === 0) {\n\t\t\t\t\t// The complete snapshot is shared\n\t\t\t\t\t// add it as child\n\t\t\t\t\tnewSnapshot.addChild(snapshot);\n\t\t\t\t\tincreaseSharedAndStoreOptimizationEntry(optimizationEntry);\n\t\t\t\t\tthis._statReusedSharedSnapshots++;\n\t\t\t\t} else {\n\t\t\t\t\t// Only a part of the snapshot is shared\n\t\t\t\t\tconst sharedCount = snapshotContent.size - nonSharedFiles.size;\n\t\t\t\t\tif (sharedCount < MIN_COMMON_SNAPSHOT_SIZE) {\n\t\t\t\t\t\t// Common part it too small\n\t\t\t\t\t\tcontinue optimizationEntries;\n\t\t\t\t\t}\n\t\t\t\t\t// Extract common timestamps from both snapshots\n\t\t\t\t\tlet commonMap;\n\t\t\t\t\tif (this._isSet) {\n\t\t\t\t\t\tcommonMap = new Set();\n\t\t\t\t\t\tfor (const path of /** @type {Set<string>} */ (snapshotEntries)) {\n\t\t\t\t\t\t\tif (nonSharedFiles.has(path)) continue;\n\t\t\t\t\t\t\tcommonMap.add(path);\n\t\t\t\t\t\t\tsnapshotEntries.delete(path);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcommonMap = new Map();\n\t\t\t\t\t\tconst map = /** @type {Map<string, T>} */ (snapshotEntries);\n\t\t\t\t\t\tfor (const [path, value] of map) {\n\t\t\t\t\t\t\tif (nonSharedFiles.has(path)) continue;\n\t\t\t\t\t\t\tcommonMap.set(path, value);\n\t\t\t\t\t\t\tsnapshotEntries.delete(path);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// Create and attach snapshot\n\t\t\t\t\tconst commonSnapshot = new Snapshot();\n\t\t\t\t\tif (this._useStartTime) {\n\t\t\t\t\t\tcommonSnapshot.setMergedStartTime(newSnapshot.startTime, snapshot);\n\t\t\t\t\t}\n\t\t\t\t\tthis._set(commonSnapshot, commonMap);\n\t\t\t\t\tnewSnapshot.addChild(commonSnapshot);\n\t\t\t\t\tsnapshot.addChild(commonSnapshot);\n\t\t\t\t\t// Create optimization entry\n\t\t\t\t\tconst newEntry = {\n\t\t\t\t\t\tsnapshot: commonSnapshot,\n\t\t\t\t\t\tshared: optimizationEntry.shared + 1,\n\t\t\t\t\t\tsnapshotContent: new Set(commonMap.keys()),\n\t\t\t\t\t\tchildren: undefined\n\t\t\t\t\t};\n\t\t\t\t\tif (optimizationEntry.children === undefined)\n\t\t\t\t\t\toptimizationEntry.children = new Set();\n\t\t\t\t\toptimizationEntry.children.add(newEntry);\n\t\t\t\t\tstoreOptimizationEntry(newEntry);\n\t\t\t\t\tthis._statSharedSnapshots++;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// It's a unshared snapshot\n\t\t\t\t// We can extract a common shared snapshot\n\t\t\t\t// with all common files\n\t\t\t\tconst snapshotEntries = this._get(snapshot);\n\t\t\t\tif (snapshotEntries === undefined) {\n\t\t\t\t\t// Incomplete snapshot, that can't be used\n\t\t\t\t\tcontinue optimizationEntries;\n\t\t\t\t}\n\t\t\t\tlet commonMap;\n\t\t\t\tif (this._isSet) {\n\t\t\t\t\tcommonMap = new Set();\n\t\t\t\t\tconst set = /** @type {Set<string>} */ (snapshotEntries);\n\t\t\t\t\tif (capturedFiles.size < set.size) {\n\t\t\t\t\t\tfor (const path of capturedFiles) {\n\t\t\t\t\t\t\tif (set.has(path)) commonMap.add(path);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (const path of set) {\n\t\t\t\t\t\t\tif (capturedFiles.has(path)) commonMap.add(path);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcommonMap = new Map();\n\t\t\t\t\tconst map = /** @type {Map<string, T>} */ (snapshotEntries);\n\t\t\t\t\tfor (const path of capturedFiles) {\n\t\t\t\t\t\tconst ts = map.get(path);\n\t\t\t\t\t\tif (ts === undefined) continue;\n\t\t\t\t\t\tcommonMap.set(path, ts);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (commonMap.size < MIN_COMMON_SNAPSHOT_SIZE) {\n\t\t\t\t\t// Common part it too small\n\t\t\t\t\tcontinue optimizationEntries;\n\t\t\t\t}\n\t\t\t\t// Create and attach snapshot\n\t\t\t\tconst commonSnapshot = new Snapshot();\n\t\t\t\tif (this._useStartTime) {\n\t\t\t\t\tcommonSnapshot.setMergedStartTime(newSnapshot.startTime, snapshot);\n\t\t\t\t}\n\t\t\t\tthis._set(commonSnapshot, commonMap);\n\t\t\t\tnewSnapshot.addChild(commonSnapshot);\n\t\t\t\tsnapshot.addChild(commonSnapshot);\n\t\t\t\t// Remove files from snapshot\n\t\t\t\tfor (const path of commonMap.keys()) snapshotEntries.delete(path);\n\t\t\t\tconst sharedCount = commonMap.size;\n\t\t\t\tthis._statItemsUnshared -= sharedCount;\n\t\t\t\tthis._statItemsShared += sharedCount;\n\t\t\t\t// Create optimization entry\n\t\t\t\tstoreOptimizationEntry({\n\t\t\t\t\tsnapshot: commonSnapshot,\n\t\t\t\t\tshared: 2,\n\t\t\t\t\tsnapshotContent: new Set(commonMap.keys()),\n\t\t\t\t\tchildren: undefined\n\t\t\t\t});\n\t\t\t\tthis._statSharedSnapshots++;\n\t\t\t}\n\t\t}\n\t\tconst unshared = capturedFiles.size;\n\t\tthis._statItemsUnshared += unshared;\n\t\tthis._statItemsShared += capturedFilesSize - unshared;\n\t}\n}\n\nconst parseString = str => {\n\tif (str[0] === \"'\") str = `\"${str.slice(1, -1).replace(/\"/g, '\\\\\"')}\"`;\n\treturn JSON.parse(str);\n};\n\n/* istanbul ignore next */\n/**\n * @param {number} mtime mtime\n */\nconst applyMtime = mtime => {\n\tif (FS_ACCURACY > 1 && mtime % 2 !== 0) FS_ACCURACY = 1;\n\telse if (FS_ACCURACY > 10 && mtime % 20 !== 0) FS_ACCURACY = 10;\n\telse if (FS_ACCURACY > 100 && mtime % 200 !== 0) FS_ACCURACY = 100;\n\telse if (FS_ACCURACY > 1000 && mtime % 2000 !== 0) FS_ACCURACY = 1000;\n};\n\n/**\n * @template T\n * @template K\n * @param {Map<T, K>} a source map\n * @param {Map<T, K>} b joining map\n * @returns {Map<T, K>} joined map\n */\nconst mergeMaps = (a, b) => {\n\tif (!b || b.size === 0) return a;\n\tif (!a || a.size === 0) return b;\n\tconst map = new Map(a);\n\tfor (const [key, value] of b) {\n\t\tmap.set(key, value);\n\t}\n\treturn map;\n};\n\n/**\n * @template T\n * @template K\n * @param {Set<T, K>} a source map\n * @param {Set<T, K>} b joining map\n * @returns {Set<T, K>} joined map\n */\nconst mergeSets = (a, b) => {\n\tif (!b || b.size === 0) return a;\n\tif (!a || a.size === 0) return b;\n\tconst map = new Set(a);\n\tfor (const item of b) {\n\t\tmap.add(item);\n\t}\n\treturn map;\n};\n\n/**\n * Finding file or directory to manage\n * @param {string} managedPath path that is managing by {@link FileSystemInfo}\n * @param {string} path path to file or directory\n * @returns {string|null} managed item\n * @example\n * getManagedItem(\n *   '/Users/user/my-project/node_modules/',\n *   '/Users/user/my-project/node_modules/package/index.js'\n * ) === '/Users/user/my-project/node_modules/package'\n * getManagedItem(\n *   '/Users/user/my-project/node_modules/',\n *   '/Users/user/my-project/node_modules/package1/node_modules/package2'\n * ) === '/Users/user/my-project/node_modules/package1/node_modules/package2'\n * getManagedItem(\n *   '/Users/user/my-project/node_modules/',\n *   '/Users/user/my-project/node_modules/.bin/script.js'\n * ) === null // hidden files are disallowed as managed items\n * getManagedItem(\n *   '/Users/user/my-project/node_modules/',\n *   '/Users/user/my-project/node_modules/package'\n * ) === '/Users/user/my-project/node_modules/package'\n */\nconst getManagedItem = (managedPath, path) => {\n\tlet i = managedPath.length;\n\tlet slashes = 1;\n\tlet startingPosition = true;\n\tloop: while (i < path.length) {\n\t\tswitch (path.charCodeAt(i)) {\n\t\t\tcase 47: // slash\n\t\t\tcase 92: // backslash\n\t\t\t\tif (--slashes === 0) break loop;\n\t\t\t\tstartingPosition = true;\n\t\t\t\tbreak;\n\t\t\tcase 46: // .\n\t\t\t\t// hidden files are disallowed as managed items\n\t\t\t\t// it's probably .yarn-integrity or .cache\n\t\t\t\tif (startingPosition) return null;\n\t\t\t\tbreak;\n\t\t\tcase 64: // @\n\t\t\t\tif (!startingPosition) return null;\n\t\t\t\tslashes++;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tstartingPosition = false;\n\t\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (i === path.length) slashes--;\n\t// return null when path is incomplete\n\tif (slashes !== 0) return null;\n\t// if (path.slice(i + 1, i + 13) === \"node_modules\")\n\tif (\n\t\tpath.length >= i + 13 &&\n\t\tpath.charCodeAt(i + 1) === 110 &&\n\t\tpath.charCodeAt(i + 2) === 111 &&\n\t\tpath.charCodeAt(i + 3) === 100 &&\n\t\tpath.charCodeAt(i + 4) === 101 &&\n\t\tpath.charCodeAt(i + 5) === 95 &&\n\t\tpath.charCodeAt(i + 6) === 109 &&\n\t\tpath.charCodeAt(i + 7) === 111 &&\n\t\tpath.charCodeAt(i + 8) === 100 &&\n\t\tpath.charCodeAt(i + 9) === 117 &&\n\t\tpath.charCodeAt(i + 10) === 108 &&\n\t\tpath.charCodeAt(i + 11) === 101 &&\n\t\tpath.charCodeAt(i + 12) === 115\n\t) {\n\t\t// if this is the end of the path\n\t\tif (path.length === i + 13) {\n\t\t\t// return the node_modules directory\n\t\t\t// it's special\n\t\t\treturn path;\n\t\t}\n\t\tconst c = path.charCodeAt(i + 13);\n\t\t// if next symbol is slash or backslash\n\t\tif (c === 47 || c === 92) {\n\t\t\t// Managed subpath\n\t\t\treturn getManagedItem(path.slice(0, i + 14), path);\n\t\t}\n\t}\n\treturn path.slice(0, i);\n};\n\n/**\n * @template {ContextFileSystemInfoEntry | ContextTimestampAndHash} T\n * @param {T} entry entry\n * @returns {T[\"resolved\"] | undefined} the resolved entry\n */\nconst getResolvedTimestamp = entry => {\n\tif (entry === null) return null;\n\tif (entry.resolved !== undefined) return entry.resolved;\n\treturn entry.symlinks === undefined ? entry : undefined;\n};\n\n/**\n * @param {ContextHash} entry entry\n * @returns {string | undefined} the resolved entry\n */\nconst getResolvedHash = entry => {\n\tif (entry === null) return null;\n\tif (entry.resolved !== undefined) return entry.resolved;\n\treturn entry.symlinks === undefined ? entry.hash : undefined;\n};\n\nconst addAll = (source, target) => {\n\tfor (const key of source) target.add(key);\n};\n\n/**\n * Used to access information about the filesystem in a cached way\n */\nclass FileSystemInfo {\n\t/**\n\t * @param {InputFileSystem} fs file system\n\t * @param {Object} options options\n\t * @param {Iterable<string | RegExp>=} options.managedPaths paths that are only managed by a package manager\n\t * @param {Iterable<string | RegExp>=} options.immutablePaths paths that are immutable\n\t * @param {Logger=} options.logger logger used to log invalid snapshots\n\t * @param {string | Hash=} options.hashFunction the hash function to use\n\t */\n\tconstructor(\n\t\tfs,\n\t\t{\n\t\t\tmanagedPaths = [],\n\t\t\timmutablePaths = [],\n\t\t\tlogger,\n\t\t\thashFunction = \"md4\"\n\t\t} = {}\n\t) {\n\t\tthis.fs = fs;\n\t\tthis.logger = logger;\n\t\tthis._remainingLogs = logger ? 40 : 0;\n\t\tthis._loggedPaths = logger ? new Set() : undefined;\n\t\tthis._hashFunction = hashFunction;\n\t\t/** @type {WeakMap<Snapshot, boolean | (function(WebpackError=, boolean=): void)[]>} */\n\t\tthis._snapshotCache = new WeakMap();\n\t\tthis._fileTimestampsOptimization = new SnapshotOptimization(\n\t\t\ts => s.hasFileTimestamps(),\n\t\t\ts => s.fileTimestamps,\n\t\t\t(s, v) => s.setFileTimestamps(v)\n\t\t);\n\t\tthis._fileHashesOptimization = new SnapshotOptimization(\n\t\t\ts => s.hasFileHashes(),\n\t\t\ts => s.fileHashes,\n\t\t\t(s, v) => s.setFileHashes(v),\n\t\t\tfalse\n\t\t);\n\t\tthis._fileTshsOptimization = new SnapshotOptimization(\n\t\t\ts => s.hasFileTshs(),\n\t\t\ts => s.fileTshs,\n\t\t\t(s, v) => s.setFileTshs(v)\n\t\t);\n\t\tthis._contextTimestampsOptimization = new SnapshotOptimization(\n\t\t\ts => s.hasContextTimestamps(),\n\t\t\ts => s.contextTimestamps,\n\t\t\t(s, v) => s.setContextTimestamps(v)\n\t\t);\n\t\tthis._contextHashesOptimization = new SnapshotOptimization(\n\t\t\ts => s.hasContextHashes(),\n\t\t\ts => s.contextHashes,\n\t\t\t(s, v) => s.setContextHashes(v),\n\t\t\tfalse\n\t\t);\n\t\tthis._contextTshsOptimization = new SnapshotOptimization(\n\t\t\ts => s.hasContextTshs(),\n\t\t\ts => s.contextTshs,\n\t\t\t(s, v) => s.setContextTshs(v)\n\t\t);\n\t\tthis._missingExistenceOptimization = new SnapshotOptimization(\n\t\t\ts => s.hasMissingExistence(),\n\t\t\ts => s.missingExistence,\n\t\t\t(s, v) => s.setMissingExistence(v),\n\t\t\tfalse\n\t\t);\n\t\tthis._managedItemInfoOptimization = new SnapshotOptimization(\n\t\t\ts => s.hasManagedItemInfo(),\n\t\t\ts => s.managedItemInfo,\n\t\t\t(s, v) => s.setManagedItemInfo(v),\n\t\t\tfalse\n\t\t);\n\t\tthis._managedFilesOptimization = new SnapshotOptimization(\n\t\t\ts => s.hasManagedFiles(),\n\t\t\ts => s.managedFiles,\n\t\t\t(s, v) => s.setManagedFiles(v),\n\t\t\tfalse,\n\t\t\ttrue\n\t\t);\n\t\tthis._managedContextsOptimization = new SnapshotOptimization(\n\t\t\ts => s.hasManagedContexts(),\n\t\t\ts => s.managedContexts,\n\t\t\t(s, v) => s.setManagedContexts(v),\n\t\t\tfalse,\n\t\t\ttrue\n\t\t);\n\t\tthis._managedMissingOptimization = new SnapshotOptimization(\n\t\t\ts => s.hasManagedMissing(),\n\t\t\ts => s.managedMissing,\n\t\t\t(s, v) => s.setManagedMissing(v),\n\t\t\tfalse,\n\t\t\ttrue\n\t\t);\n\t\t/** @type {StackedCacheMap<string, FileSystemInfoEntry | \"ignore\" | null>} */\n\t\tthis._fileTimestamps = new StackedCacheMap();\n\t\t/** @type {Map<string, string>} */\n\t\tthis._fileHashes = new Map();\n\t\t/** @type {Map<string, TimestampAndHash | string>} */\n\t\tthis._fileTshs = new Map();\n\t\t/** @type {StackedCacheMap<string, ContextFileSystemInfoEntry | \"ignore\" | null>} */\n\t\tthis._contextTimestamps = new StackedCacheMap();\n\t\t/** @type {Map<string, ContextHash>} */\n\t\tthis._contextHashes = new Map();\n\t\t/** @type {Map<string, ContextTimestampAndHash>} */\n\t\tthis._contextTshs = new Map();\n\t\t/** @type {Map<string, string>} */\n\t\tthis._managedItems = new Map();\n\t\t/** @type {AsyncQueue<string, string, FileSystemInfoEntry | null>} */\n\t\tthis.fileTimestampQueue = new AsyncQueue({\n\t\t\tname: \"file timestamp\",\n\t\t\tparallelism: 30,\n\t\t\tprocessor: this._readFileTimestamp.bind(this)\n\t\t});\n\t\t/** @type {AsyncQueue<string, string, string | null>} */\n\t\tthis.fileHashQueue = new AsyncQueue({\n\t\t\tname: \"file hash\",\n\t\t\tparallelism: 10,\n\t\t\tprocessor: this._readFileHash.bind(this)\n\t\t});\n\t\t/** @type {AsyncQueue<string, string, ContextFileSystemInfoEntry | null>} */\n\t\tthis.contextTimestampQueue = new AsyncQueue({\n\t\t\tname: \"context timestamp\",\n\t\t\tparallelism: 2,\n\t\t\tprocessor: this._readContextTimestamp.bind(this)\n\t\t});\n\t\t/** @type {AsyncQueue<string, string, ContextHash | null>} */\n\t\tthis.contextHashQueue = new AsyncQueue({\n\t\t\tname: \"context hash\",\n\t\t\tparallelism: 2,\n\t\t\tprocessor: this._readContextHash.bind(this)\n\t\t});\n\t\t/** @type {AsyncQueue<string, string, ContextTimestampAndHash | null>} */\n\t\tthis.contextTshQueue = new AsyncQueue({\n\t\t\tname: \"context hash and timestamp\",\n\t\t\tparallelism: 2,\n\t\t\tprocessor: this._readContextTimestampAndHash.bind(this)\n\t\t});\n\t\t/** @type {AsyncQueue<string, string, string | null>} */\n\t\tthis.managedItemQueue = new AsyncQueue({\n\t\t\tname: \"managed item info\",\n\t\t\tparallelism: 10,\n\t\t\tprocessor: this._getManagedItemInfo.bind(this)\n\t\t});\n\t\t/** @type {AsyncQueue<string, string, Set<string>>} */\n\t\tthis.managedItemDirectoryQueue = new AsyncQueue({\n\t\t\tname: \"managed item directory info\",\n\t\t\tparallelism: 10,\n\t\t\tprocessor: this._getManagedItemDirectoryInfo.bind(this)\n\t\t});\n\t\tthis.managedPaths = Array.from(managedPaths);\n\t\tthis.managedPathsWithSlash = /** @type {string[]} */ (\n\t\t\tthis.managedPaths.filter(p => typeof p === \"string\")\n\t\t).map(p => join(fs, p, \"_\").slice(0, -1));\n\n\t\tthis.managedPathsRegExps = /** @type {RegExp[]} */ (\n\t\t\tthis.managedPaths.filter(p => typeof p !== \"string\")\n\t\t);\n\t\tthis.immutablePaths = Array.from(immutablePaths);\n\t\tthis.immutablePathsWithSlash = /** @type {string[]} */ (\n\t\t\tthis.immutablePaths.filter(p => typeof p === \"string\")\n\t\t).map(p => join(fs, p, \"_\").slice(0, -1));\n\t\tthis.immutablePathsRegExps = /** @type {RegExp[]} */ (\n\t\t\tthis.immutablePaths.filter(p => typeof p !== \"string\")\n\t\t);\n\n\t\tthis._cachedDeprecatedFileTimestamps = undefined;\n\t\tthis._cachedDeprecatedContextTimestamps = undefined;\n\n\t\tthis._warnAboutExperimentalEsmTracking = false;\n\n\t\tthis._statCreatedSnapshots = 0;\n\t\tthis._statTestedSnapshotsCached = 0;\n\t\tthis._statTestedSnapshotsNotCached = 0;\n\t\tthis._statTestedChildrenCached = 0;\n\t\tthis._statTestedChildrenNotCached = 0;\n\t\tthis._statTestedEntries = 0;\n\t}\n\n\tlogStatistics() {\n\t\tconst logWhenMessage = (header, message) => {\n\t\t\tif (message) {\n\t\t\t\tthis.logger.log(`${header}: ${message}`);\n\t\t\t}\n\t\t};\n\t\tthis.logger.log(`${this._statCreatedSnapshots} new snapshots created`);\n\t\tthis.logger.log(\n\t\t\t`${\n\t\t\t\tthis._statTestedSnapshotsNotCached &&\n\t\t\t\tMath.round(\n\t\t\t\t\t(this._statTestedSnapshotsNotCached * 100) /\n\t\t\t\t\t\t(this._statTestedSnapshotsCached +\n\t\t\t\t\t\t\tthis._statTestedSnapshotsNotCached)\n\t\t\t\t)\n\t\t\t}% root snapshot uncached (${this._statTestedSnapshotsNotCached} / ${\n\t\t\t\tthis._statTestedSnapshotsCached + this._statTestedSnapshotsNotCached\n\t\t\t})`\n\t\t);\n\t\tthis.logger.log(\n\t\t\t`${\n\t\t\t\tthis._statTestedChildrenNotCached &&\n\t\t\t\tMath.round(\n\t\t\t\t\t(this._statTestedChildrenNotCached * 100) /\n\t\t\t\t\t\t(this._statTestedChildrenCached + this._statTestedChildrenNotCached)\n\t\t\t\t)\n\t\t\t}% children snapshot uncached (${this._statTestedChildrenNotCached} / ${\n\t\t\t\tthis._statTestedChildrenCached + this._statTestedChildrenNotCached\n\t\t\t})`\n\t\t);\n\t\tthis.logger.log(`${this._statTestedEntries} entries tested`);\n\t\tthis.logger.log(\n\t\t\t`File info in cache: ${this._fileTimestamps.size} timestamps ${this._fileHashes.size} hashes ${this._fileTshs.size} timestamp hash combinations`\n\t\t);\n\t\tlogWhenMessage(\n\t\t\t`File timestamp snapshot optimization`,\n\t\t\tthis._fileTimestampsOptimization.getStatisticMessage()\n\t\t);\n\t\tlogWhenMessage(\n\t\t\t`File hash snapshot optimization`,\n\t\t\tthis._fileHashesOptimization.getStatisticMessage()\n\t\t);\n\t\tlogWhenMessage(\n\t\t\t`File timestamp hash combination snapshot optimization`,\n\t\t\tthis._fileTshsOptimization.getStatisticMessage()\n\t\t);\n\t\tthis.logger.log(\n\t\t\t`Directory info in cache: ${this._contextTimestamps.size} timestamps ${this._contextHashes.size} hashes ${this._contextTshs.size} timestamp hash combinations`\n\t\t);\n\t\tlogWhenMessage(\n\t\t\t`Directory timestamp snapshot optimization`,\n\t\t\tthis._contextTimestampsOptimization.getStatisticMessage()\n\t\t);\n\t\tlogWhenMessage(\n\t\t\t`Directory hash snapshot optimization`,\n\t\t\tthis._contextHashesOptimization.getStatisticMessage()\n\t\t);\n\t\tlogWhenMessage(\n\t\t\t`Directory timestamp hash combination snapshot optimization`,\n\t\t\tthis._contextTshsOptimization.getStatisticMessage()\n\t\t);\n\t\tlogWhenMessage(\n\t\t\t`Missing items snapshot optimization`,\n\t\t\tthis._missingExistenceOptimization.getStatisticMessage()\n\t\t);\n\t\tthis.logger.log(\n\t\t\t`Managed items info in cache: ${this._managedItems.size} items`\n\t\t);\n\t\tlogWhenMessage(\n\t\t\t`Managed items snapshot optimization`,\n\t\t\tthis._managedItemInfoOptimization.getStatisticMessage()\n\t\t);\n\t\tlogWhenMessage(\n\t\t\t`Managed files snapshot optimization`,\n\t\t\tthis._managedFilesOptimization.getStatisticMessage()\n\t\t);\n\t\tlogWhenMessage(\n\t\t\t`Managed contexts snapshot optimization`,\n\t\t\tthis._managedContextsOptimization.getStatisticMessage()\n\t\t);\n\t\tlogWhenMessage(\n\t\t\t`Managed missing snapshot optimization`,\n\t\t\tthis._managedMissingOptimization.getStatisticMessage()\n\t\t);\n\t}\n\n\t_log(path, reason, ...args) {\n\t\tconst key = path + reason;\n\t\tif (this._loggedPaths.has(key)) return;\n\t\tthis._loggedPaths.add(key);\n\t\tthis.logger.debug(`${path} invalidated because ${reason}`, ...args);\n\t\tif (--this._remainingLogs === 0) {\n\t\t\tthis.logger.debug(\n\t\t\t\t\"Logging limit has been reached and no further logging will be emitted by FileSystemInfo\"\n\t\t\t);\n\t\t}\n\t}\n\n\tclear() {\n\t\tthis._remainingLogs = this.logger ? 40 : 0;\n\t\tif (this._loggedPaths !== undefined) this._loggedPaths.clear();\n\n\t\tthis._snapshotCache = new WeakMap();\n\t\tthis._fileTimestampsOptimization.clear();\n\t\tthis._fileHashesOptimization.clear();\n\t\tthis._fileTshsOptimization.clear();\n\t\tthis._contextTimestampsOptimization.clear();\n\t\tthis._contextHashesOptimization.clear();\n\t\tthis._contextTshsOptimization.clear();\n\t\tthis._missingExistenceOptimization.clear();\n\t\tthis._managedItemInfoOptimization.clear();\n\t\tthis._managedFilesOptimization.clear();\n\t\tthis._managedContextsOptimization.clear();\n\t\tthis._managedMissingOptimization.clear();\n\t\tthis._fileTimestamps.clear();\n\t\tthis._fileHashes.clear();\n\t\tthis._fileTshs.clear();\n\t\tthis._contextTimestamps.clear();\n\t\tthis._contextHashes.clear();\n\t\tthis._contextTshs.clear();\n\t\tthis._managedItems.clear();\n\t\tthis._managedItems.clear();\n\n\t\tthis._cachedDeprecatedFileTimestamps = undefined;\n\t\tthis._cachedDeprecatedContextTimestamps = undefined;\n\n\t\tthis._statCreatedSnapshots = 0;\n\t\tthis._statTestedSnapshotsCached = 0;\n\t\tthis._statTestedSnapshotsNotCached = 0;\n\t\tthis._statTestedChildrenCached = 0;\n\t\tthis._statTestedChildrenNotCached = 0;\n\t\tthis._statTestedEntries = 0;\n\t}\n\n\t/**\n\t * @param {ReadonlyMap<string, FileSystemInfoEntry | \"ignore\" | null>} map timestamps\n\t * @param {boolean=} immutable if 'map' is immutable and FileSystemInfo can keep referencing it\n\t * @returns {void}\n\t */\n\taddFileTimestamps(map, immutable) {\n\t\tthis._fileTimestamps.addAll(map, immutable);\n\t\tthis._cachedDeprecatedFileTimestamps = undefined;\n\t}\n\n\t/**\n\t * @param {ReadonlyMap<string, FileSystemInfoEntry | \"ignore\" | null>} map timestamps\n\t * @param {boolean=} immutable if 'map' is immutable and FileSystemInfo can keep referencing it\n\t * @returns {void}\n\t */\n\taddContextTimestamps(map, immutable) {\n\t\tthis._contextTimestamps.addAll(map, immutable);\n\t\tthis._cachedDeprecatedContextTimestamps = undefined;\n\t}\n\n\t/**\n\t * @param {string} path file path\n\t * @param {function((WebpackError | null)=, (FileSystemInfoEntry | \"ignore\" | null)=): void} callback callback function\n\t * @returns {void}\n\t */\n\tgetFileTimestamp(path, callback) {\n\t\tconst cache = this._fileTimestamps.get(path);\n\t\tif (cache !== undefined) return callback(null, cache);\n\t\tthis.fileTimestampQueue.add(path, callback);\n\t}\n\n\t/**\n\t * @param {string} path context path\n\t * @param {function((WebpackError | null)=, (ResolvedContextFileSystemInfoEntry | \"ignore\" | null)=): void} callback callback function\n\t * @returns {void}\n\t */\n\tgetContextTimestamp(path, callback) {\n\t\tconst cache = this._contextTimestamps.get(path);\n\t\tif (cache !== undefined) {\n\t\t\tif (cache === \"ignore\") return callback(null, \"ignore\");\n\t\t\tconst resolved = getResolvedTimestamp(cache);\n\t\t\tif (resolved !== undefined) return callback(null, resolved);\n\t\t\treturn this._resolveContextTimestamp(cache, callback);\n\t\t}\n\t\tthis.contextTimestampQueue.add(path, (err, entry) => {\n\t\t\tif (err) return callback(err);\n\t\t\tconst resolved = getResolvedTimestamp(entry);\n\t\t\tif (resolved !== undefined) return callback(null, resolved);\n\t\t\tthis._resolveContextTimestamp(entry, callback);\n\t\t});\n\t}\n\n\t/**\n\t * @param {string} path context path\n\t * @param {function((WebpackError | null)=, (ContextFileSystemInfoEntry | \"ignore\" | null)=): void} callback callback function\n\t * @returns {void}\n\t */\n\t_getUnresolvedContextTimestamp(path, callback) {\n\t\tconst cache = this._contextTimestamps.get(path);\n\t\tif (cache !== undefined) return callback(null, cache);\n\t\tthis.contextTimestampQueue.add(path, callback);\n\t}\n\n\t/**\n\t * @param {string} path file path\n\t * @param {function((WebpackError | null)=, string=): void} callback callback function\n\t * @returns {void}\n\t */\n\tgetFileHash(path, callback) {\n\t\tconst cache = this._fileHashes.get(path);\n\t\tif (cache !== undefined) return callback(null, cache);\n\t\tthis.fileHashQueue.add(path, callback);\n\t}\n\n\t/**\n\t * @param {string} path context path\n\t * @param {function((WebpackError | null)=, string=): void} callback callback function\n\t * @returns {void}\n\t */\n\tgetContextHash(path, callback) {\n\t\tconst cache = this._contextHashes.get(path);\n\t\tif (cache !== undefined) {\n\t\t\tconst resolved = getResolvedHash(cache);\n\t\t\tif (resolved !== undefined) return callback(null, resolved);\n\t\t\treturn this._resolveContextHash(cache, callback);\n\t\t}\n\t\tthis.contextHashQueue.add(path, (err, entry) => {\n\t\t\tif (err) return callback(err);\n\t\t\tconst resolved = getResolvedHash(entry);\n\t\t\tif (resolved !== undefined) return callback(null, resolved);\n\t\t\tthis._resolveContextHash(entry, callback);\n\t\t});\n\t}\n\n\t/**\n\t * @param {string} path context path\n\t * @param {function((WebpackError | null)=, ContextHash=): void} callback callback function\n\t * @returns {void}\n\t */\n\t_getUnresolvedContextHash(path, callback) {\n\t\tconst cache = this._contextHashes.get(path);\n\t\tif (cache !== undefined) return callback(null, cache);\n\t\tthis.contextHashQueue.add(path, callback);\n\t}\n\n\t/**\n\t * @param {string} path context path\n\t * @param {function((WebpackError | null)=, ResolvedContextTimestampAndHash=): void} callback callback function\n\t * @returns {void}\n\t */\n\tgetContextTsh(path, callback) {\n\t\tconst cache = this._contextTshs.get(path);\n\t\tif (cache !== undefined) {\n\t\t\tconst resolved = getResolvedTimestamp(cache);\n\t\t\tif (resolved !== undefined) return callback(null, resolved);\n\t\t\treturn this._resolveContextTsh(cache, callback);\n\t\t}\n\t\tthis.contextTshQueue.add(path, (err, entry) => {\n\t\t\tif (err) return callback(err);\n\t\t\tconst resolved = getResolvedTimestamp(entry);\n\t\t\tif (resolved !== undefined) return callback(null, resolved);\n\t\t\tthis._resolveContextTsh(entry, callback);\n\t\t});\n\t}\n\n\t/**\n\t * @param {string} path context path\n\t * @param {function((WebpackError | null)=, ContextTimestampAndHash=): void} callback callback function\n\t * @returns {void}\n\t */\n\t_getUnresolvedContextTsh(path, callback) {\n\t\tconst cache = this._contextTshs.get(path);\n\t\tif (cache !== undefined) return callback(null, cache);\n\t\tthis.contextTshQueue.add(path, callback);\n\t}\n\n\t_createBuildDependenciesResolvers() {\n\t\tconst resolveContext = createResolver({\n\t\t\tresolveToContext: true,\n\t\t\texportsFields: [],\n\t\t\tfileSystem: this.fs\n\t\t});\n\t\tconst resolveCjs = createResolver({\n\t\t\textensions: [\".js\", \".json\", \".node\"],\n\t\t\tconditionNames: [\"require\", \"node\"],\n\t\t\texportsFields: [\"exports\"],\n\t\t\tfileSystem: this.fs\n\t\t});\n\t\tconst resolveCjsAsChild = createResolver({\n\t\t\textensions: [\".js\", \".json\", \".node\"],\n\t\t\tconditionNames: [\"require\", \"node\"],\n\t\t\texportsFields: [],\n\t\t\tfileSystem: this.fs\n\t\t});\n\t\tconst resolveEsm = createResolver({\n\t\t\textensions: [\".js\", \".json\", \".node\"],\n\t\t\tfullySpecified: true,\n\t\t\tconditionNames: [\"import\", \"node\"],\n\t\t\texportsFields: [\"exports\"],\n\t\t\tfileSystem: this.fs\n\t\t});\n\t\treturn { resolveContext, resolveEsm, resolveCjs, resolveCjsAsChild };\n\t}\n\n\t/**\n\t * @param {string} context context directory\n\t * @param {Iterable<string>} deps dependencies\n\t * @param {function((Error | null)=, ResolveBuildDependenciesResult=): void} callback callback function\n\t * @returns {void}\n\t */\n\tresolveBuildDependencies(context, deps, callback) {\n\t\tconst { resolveContext, resolveEsm, resolveCjs, resolveCjsAsChild } =\n\t\t\tthis._createBuildDependenciesResolvers();\n\n\t\t/** @type {Set<string>} */\n\t\tconst files = new Set();\n\t\t/** @type {Set<string>} */\n\t\tconst fileSymlinks = new Set();\n\t\t/** @type {Set<string>} */\n\t\tconst directories = new Set();\n\t\t/** @type {Set<string>} */\n\t\tconst directorySymlinks = new Set();\n\t\t/** @type {Set<string>} */\n\t\tconst missing = new Set();\n\t\t/** @type {Set<string>} */\n\t\tconst resolveFiles = new Set();\n\t\t/** @type {Set<string>} */\n\t\tconst resolveDirectories = new Set();\n\t\t/** @type {Set<string>} */\n\t\tconst resolveMissing = new Set();\n\t\t/** @type {Map<string, string | false>} */\n\t\tconst resolveResults = new Map();\n\t\tconst invalidResolveResults = new Set();\n\t\tconst resolverContext = {\n\t\t\tfileDependencies: resolveFiles,\n\t\t\tcontextDependencies: resolveDirectories,\n\t\t\tmissingDependencies: resolveMissing\n\t\t};\n\t\tconst expectedToString = expected => {\n\t\t\treturn expected ? ` (expected ${expected})` : \"\";\n\t\t};\n\t\tconst jobToString = job => {\n\t\t\tswitch (job.type) {\n\t\t\t\tcase RBDT_RESOLVE_CJS:\n\t\t\t\t\treturn `resolve commonjs ${job.path}${expectedToString(\n\t\t\t\t\t\tjob.expected\n\t\t\t\t\t)}`;\n\t\t\t\tcase RBDT_RESOLVE_ESM:\n\t\t\t\t\treturn `resolve esm ${job.path}${expectedToString(job.expected)}`;\n\t\t\t\tcase RBDT_RESOLVE_DIRECTORY:\n\t\t\t\t\treturn `resolve directory ${job.path}`;\n\t\t\t\tcase RBDT_RESOLVE_CJS_FILE:\n\t\t\t\t\treturn `resolve commonjs file ${job.path}${expectedToString(\n\t\t\t\t\t\tjob.expected\n\t\t\t\t\t)}`;\n\t\t\t\tcase RBDT_RESOLVE_ESM_FILE:\n\t\t\t\t\treturn `resolve esm file ${job.path}${expectedToString(\n\t\t\t\t\t\tjob.expected\n\t\t\t\t\t)}`;\n\t\t\t\tcase RBDT_DIRECTORY:\n\t\t\t\t\treturn `directory ${job.path}`;\n\t\t\t\tcase RBDT_FILE:\n\t\t\t\t\treturn `file ${job.path}`;\n\t\t\t\tcase RBDT_DIRECTORY_DEPENDENCIES:\n\t\t\t\t\treturn `directory dependencies ${job.path}`;\n\t\t\t\tcase RBDT_FILE_DEPENDENCIES:\n\t\t\t\t\treturn `file dependencies ${job.path}`;\n\t\t\t}\n\t\t\treturn `unknown ${job.type} ${job.path}`;\n\t\t};\n\t\tconst pathToString = job => {\n\t\t\tlet result = ` at ${jobToString(job)}`;\n\t\t\tjob = job.issuer;\n\t\t\twhile (job !== undefined) {\n\t\t\t\tresult += `\\n at ${jobToString(job)}`;\n\t\t\t\tjob = job.issuer;\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\t\tprocessAsyncTree(\n\t\t\tArray.from(deps, dep => ({\n\t\t\t\ttype: RBDT_RESOLVE_CJS,\n\t\t\t\tcontext,\n\t\t\t\tpath: dep,\n\t\t\t\texpected: undefined,\n\t\t\t\tissuer: undefined\n\t\t\t})),\n\t\t\t20,\n\t\t\t(job, push, callback) => {\n\t\t\t\tconst { type, context, path, expected } = job;\n\t\t\t\tconst resolveDirectory = path => {\n\t\t\t\t\tconst key = `d\\n${context}\\n${path}`;\n\t\t\t\t\tif (resolveResults.has(key)) {\n\t\t\t\t\t\treturn callback();\n\t\t\t\t\t}\n\t\t\t\t\tresolveResults.set(key, undefined);\n\t\t\t\t\tresolveContext(context, path, resolverContext, (err, _, result) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tif (expected === false) {\n\t\t\t\t\t\t\t\tresolveResults.set(key, false);\n\t\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tinvalidResolveResults.add(key);\n\t\t\t\t\t\t\terr.message += `\\nwhile resolving '${path}' in ${context} to a directory`;\n\t\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst resultPath = result.path;\n\t\t\t\t\t\tresolveResults.set(key, resultPath);\n\t\t\t\t\t\tpush({\n\t\t\t\t\t\t\ttype: RBDT_DIRECTORY,\n\t\t\t\t\t\t\tcontext: undefined,\n\t\t\t\t\t\t\tpath: resultPath,\n\t\t\t\t\t\t\texpected: undefined,\n\t\t\t\t\t\t\tissuer: job\n\t\t\t\t\t\t});\n\t\t\t\t\t\tcallback();\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t\tconst resolveFile = (path, symbol, resolve) => {\n\t\t\t\t\tconst key = `${symbol}\\n${context}\\n${path}`;\n\t\t\t\t\tif (resolveResults.has(key)) {\n\t\t\t\t\t\treturn callback();\n\t\t\t\t\t}\n\t\t\t\t\tresolveResults.set(key, undefined);\n\t\t\t\t\tresolve(context, path, resolverContext, (err, _, result) => {\n\t\t\t\t\t\tif (typeof expected === \"string\") {\n\t\t\t\t\t\t\tif (!err && result && result.path === expected) {\n\t\t\t\t\t\t\t\tresolveResults.set(key, result.path);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tinvalidResolveResults.add(key);\n\t\t\t\t\t\t\t\tthis.logger.warn(\n\t\t\t\t\t\t\t\t\t`Resolving '${path}' in ${context} for build dependencies doesn't lead to expected result '${expected}', but to '${\n\t\t\t\t\t\t\t\t\t\terr || (result && result.path)\n\t\t\t\t\t\t\t\t\t}' instead. Resolving dependencies are ignored for this path.\\n${pathToString(\n\t\t\t\t\t\t\t\t\t\tjob\n\t\t\t\t\t\t\t\t\t)}`\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\tif (expected === false) {\n\t\t\t\t\t\t\t\t\tresolveResults.set(key, false);\n\t\t\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tinvalidResolveResults.add(key);\n\t\t\t\t\t\t\t\terr.message += `\\nwhile resolving '${path}' in ${context} as file\\n${pathToString(\n\t\t\t\t\t\t\t\t\tjob\n\t\t\t\t\t\t\t\t)}`;\n\t\t\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst resultPath = result.path;\n\t\t\t\t\t\t\tresolveResults.set(key, resultPath);\n\t\t\t\t\t\t\tpush({\n\t\t\t\t\t\t\t\ttype: RBDT_FILE,\n\t\t\t\t\t\t\t\tcontext: undefined,\n\t\t\t\t\t\t\t\tpath: resultPath,\n\t\t\t\t\t\t\t\texpected: undefined,\n\t\t\t\t\t\t\t\tissuer: job\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcallback();\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase RBDT_RESOLVE_CJS: {\n\t\t\t\t\t\tconst isDirectory = /[\\\\/]$/.test(path);\n\t\t\t\t\t\tif (isDirectory) {\n\t\t\t\t\t\t\tresolveDirectory(path.slice(0, path.length - 1));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresolveFile(path, \"f\", resolveCjs);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase RBDT_RESOLVE_ESM: {\n\t\t\t\t\t\tconst isDirectory = /[\\\\/]$/.test(path);\n\t\t\t\t\t\tif (isDirectory) {\n\t\t\t\t\t\t\tresolveDirectory(path.slice(0, path.length - 1));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresolveFile(path);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase RBDT_RESOLVE_DIRECTORY: {\n\t\t\t\t\t\tresolveDirectory(path);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase RBDT_RESOLVE_CJS_FILE: {\n\t\t\t\t\t\tresolveFile(path, \"f\", resolveCjs);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase RBDT_RESOLVE_CJS_FILE_AS_CHILD: {\n\t\t\t\t\t\tresolveFile(path, \"c\", resolveCjsAsChild);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase RBDT_RESOLVE_ESM_FILE: {\n\t\t\t\t\t\tresolveFile(path, \"e\", resolveEsm);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase RBDT_FILE: {\n\t\t\t\t\t\tif (files.has(path)) {\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfiles.add(path);\n\t\t\t\t\t\tthis.fs.realpath(path, (err, _realPath) => {\n\t\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\t\tconst realPath = /** @type {string} */ (_realPath);\n\t\t\t\t\t\t\tif (realPath !== path) {\n\t\t\t\t\t\t\t\tfileSymlinks.add(path);\n\t\t\t\t\t\t\t\tresolveFiles.add(path);\n\t\t\t\t\t\t\t\tif (files.has(realPath)) return callback();\n\t\t\t\t\t\t\t\tfiles.add(realPath);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpush({\n\t\t\t\t\t\t\t\ttype: RBDT_FILE_DEPENDENCIES,\n\t\t\t\t\t\t\t\tcontext: undefined,\n\t\t\t\t\t\t\t\tpath: realPath,\n\t\t\t\t\t\t\t\texpected: undefined,\n\t\t\t\t\t\t\t\tissuer: job\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase RBDT_DIRECTORY: {\n\t\t\t\t\t\tif (directories.has(path)) {\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdirectories.add(path);\n\t\t\t\t\t\tthis.fs.realpath(path, (err, _realPath) => {\n\t\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\t\tconst realPath = /** @type {string} */ (_realPath);\n\t\t\t\t\t\t\tif (realPath !== path) {\n\t\t\t\t\t\t\t\tdirectorySymlinks.add(path);\n\t\t\t\t\t\t\t\tresolveFiles.add(path);\n\t\t\t\t\t\t\t\tif (directories.has(realPath)) return callback();\n\t\t\t\t\t\t\t\tdirectories.add(realPath);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpush({\n\t\t\t\t\t\t\t\ttype: RBDT_DIRECTORY_DEPENDENCIES,\n\t\t\t\t\t\t\t\tcontext: undefined,\n\t\t\t\t\t\t\t\tpath: realPath,\n\t\t\t\t\t\t\t\texpected: undefined,\n\t\t\t\t\t\t\t\tissuer: job\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase RBDT_FILE_DEPENDENCIES: {\n\t\t\t\t\t\t// Check for known files without dependencies\n\t\t\t\t\t\tif (/\\.json5?$|\\.yarn-integrity$|yarn\\.lock$|\\.ya?ml/.test(path)) {\n\t\t\t\t\t\t\tprocess.nextTick(callback);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Check commonjs cache for the module\n\t\t\t\t\t\t/** @type {NodeModule} */\n\t\t\t\t\t\tconst module = require.cache[path];\n\t\t\t\t\t\tif (module && Array.isArray(module.children)) {\n\t\t\t\t\t\t\tchildren: for (const child of module.children) {\n\t\t\t\t\t\t\t\tlet childPath = child.filename;\n\t\t\t\t\t\t\t\tif (childPath) {\n\t\t\t\t\t\t\t\t\tpush({\n\t\t\t\t\t\t\t\t\t\ttype: RBDT_FILE,\n\t\t\t\t\t\t\t\t\t\tcontext: undefined,\n\t\t\t\t\t\t\t\t\t\tpath: childPath,\n\t\t\t\t\t\t\t\t\t\texpected: undefined,\n\t\t\t\t\t\t\t\t\t\tissuer: job\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tconst context = dirname(this.fs, path);\n\t\t\t\t\t\t\t\t\tfor (const modulePath of module.paths) {\n\t\t\t\t\t\t\t\t\t\tif (childPath.startsWith(modulePath)) {\n\t\t\t\t\t\t\t\t\t\t\tlet subPath = childPath.slice(modulePath.length + 1);\n\t\t\t\t\t\t\t\t\t\t\tconst packageMatch = /^(@[^\\\\/]+[\\\\/])[^\\\\/]+/.exec(\n\t\t\t\t\t\t\t\t\t\t\t\tsubPath\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\tif (packageMatch) {\n\t\t\t\t\t\t\t\t\t\t\t\tpush({\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype: RBDT_FILE,\n\t\t\t\t\t\t\t\t\t\t\t\t\tcontext: undefined,\n\t\t\t\t\t\t\t\t\t\t\t\t\tpath:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodulePath +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tchildPath[modulePath.length] +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpackageMatch[0] +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tchildPath[modulePath.length] +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"package.json\",\n\t\t\t\t\t\t\t\t\t\t\t\t\texpected: false,\n\t\t\t\t\t\t\t\t\t\t\t\t\tissuer: job\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tlet request = subPath.replace(/\\\\/g, \"/\");\n\t\t\t\t\t\t\t\t\t\t\tif (request.endsWith(\".js\"))\n\t\t\t\t\t\t\t\t\t\t\t\trequest = request.slice(0, -3);\n\t\t\t\t\t\t\t\t\t\t\tpush({\n\t\t\t\t\t\t\t\t\t\t\t\ttype: RBDT_RESOLVE_CJS_FILE_AS_CHILD,\n\t\t\t\t\t\t\t\t\t\t\t\tcontext,\n\t\t\t\t\t\t\t\t\t\t\t\tpath: request,\n\t\t\t\t\t\t\t\t\t\t\t\texpected: child.filename,\n\t\t\t\t\t\t\t\t\t\t\t\tissuer: job\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\tcontinue children;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tlet request = relative(this.fs, context, childPath);\n\t\t\t\t\t\t\t\t\tif (request.endsWith(\".js\")) request = request.slice(0, -3);\n\t\t\t\t\t\t\t\t\trequest = request.replace(/\\\\/g, \"/\");\n\t\t\t\t\t\t\t\t\tif (!request.startsWith(\"../\") && !isAbsolute(request)) {\n\t\t\t\t\t\t\t\t\t\trequest = `./${request}`;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tpush({\n\t\t\t\t\t\t\t\t\t\ttype: RBDT_RESOLVE_CJS_FILE,\n\t\t\t\t\t\t\t\t\t\tcontext,\n\t\t\t\t\t\t\t\t\t\tpath: request,\n\t\t\t\t\t\t\t\t\t\texpected: child.filename,\n\t\t\t\t\t\t\t\t\t\tissuer: job\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (supportsEsm && /\\.m?js$/.test(path)) {\n\t\t\t\t\t\t\tif (!this._warnAboutExperimentalEsmTracking) {\n\t\t\t\t\t\t\t\tthis.logger.log(\n\t\t\t\t\t\t\t\t\t\"Node.js doesn't offer a (nice) way to introspect the ESM dependency graph yet.\\n\" +\n\t\t\t\t\t\t\t\t\t\t\"Until a full solution is available webpack uses an experimental ESM tracking based on parsing.\\n\" +\n\t\t\t\t\t\t\t\t\t\t\"As best effort webpack parses the ESM files to guess dependencies. But this can lead to expensive and incorrect tracking.\"\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tthis._warnAboutExperimentalEsmTracking = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst lexer = require(\"es-module-lexer\");\n\t\t\t\t\t\t\tlexer.init.then(() => {\n\t\t\t\t\t\t\t\tthis.fs.readFile(path, (err, content) => {\n\t\t\t\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tconst context = dirname(this.fs, path);\n\t\t\t\t\t\t\t\t\t\tconst source = content.toString();\n\t\t\t\t\t\t\t\t\t\tconst [imports] = lexer.parse(source);\n\t\t\t\t\t\t\t\t\t\tfor (const imp of imports) {\n\t\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\t\tlet dependency;\n\t\t\t\t\t\t\t\t\t\t\t\tif (imp.d === -1) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t// import ... from \"...\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tdependency = parseString(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsource.substring(imp.s - 1, imp.e + 1)\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t} else if (imp.d > -1) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t// import()\n\t\t\t\t\t\t\t\t\t\t\t\t\tlet expr = source.substring(imp.s, imp.e).trim();\n\t\t\t\t\t\t\t\t\t\t\t\t\tdependency = parseString(expr);\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t// e.g. import.meta\n\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t// we should not track Node.js build dependencies\n\t\t\t\t\t\t\t\t\t\t\t\tif (dependency.startsWith(\"node:\")) continue;\n\t\t\t\t\t\t\t\t\t\t\t\tif (builtinModules.has(dependency)) continue;\n\n\t\t\t\t\t\t\t\t\t\t\t\tpush({\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype: RBDT_RESOLVE_ESM_FILE,\n\t\t\t\t\t\t\t\t\t\t\t\t\tcontext,\n\t\t\t\t\t\t\t\t\t\t\t\t\tpath: dependency,\n\t\t\t\t\t\t\t\t\t\t\t\t\texpected: undefined,\n\t\t\t\t\t\t\t\t\t\t\t\t\tissuer: job\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\t\t\tthis.logger.warn(\n\t\t\t\t\t\t\t\t\t\t\t\t\t`Parsing of ${path} for build dependencies failed at 'import(${source.substring(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\timp.s,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\timp.e\n\t\t\t\t\t\t\t\t\t\t\t\t\t)})'.\\n` +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Build dependencies behind this expression are ignored and might cause incorrect cache invalidation.\"\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\tthis.logger.debug(pathToString(job));\n\t\t\t\t\t\t\t\t\t\t\t\tthis.logger.debug(e.stack);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\tthis.logger.warn(\n\t\t\t\t\t\t\t\t\t\t\t`Parsing of ${path} for build dependencies failed and all dependencies of this file are ignored, which might cause incorrect cache invalidation..`\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tthis.logger.debug(pathToString(job));\n\t\t\t\t\t\t\t\t\t\tthis.logger.debug(e.stack);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tprocess.nextTick(callback);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}, callback);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.logger.log(\n\t\t\t\t\t\t\t\t`Assuming ${path} has no dependencies as we were unable to assign it to any module system.`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tthis.logger.debug(pathToString(job));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprocess.nextTick(callback);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase RBDT_DIRECTORY_DEPENDENCIES: {\n\t\t\t\t\t\tconst match =\n\t\t\t\t\t\t\t/(^.+[\\\\/]node_modules[\\\\/](?:@[^\\\\/]+[\\\\/])?[^\\\\/]+)/.exec(path);\n\t\t\t\t\t\tconst packagePath = match ? match[1] : path;\n\t\t\t\t\t\tconst packageJson = join(this.fs, packagePath, \"package.json\");\n\t\t\t\t\t\tthis.fs.readFile(packageJson, (err, content) => {\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\tif (err.code === \"ENOENT\") {\n\t\t\t\t\t\t\t\t\tresolveMissing.add(packageJson);\n\t\t\t\t\t\t\t\t\tconst parent = dirname(this.fs, packagePath);\n\t\t\t\t\t\t\t\t\tif (parent !== packagePath) {\n\t\t\t\t\t\t\t\t\t\tpush({\n\t\t\t\t\t\t\t\t\t\t\ttype: RBDT_DIRECTORY_DEPENDENCIES,\n\t\t\t\t\t\t\t\t\t\t\tcontext: undefined,\n\t\t\t\t\t\t\t\t\t\t\tpath: parent,\n\t\t\t\t\t\t\t\t\t\t\texpected: undefined,\n\t\t\t\t\t\t\t\t\t\t\tissuer: job\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresolveFiles.add(packageJson);\n\t\t\t\t\t\t\tlet packageData;\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tpackageData = JSON.parse(content.toString(\"utf-8\"));\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\treturn callback(e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst depsObject = packageData.dependencies;\n\t\t\t\t\t\t\tconst optionalDepsObject = packageData.optionalDependencies;\n\t\t\t\t\t\t\tconst allDeps = new Set();\n\t\t\t\t\t\t\tconst optionalDeps = new Set();\n\t\t\t\t\t\t\tif (typeof depsObject === \"object\" && depsObject) {\n\t\t\t\t\t\t\t\tfor (const dep of Object.keys(depsObject)) {\n\t\t\t\t\t\t\t\t\tallDeps.add(dep);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\ttypeof optionalDepsObject === \"object\" &&\n\t\t\t\t\t\t\t\toptionalDepsObject\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tfor (const dep of Object.keys(optionalDepsObject)) {\n\t\t\t\t\t\t\t\t\tallDeps.add(dep);\n\t\t\t\t\t\t\t\t\toptionalDeps.add(dep);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor (const dep of allDeps) {\n\t\t\t\t\t\t\t\tpush({\n\t\t\t\t\t\t\t\t\ttype: RBDT_RESOLVE_DIRECTORY,\n\t\t\t\t\t\t\t\t\tcontext: packagePath,\n\t\t\t\t\t\t\t\t\tpath: dep,\n\t\t\t\t\t\t\t\t\texpected: !optionalDeps.has(dep),\n\t\t\t\t\t\t\t\t\tissuer: job\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tif (err) return callback(err);\n\t\t\t\tfor (const l of fileSymlinks) files.delete(l);\n\t\t\t\tfor (const l of directorySymlinks) directories.delete(l);\n\t\t\t\tfor (const k of invalidResolveResults) resolveResults.delete(k);\n\t\t\t\tcallback(null, {\n\t\t\t\t\tfiles,\n\t\t\t\t\tdirectories,\n\t\t\t\t\tmissing,\n\t\t\t\t\tresolveResults,\n\t\t\t\t\tresolveDependencies: {\n\t\t\t\t\t\tfiles: resolveFiles,\n\t\t\t\t\t\tdirectories: resolveDirectories,\n\t\t\t\t\t\tmissing: resolveMissing\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n\n\t/**\n\t * @param {Map<string, string | false>} resolveResults results from resolving\n\t * @param {function((Error | null)=, boolean=): void} callback callback with true when resolveResults resolve the same way\n\t * @returns {void}\n\t */\n\tcheckResolveResultsValid(resolveResults, callback) {\n\t\tconst { resolveCjs, resolveCjsAsChild, resolveEsm, resolveContext } =\n\t\t\tthis._createBuildDependenciesResolvers();\n\t\tasyncLib.eachLimit(\n\t\t\tresolveResults,\n\t\t\t20,\n\t\t\t([key, expectedResult], callback) => {\n\t\t\t\tconst [type, context, path] = key.split(\"\\n\");\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase \"d\":\n\t\t\t\t\t\tresolveContext(context, path, {}, (err, _, result) => {\n\t\t\t\t\t\t\tif (expectedResult === false)\n\t\t\t\t\t\t\t\treturn callback(err ? undefined : INVALID);\n\t\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\t\tconst resultPath = result.path;\n\t\t\t\t\t\t\tif (resultPath !== expectedResult) return callback(INVALID);\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"f\":\n\t\t\t\t\t\tresolveCjs(context, path, {}, (err, _, result) => {\n\t\t\t\t\t\t\tif (expectedResult === false)\n\t\t\t\t\t\t\t\treturn callback(err ? undefined : INVALID);\n\t\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\t\tconst resultPath = result.path;\n\t\t\t\t\t\t\tif (resultPath !== expectedResult) return callback(INVALID);\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"c\":\n\t\t\t\t\t\tresolveCjsAsChild(context, path, {}, (err, _, result) => {\n\t\t\t\t\t\t\tif (expectedResult === false)\n\t\t\t\t\t\t\t\treturn callback(err ? undefined : INVALID);\n\t\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\t\tconst resultPath = result.path;\n\t\t\t\t\t\t\tif (resultPath !== expectedResult) return callback(INVALID);\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"e\":\n\t\t\t\t\t\tresolveEsm(context, path, {}, (err, _, result) => {\n\t\t\t\t\t\t\tif (expectedResult === false)\n\t\t\t\t\t\t\t\treturn callback(err ? undefined : INVALID);\n\t\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\t\tconst resultPath = result.path;\n\t\t\t\t\t\t\tif (resultPath !== expectedResult) return callback(INVALID);\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tcallback(new Error(\"Unexpected type in resolve result key\"));\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t},\n\t\t\t/**\n\t\t\t * @param {Error | typeof INVALID=} err error or invalid flag\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\terr => {\n\t\t\t\tif (err === INVALID) {\n\t\t\t\t\treturn callback(null, false);\n\t\t\t\t}\n\t\t\t\tif (err) {\n\t\t\t\t\treturn callback(err);\n\t\t\t\t}\n\t\t\t\treturn callback(null, true);\n\t\t\t}\n\t\t);\n\t}\n\n\t/**\n\t *\n\t * @param {number} startTime when processing the files has started\n\t * @param {Iterable<string>} files all files\n\t * @param {Iterable<string>} directories all directories\n\t * @param {Iterable<string>} missing all missing files or directories\n\t * @param {Object} options options object (for future extensions)\n\t * @param {boolean=} options.hash should use hash to snapshot\n\t * @param {boolean=} options.timestamp should use timestamp to snapshot\n\t * @param {function((WebpackError | null)=, (Snapshot | null)=): void} callback callback function\n\t * @returns {void}\n\t */\n\tcreateSnapshot(startTime, files, directories, missing, options, callback) {\n\t\t/** @type {Map<string, FileSystemInfoEntry | null>} */\n\t\tconst fileTimestamps = new Map();\n\t\t/** @type {Map<string, string | null>} */\n\t\tconst fileHashes = new Map();\n\t\t/** @type {Map<string, TimestampAndHash | string | null>} */\n\t\tconst fileTshs = new Map();\n\t\t/** @type {Map<string, FileSystemInfoEntry | null>} */\n\t\tconst contextTimestamps = new Map();\n\t\t/** @type {Map<string, string | null>} */\n\t\tconst contextHashes = new Map();\n\t\t/** @type {Map<string, ResolvedContextTimestampAndHash | null>} */\n\t\tconst contextTshs = new Map();\n\t\t/** @type {Map<string, boolean>} */\n\t\tconst missingExistence = new Map();\n\t\t/** @type {Map<string, string>} */\n\t\tconst managedItemInfo = new Map();\n\t\t/** @type {Set<string>} */\n\t\tconst managedFiles = new Set();\n\t\t/** @type {Set<string>} */\n\t\tconst managedContexts = new Set();\n\t\t/** @type {Set<string>} */\n\t\tconst managedMissing = new Set();\n\t\t/** @type {Set<Snapshot>} */\n\t\tconst children = new Set();\n\n\t\tconst snapshot = new Snapshot();\n\t\tif (startTime) snapshot.setStartTime(startTime);\n\n\t\t/** @type {Set<string>} */\n\t\tconst managedItems = new Set();\n\n\t\t/** 1 = timestamp, 2 = hash, 3 = timestamp + hash */\n\t\tconst mode = options && options.hash ? (options.timestamp ? 3 : 2) : 1;\n\n\t\tlet jobs = 1;\n\t\tconst jobDone = () => {\n\t\t\tif (--jobs === 0) {\n\t\t\t\tif (fileTimestamps.size !== 0) {\n\t\t\t\t\tsnapshot.setFileTimestamps(fileTimestamps);\n\t\t\t\t}\n\t\t\t\tif (fileHashes.size !== 0) {\n\t\t\t\t\tsnapshot.setFileHashes(fileHashes);\n\t\t\t\t}\n\t\t\t\tif (fileTshs.size !== 0) {\n\t\t\t\t\tsnapshot.setFileTshs(fileTshs);\n\t\t\t\t}\n\t\t\t\tif (contextTimestamps.size !== 0) {\n\t\t\t\t\tsnapshot.setContextTimestamps(contextTimestamps);\n\t\t\t\t}\n\t\t\t\tif (contextHashes.size !== 0) {\n\t\t\t\t\tsnapshot.setContextHashes(contextHashes);\n\t\t\t\t}\n\t\t\t\tif (contextTshs.size !== 0) {\n\t\t\t\t\tsnapshot.setContextTshs(contextTshs);\n\t\t\t\t}\n\t\t\t\tif (missingExistence.size !== 0) {\n\t\t\t\t\tsnapshot.setMissingExistence(missingExistence);\n\t\t\t\t}\n\t\t\t\tif (managedItemInfo.size !== 0) {\n\t\t\t\t\tsnapshot.setManagedItemInfo(managedItemInfo);\n\t\t\t\t}\n\t\t\t\tthis._managedFilesOptimization.optimize(snapshot, managedFiles);\n\t\t\t\tif (managedFiles.size !== 0) {\n\t\t\t\t\tsnapshot.setManagedFiles(managedFiles);\n\t\t\t\t}\n\t\t\t\tthis._managedContextsOptimization.optimize(snapshot, managedContexts);\n\t\t\t\tif (managedContexts.size !== 0) {\n\t\t\t\t\tsnapshot.setManagedContexts(managedContexts);\n\t\t\t\t}\n\t\t\t\tthis._managedMissingOptimization.optimize(snapshot, managedMissing);\n\t\t\t\tif (managedMissing.size !== 0) {\n\t\t\t\t\tsnapshot.setManagedMissing(managedMissing);\n\t\t\t\t}\n\t\t\t\tif (children.size !== 0) {\n\t\t\t\t\tsnapshot.setChildren(children);\n\t\t\t\t}\n\t\t\t\tthis._snapshotCache.set(snapshot, true);\n\t\t\t\tthis._statCreatedSnapshots++;\n\n\t\t\t\tcallback(null, snapshot);\n\t\t\t}\n\t\t};\n\t\tconst jobError = () => {\n\t\t\tif (jobs > 0) {\n\t\t\t\t// large negative number instead of NaN or something else to keep jobs to stay a SMI (v8)\n\t\t\t\tjobs = -100000000;\n\t\t\t\tcallback(null, null);\n\t\t\t}\n\t\t};\n\t\tconst checkManaged = (path, managedSet) => {\n\t\t\tfor (const immutablePath of this.immutablePathsRegExps) {\n\t\t\t\tif (immutablePath.test(path)) {\n\t\t\t\t\tmanagedSet.add(path);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const immutablePath of this.immutablePathsWithSlash) {\n\t\t\t\tif (path.startsWith(immutablePath)) {\n\t\t\t\t\tmanagedSet.add(path);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const managedPath of this.managedPathsRegExps) {\n\t\t\t\tconst match = managedPath.exec(path);\n\t\t\t\tif (match) {\n\t\t\t\t\tconst managedItem = getManagedItem(match[1], path);\n\t\t\t\t\tif (managedItem) {\n\t\t\t\t\t\tmanagedItems.add(managedItem);\n\t\t\t\t\t\tmanagedSet.add(path);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const managedPath of this.managedPathsWithSlash) {\n\t\t\t\tif (path.startsWith(managedPath)) {\n\t\t\t\t\tconst managedItem = getManagedItem(managedPath, path);\n\t\t\t\t\tif (managedItem) {\n\t\t\t\t\t\tmanagedItems.add(managedItem);\n\t\t\t\t\t\tmanagedSet.add(path);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\t\tconst captureNonManaged = (items, managedSet) => {\n\t\t\tconst capturedItems = new Set();\n\t\t\tfor (const path of items) {\n\t\t\t\tif (!checkManaged(path, managedSet)) capturedItems.add(path);\n\t\t\t}\n\t\t\treturn capturedItems;\n\t\t};\n\t\tconst processCapturedFiles = capturedFiles => {\n\t\t\tswitch (mode) {\n\t\t\t\tcase 3:\n\t\t\t\t\tthis._fileTshsOptimization.optimize(snapshot, capturedFiles);\n\t\t\t\t\tfor (const path of capturedFiles) {\n\t\t\t\t\t\tconst cache = this._fileTshs.get(path);\n\t\t\t\t\t\tif (cache !== undefined) {\n\t\t\t\t\t\t\tfileTshs.set(path, cache);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tjobs++;\n\t\t\t\t\t\t\tthis._getFileTimestampAndHash(path, (err, entry) => {\n\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\tif (this.logger) {\n\t\t\t\t\t\t\t\t\t\tthis.logger.debug(\n\t\t\t\t\t\t\t\t\t\t\t`Error snapshotting file timestamp hash combination of ${path}: ${err.stack}`\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tjobError();\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tfileTshs.set(path, entry);\n\t\t\t\t\t\t\t\t\tjobDone();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tthis._fileHashesOptimization.optimize(snapshot, capturedFiles);\n\t\t\t\t\tfor (const path of capturedFiles) {\n\t\t\t\t\t\tconst cache = this._fileHashes.get(path);\n\t\t\t\t\t\tif (cache !== undefined) {\n\t\t\t\t\t\t\tfileHashes.set(path, cache);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tjobs++;\n\t\t\t\t\t\t\tthis.fileHashQueue.add(path, (err, entry) => {\n\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\tif (this.logger) {\n\t\t\t\t\t\t\t\t\t\tthis.logger.debug(\n\t\t\t\t\t\t\t\t\t\t\t`Error snapshotting file hash of ${path}: ${err.stack}`\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tjobError();\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tfileHashes.set(path, entry);\n\t\t\t\t\t\t\t\t\tjobDone();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tthis._fileTimestampsOptimization.optimize(snapshot, capturedFiles);\n\t\t\t\t\tfor (const path of capturedFiles) {\n\t\t\t\t\t\tconst cache = this._fileTimestamps.get(path);\n\t\t\t\t\t\tif (cache !== undefined) {\n\t\t\t\t\t\t\tif (cache !== \"ignore\") {\n\t\t\t\t\t\t\t\tfileTimestamps.set(path, cache);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tjobs++;\n\t\t\t\t\t\t\tthis.fileTimestampQueue.add(path, (err, entry) => {\n\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\tif (this.logger) {\n\t\t\t\t\t\t\t\t\t\tthis.logger.debug(\n\t\t\t\t\t\t\t\t\t\t\t`Error snapshotting file timestamp of ${path}: ${err.stack}`\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tjobError();\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tfileTimestamps.set(path, entry);\n\t\t\t\t\t\t\t\t\tjobDone();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\t\tif (files) {\n\t\t\tprocessCapturedFiles(captureNonManaged(files, managedFiles));\n\t\t}\n\t\tconst processCapturedDirectories = capturedDirectories => {\n\t\t\tswitch (mode) {\n\t\t\t\tcase 3:\n\t\t\t\t\tthis._contextTshsOptimization.optimize(snapshot, capturedDirectories);\n\t\t\t\t\tfor (const path of capturedDirectories) {\n\t\t\t\t\t\tconst cache = this._contextTshs.get(path);\n\t\t\t\t\t\t/** @type {ResolvedContextTimestampAndHash} */\n\t\t\t\t\t\tlet resolved;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tcache !== undefined &&\n\t\t\t\t\t\t\t(resolved = getResolvedTimestamp(cache)) !== undefined\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcontextTshs.set(path, resolved);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tjobs++;\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * @param {Error=} err error\n\t\t\t\t\t\t\t * @param {ResolvedContextTimestampAndHash=} entry entry\n\t\t\t\t\t\t\t * @returns {void}\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tconst callback = (err, entry) => {\n\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\tif (this.logger) {\n\t\t\t\t\t\t\t\t\t\tthis.logger.debug(\n\t\t\t\t\t\t\t\t\t\t\t`Error snapshotting context timestamp hash combination of ${path}: ${err.stack}`\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tjobError();\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcontextTshs.set(path, entry);\n\t\t\t\t\t\t\t\t\tjobDone();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tif (cache !== undefined) {\n\t\t\t\t\t\t\t\tthis._resolveContextTsh(cache, callback);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.getContextTsh(path, callback);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tthis._contextHashesOptimization.optimize(\n\t\t\t\t\t\tsnapshot,\n\t\t\t\t\t\tcapturedDirectories\n\t\t\t\t\t);\n\t\t\t\t\tfor (const path of capturedDirectories) {\n\t\t\t\t\t\tconst cache = this._contextHashes.get(path);\n\t\t\t\t\t\tlet resolved;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tcache !== undefined &&\n\t\t\t\t\t\t\t(resolved = getResolvedHash(cache)) !== undefined\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcontextHashes.set(path, resolved);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tjobs++;\n\t\t\t\t\t\t\tconst callback = (err, entry) => {\n\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\tif (this.logger) {\n\t\t\t\t\t\t\t\t\t\tthis.logger.debug(\n\t\t\t\t\t\t\t\t\t\t\t`Error snapshotting context hash of ${path}: ${err.stack}`\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tjobError();\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcontextHashes.set(path, entry);\n\t\t\t\t\t\t\t\t\tjobDone();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tif (cache !== undefined) {\n\t\t\t\t\t\t\t\tthis._resolveContextHash(cache, callback);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.getContextHash(path, callback);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tthis._contextTimestampsOptimization.optimize(\n\t\t\t\t\t\tsnapshot,\n\t\t\t\t\t\tcapturedDirectories\n\t\t\t\t\t);\n\t\t\t\t\tfor (const path of capturedDirectories) {\n\t\t\t\t\t\tconst cache = this._contextTimestamps.get(path);\n\t\t\t\t\t\tif (cache === \"ignore\") continue;\n\t\t\t\t\t\tlet resolved;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tcache !== undefined &&\n\t\t\t\t\t\t\t(resolved = getResolvedTimestamp(cache)) !== undefined\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcontextTimestamps.set(path, resolved);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tjobs++;\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * @param {Error=} err error\n\t\t\t\t\t\t\t * @param {ResolvedContextFileSystemInfoEntry=} entry entry\n\t\t\t\t\t\t\t * @returns {void}\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tconst callback = (err, entry) => {\n\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\tif (this.logger) {\n\t\t\t\t\t\t\t\t\t\tthis.logger.debug(\n\t\t\t\t\t\t\t\t\t\t\t`Error snapshotting context timestamp of ${path}: ${err.stack}`\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tjobError();\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcontextTimestamps.set(path, entry);\n\t\t\t\t\t\t\t\t\tjobDone();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tif (cache !== undefined) {\n\t\t\t\t\t\t\t\tthis._resolveContextTimestamp(cache, callback);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.getContextTimestamp(path, callback);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\t\tif (directories) {\n\t\t\tprocessCapturedDirectories(\n\t\t\t\tcaptureNonManaged(directories, managedContexts)\n\t\t\t);\n\t\t}\n\t\tconst processCapturedMissing = capturedMissing => {\n\t\t\tthis._missingExistenceOptimization.optimize(snapshot, capturedMissing);\n\t\t\tfor (const path of capturedMissing) {\n\t\t\t\tconst cache = this._fileTimestamps.get(path);\n\t\t\t\tif (cache !== undefined) {\n\t\t\t\t\tif (cache !== \"ignore\") {\n\t\t\t\t\t\tmissingExistence.set(path, Boolean(cache));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tjobs++;\n\t\t\t\t\tthis.fileTimestampQueue.add(path, (err, entry) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tif (this.logger) {\n\t\t\t\t\t\t\t\tthis.logger.debug(\n\t\t\t\t\t\t\t\t\t`Error snapshotting missing timestamp of ${path}: ${err.stack}`\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tjobError();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmissingExistence.set(path, Boolean(entry));\n\t\t\t\t\t\t\tjobDone();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tif (missing) {\n\t\t\tprocessCapturedMissing(captureNonManaged(missing, managedMissing));\n\t\t}\n\t\tthis._managedItemInfoOptimization.optimize(snapshot, managedItems);\n\t\tfor (const path of managedItems) {\n\t\t\tconst cache = this._managedItems.get(path);\n\t\t\tif (cache !== undefined) {\n\t\t\t\tif (!cache.startsWith(\"*\")) {\n\t\t\t\t\tmanagedFiles.add(join(this.fs, path, \"package.json\"));\n\t\t\t\t} else if (cache === \"*nested\") {\n\t\t\t\t\tmanagedMissing.add(join(this.fs, path, \"package.json\"));\n\t\t\t\t}\n\t\t\t\tmanagedItemInfo.set(path, cache);\n\t\t\t} else {\n\t\t\t\tjobs++;\n\t\t\t\tthis.managedItemQueue.add(path, (err, entry) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tif (this.logger) {\n\t\t\t\t\t\t\tthis.logger.debug(\n\t\t\t\t\t\t\t\t`Error snapshotting managed item ${path}: ${err.stack}`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjobError();\n\t\t\t\t\t} else if (entry) {\n\t\t\t\t\t\tif (!entry.startsWith(\"*\")) {\n\t\t\t\t\t\t\tmanagedFiles.add(join(this.fs, path, \"package.json\"));\n\t\t\t\t\t\t} else if (cache === \"*nested\") {\n\t\t\t\t\t\t\tmanagedMissing.add(join(this.fs, path, \"package.json\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmanagedItemInfo.set(path, entry);\n\t\t\t\t\t\tjobDone();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Fallback to normal snapshotting\n\t\t\t\t\t\tconst process = (set, fn) => {\n\t\t\t\t\t\t\tif (set.size === 0) return;\n\t\t\t\t\t\t\tconst captured = new Set();\n\t\t\t\t\t\t\tfor (const file of set) {\n\t\t\t\t\t\t\t\tif (file.startsWith(path)) captured.add(file);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (captured.size > 0) fn(captured);\n\t\t\t\t\t\t};\n\t\t\t\t\t\tprocess(managedFiles, processCapturedFiles);\n\t\t\t\t\t\tprocess(managedContexts, processCapturedDirectories);\n\t\t\t\t\t\tprocess(managedMissing, processCapturedMissing);\n\t\t\t\t\t\tjobDone();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tjobDone();\n\t}\n\n\t/**\n\t * @param {Snapshot} snapshot1 a snapshot\n\t * @param {Snapshot} snapshot2 a snapshot\n\t * @returns {Snapshot} merged snapshot\n\t */\n\tmergeSnapshots(snapshot1, snapshot2) {\n\t\tconst snapshot = new Snapshot();\n\t\tif (snapshot1.hasStartTime() && snapshot2.hasStartTime())\n\t\t\tsnapshot.setStartTime(Math.min(snapshot1.startTime, snapshot2.startTime));\n\t\telse if (snapshot2.hasStartTime()) snapshot.startTime = snapshot2.startTime;\n\t\telse if (snapshot1.hasStartTime()) snapshot.startTime = snapshot1.startTime;\n\t\tif (snapshot1.hasFileTimestamps() || snapshot2.hasFileTimestamps()) {\n\t\t\tsnapshot.setFileTimestamps(\n\t\t\t\tmergeMaps(snapshot1.fileTimestamps, snapshot2.fileTimestamps)\n\t\t\t);\n\t\t}\n\t\tif (snapshot1.hasFileHashes() || snapshot2.hasFileHashes()) {\n\t\t\tsnapshot.setFileHashes(\n\t\t\t\tmergeMaps(snapshot1.fileHashes, snapshot2.fileHashes)\n\t\t\t);\n\t\t}\n\t\tif (snapshot1.hasFileTshs() || snapshot2.hasFileTshs()) {\n\t\t\tsnapshot.setFileTshs(mergeMaps(snapshot1.fileTshs, snapshot2.fileTshs));\n\t\t}\n\t\tif (snapshot1.hasContextTimestamps() || snapshot2.hasContextTimestamps()) {\n\t\t\tsnapshot.setContextTimestamps(\n\t\t\t\tmergeMaps(snapshot1.contextTimestamps, snapshot2.contextTimestamps)\n\t\t\t);\n\t\t}\n\t\tif (snapshot1.hasContextHashes() || snapshot2.hasContextHashes()) {\n\t\t\tsnapshot.setContextHashes(\n\t\t\t\tmergeMaps(snapshot1.contextHashes, snapshot2.contextHashes)\n\t\t\t);\n\t\t}\n\t\tif (snapshot1.hasContextTshs() || snapshot2.hasContextTshs()) {\n\t\t\tsnapshot.setContextTshs(\n\t\t\t\tmergeMaps(snapshot1.contextTshs, snapshot2.contextTshs)\n\t\t\t);\n\t\t}\n\t\tif (snapshot1.hasMissingExistence() || snapshot2.hasMissingExistence()) {\n\t\t\tsnapshot.setMissingExistence(\n\t\t\t\tmergeMaps(snapshot1.missingExistence, snapshot2.missingExistence)\n\t\t\t);\n\t\t}\n\t\tif (snapshot1.hasManagedItemInfo() || snapshot2.hasManagedItemInfo()) {\n\t\t\tsnapshot.setManagedItemInfo(\n\t\t\t\tmergeMaps(snapshot1.managedItemInfo, snapshot2.managedItemInfo)\n\t\t\t);\n\t\t}\n\t\tif (snapshot1.hasManagedFiles() || snapshot2.hasManagedFiles()) {\n\t\t\tsnapshot.setManagedFiles(\n\t\t\t\tmergeSets(snapshot1.managedFiles, snapshot2.managedFiles)\n\t\t\t);\n\t\t}\n\t\tif (snapshot1.hasManagedContexts() || snapshot2.hasManagedContexts()) {\n\t\t\tsnapshot.setManagedContexts(\n\t\t\t\tmergeSets(snapshot1.managedContexts, snapshot2.managedContexts)\n\t\t\t);\n\t\t}\n\t\tif (snapshot1.hasManagedMissing() || snapshot2.hasManagedMissing()) {\n\t\t\tsnapshot.setManagedMissing(\n\t\t\t\tmergeSets(snapshot1.managedMissing, snapshot2.managedMissing)\n\t\t\t);\n\t\t}\n\t\tif (snapshot1.hasChildren() || snapshot2.hasChildren()) {\n\t\t\tsnapshot.setChildren(mergeSets(snapshot1.children, snapshot2.children));\n\t\t}\n\t\tif (\n\t\t\tthis._snapshotCache.get(snapshot1) === true &&\n\t\t\tthis._snapshotCache.get(snapshot2) === true\n\t\t) {\n\t\t\tthis._snapshotCache.set(snapshot, true);\n\t\t}\n\t\treturn snapshot;\n\t}\n\n\t/**\n\t * @param {Snapshot} snapshot the snapshot made\n\t * @param {function((WebpackError | null)=, boolean=): void} callback callback function\n\t * @returns {void}\n\t */\n\tcheckSnapshotValid(snapshot, callback) {\n\t\tconst cachedResult = this._snapshotCache.get(snapshot);\n\t\tif (cachedResult !== undefined) {\n\t\t\tthis._statTestedSnapshotsCached++;\n\t\t\tif (typeof cachedResult === \"boolean\") {\n\t\t\t\tcallback(null, cachedResult);\n\t\t\t} else {\n\t\t\t\tcachedResult.push(callback);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tthis._statTestedSnapshotsNotCached++;\n\t\tthis._checkSnapshotValidNoCache(snapshot, callback);\n\t}\n\n\t/**\n\t * @param {Snapshot} snapshot the snapshot made\n\t * @param {function((WebpackError | null)=, boolean=): void} callback callback function\n\t * @returns {void}\n\t */\n\t_checkSnapshotValidNoCache(snapshot, callback) {\n\t\t/** @type {number | undefined} */\n\t\tlet startTime = undefined;\n\t\tif (snapshot.hasStartTime()) {\n\t\t\tstartTime = snapshot.startTime;\n\t\t}\n\t\tlet jobs = 1;\n\t\tconst jobDone = () => {\n\t\t\tif (--jobs === 0) {\n\t\t\t\tthis._snapshotCache.set(snapshot, true);\n\t\t\t\tcallback(null, true);\n\t\t\t}\n\t\t};\n\t\tconst invalid = () => {\n\t\t\tif (jobs > 0) {\n\t\t\t\t// large negative number instead of NaN or something else to keep jobs to stay a SMI (v8)\n\t\t\t\tjobs = -100000000;\n\t\t\t\tthis._snapshotCache.set(snapshot, false);\n\t\t\t\tcallback(null, false);\n\t\t\t}\n\t\t};\n\t\tconst invalidWithError = (path, err) => {\n\t\t\tif (this._remainingLogs > 0) {\n\t\t\t\tthis._log(path, `error occurred: %s`, err);\n\t\t\t}\n\t\t\tinvalid();\n\t\t};\n\t\t/**\n\t\t * @param {string} path file path\n\t\t * @param {string} current current hash\n\t\t * @param {string} snap snapshot hash\n\t\t * @returns {boolean} true, if ok\n\t\t */\n\t\tconst checkHash = (path, current, snap) => {\n\t\t\tif (current !== snap) {\n\t\t\t\t// If hash differ it's invalid\n\t\t\t\tif (this._remainingLogs > 0) {\n\t\t\t\t\tthis._log(path, `hashes differ (%s != %s)`, current, snap);\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\t\t/**\n\t\t * @param {string} path file path\n\t\t * @param {boolean} current current entry\n\t\t * @param {boolean} snap entry from snapshot\n\t\t * @returns {boolean} true, if ok\n\t\t */\n\t\tconst checkExistence = (path, current, snap) => {\n\t\t\tif (!current !== !snap) {\n\t\t\t\t// If existence of item differs\n\t\t\t\t// it's invalid\n\t\t\t\tif (this._remainingLogs > 0) {\n\t\t\t\t\tthis._log(\n\t\t\t\t\t\tpath,\n\t\t\t\t\t\tcurrent ? \"it didn't exist before\" : \"it does no longer exist\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\t\t/**\n\t\t * @param {string} path file path\n\t\t * @param {FileSystemInfoEntry} current current entry\n\t\t * @param {FileSystemInfoEntry} snap entry from snapshot\n\t\t * @param {boolean} log log reason\n\t\t * @returns {boolean} true, if ok\n\t\t */\n\t\tconst checkFile = (path, current, snap, log = true) => {\n\t\t\tif (current === snap) return true;\n\t\t\tif (!checkExistence(path, Boolean(current), Boolean(snap))) return false;\n\t\t\tif (current) {\n\t\t\t\t// For existing items only\n\t\t\t\tif (typeof startTime === \"number\" && current.safeTime > startTime) {\n\t\t\t\t\t// If a change happened after starting reading the item\n\t\t\t\t\t// this may no longer be valid\n\t\t\t\t\tif (log && this._remainingLogs > 0) {\n\t\t\t\t\t\tthis._log(\n\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\t`it may have changed (%d) after the start time of the snapshot (%d)`,\n\t\t\t\t\t\t\tcurrent.safeTime,\n\t\t\t\t\t\t\tstartTime\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\tsnap.timestamp !== undefined &&\n\t\t\t\t\tcurrent.timestamp !== snap.timestamp\n\t\t\t\t) {\n\t\t\t\t\t// If we have a timestamp (it was a file or symlink) and it differs from current timestamp\n\t\t\t\t\t// it's invalid\n\t\t\t\t\tif (log && this._remainingLogs > 0) {\n\t\t\t\t\t\tthis._log(\n\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\t`timestamps differ (%d != %d)`,\n\t\t\t\t\t\t\tcurrent.timestamp,\n\t\t\t\t\t\t\tsnap.timestamp\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\t\t/**\n\t\t * @param {string} path file path\n\t\t * @param {ResolvedContextFileSystemInfoEntry} current current entry\n\t\t * @param {ResolvedContextFileSystemInfoEntry} snap entry from snapshot\n\t\t * @param {boolean} log log reason\n\t\t * @returns {boolean} true, if ok\n\t\t */\n\t\tconst checkContext = (path, current, snap, log = true) => {\n\t\t\tif (current === snap) return true;\n\t\t\tif (!checkExistence(path, Boolean(current), Boolean(snap))) return false;\n\t\t\tif (current) {\n\t\t\t\t// For existing items only\n\t\t\t\tif (typeof startTime === \"number\" && current.safeTime > startTime) {\n\t\t\t\t\t// If a change happened after starting reading the item\n\t\t\t\t\t// this may no longer be valid\n\t\t\t\t\tif (log && this._remainingLogs > 0) {\n\t\t\t\t\t\tthis._log(\n\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\t`it may have changed (%d) after the start time of the snapshot (%d)`,\n\t\t\t\t\t\t\tcurrent.safeTime,\n\t\t\t\t\t\t\tstartTime\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\tsnap.timestampHash !== undefined &&\n\t\t\t\t\tcurrent.timestampHash !== snap.timestampHash\n\t\t\t\t) {\n\t\t\t\t\t// If we have a timestampHash (it was a directory) and it differs from current timestampHash\n\t\t\t\t\t// it's invalid\n\t\t\t\t\tif (log && this._remainingLogs > 0) {\n\t\t\t\t\t\tthis._log(\n\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\t`timestamps hashes differ (%s != %s)`,\n\t\t\t\t\t\t\tcurrent.timestampHash,\n\t\t\t\t\t\t\tsnap.timestampHash\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\t\tif (snapshot.hasChildren()) {\n\t\t\tconst childCallback = (err, result) => {\n\t\t\t\tif (err || !result) return invalid();\n\t\t\t\telse jobDone();\n\t\t\t};\n\t\t\tfor (const child of snapshot.children) {\n\t\t\t\tconst cache = this._snapshotCache.get(child);\n\t\t\t\tif (cache !== undefined) {\n\t\t\t\t\tthis._statTestedChildrenCached++;\n\t\t\t\t\t/* istanbul ignore else */\n\t\t\t\t\tif (typeof cache === \"boolean\") {\n\t\t\t\t\t\tif (cache === false) {\n\t\t\t\t\t\t\tinvalid();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tjobs++;\n\t\t\t\t\t\tcache.push(childCallback);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis._statTestedChildrenNotCached++;\n\t\t\t\t\tjobs++;\n\t\t\t\t\tthis._checkSnapshotValidNoCache(child, childCallback);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (snapshot.hasFileTimestamps()) {\n\t\t\tconst { fileTimestamps } = snapshot;\n\t\t\tthis._statTestedEntries += fileTimestamps.size;\n\t\t\tfor (const [path, ts] of fileTimestamps) {\n\t\t\t\tconst cache = this._fileTimestamps.get(path);\n\t\t\t\tif (cache !== undefined) {\n\t\t\t\t\tif (cache !== \"ignore\" && !checkFile(path, cache, ts)) {\n\t\t\t\t\t\tinvalid();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tjobs++;\n\t\t\t\t\tthis.fileTimestampQueue.add(path, (err, entry) => {\n\t\t\t\t\t\tif (err) return invalidWithError(path, err);\n\t\t\t\t\t\tif (!checkFile(path, entry, ts)) {\n\t\t\t\t\t\t\tinvalid();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tjobDone();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst processFileHashSnapshot = (path, hash) => {\n\t\t\tconst cache = this._fileHashes.get(path);\n\t\t\tif (cache !== undefined) {\n\t\t\t\tif (cache !== \"ignore\" && !checkHash(path, cache, hash)) {\n\t\t\t\t\tinvalid();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tjobs++;\n\t\t\t\tthis.fileHashQueue.add(path, (err, entry) => {\n\t\t\t\t\tif (err) return invalidWithError(path, err);\n\t\t\t\t\tif (!checkHash(path, entry, hash)) {\n\t\t\t\t\t\tinvalid();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tjobDone();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t\tif (snapshot.hasFileHashes()) {\n\t\t\tconst { fileHashes } = snapshot;\n\t\t\tthis._statTestedEntries += fileHashes.size;\n\t\t\tfor (const [path, hash] of fileHashes) {\n\t\t\t\tprocessFileHashSnapshot(path, hash);\n\t\t\t}\n\t\t}\n\t\tif (snapshot.hasFileTshs()) {\n\t\t\tconst { fileTshs } = snapshot;\n\t\t\tthis._statTestedEntries += fileTshs.size;\n\t\t\tfor (const [path, tsh] of fileTshs) {\n\t\t\t\tif (typeof tsh === \"string\") {\n\t\t\t\t\tprocessFileHashSnapshot(path, tsh);\n\t\t\t\t} else {\n\t\t\t\t\tconst cache = this._fileTimestamps.get(path);\n\t\t\t\t\tif (cache !== undefined) {\n\t\t\t\t\t\tif (cache === \"ignore\" || !checkFile(path, cache, tsh, false)) {\n\t\t\t\t\t\t\tprocessFileHashSnapshot(path, tsh && tsh.hash);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tjobs++;\n\t\t\t\t\t\tthis.fileTimestampQueue.add(path, (err, entry) => {\n\t\t\t\t\t\t\tif (err) return invalidWithError(path, err);\n\t\t\t\t\t\t\tif (!checkFile(path, entry, tsh, false)) {\n\t\t\t\t\t\t\t\tprocessFileHashSnapshot(path, tsh && tsh.hash);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tjobDone();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (snapshot.hasContextTimestamps()) {\n\t\t\tconst { contextTimestamps } = snapshot;\n\t\t\tthis._statTestedEntries += contextTimestamps.size;\n\t\t\tfor (const [path, ts] of contextTimestamps) {\n\t\t\t\tconst cache = this._contextTimestamps.get(path);\n\t\t\t\tif (cache === \"ignore\") continue;\n\t\t\t\tlet resolved;\n\t\t\t\tif (\n\t\t\t\t\tcache !== undefined &&\n\t\t\t\t\t(resolved = getResolvedTimestamp(cache)) !== undefined\n\t\t\t\t) {\n\t\t\t\t\tif (!checkContext(path, resolved, ts)) {\n\t\t\t\t\t\tinvalid();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tjobs++;\n\t\t\t\t\t/**\n\t\t\t\t\t * @param {Error=} err error\n\t\t\t\t\t * @param {ResolvedContextFileSystemInfoEntry=} entry entry\n\t\t\t\t\t * @returns {void}\n\t\t\t\t\t */\n\t\t\t\t\tconst callback = (err, entry) => {\n\t\t\t\t\t\tif (err) return invalidWithError(path, err);\n\t\t\t\t\t\tif (!checkContext(path, entry, ts)) {\n\t\t\t\t\t\t\tinvalid();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tjobDone();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tif (cache !== undefined) {\n\t\t\t\t\t\tthis._resolveContextTimestamp(cache, callback);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.getContextTimestamp(path, callback);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst processContextHashSnapshot = (path, hash) => {\n\t\t\tconst cache = this._contextHashes.get(path);\n\t\t\tlet resolved;\n\t\t\tif (\n\t\t\t\tcache !== undefined &&\n\t\t\t\t(resolved = getResolvedHash(cache)) !== undefined\n\t\t\t) {\n\t\t\t\tif (!checkHash(path, resolved, hash)) {\n\t\t\t\t\tinvalid();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tjobs++;\n\t\t\t\tconst callback = (err, entry) => {\n\t\t\t\t\tif (err) return invalidWithError(path, err);\n\t\t\t\t\tif (!checkHash(path, entry, hash)) {\n\t\t\t\t\t\tinvalid();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tjobDone();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tif (cache !== undefined) {\n\t\t\t\t\tthis._resolveContextHash(cache, callback);\n\t\t\t\t} else {\n\t\t\t\t\tthis.getContextHash(path, callback);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tif (snapshot.hasContextHashes()) {\n\t\t\tconst { contextHashes } = snapshot;\n\t\t\tthis._statTestedEntries += contextHashes.size;\n\t\t\tfor (const [path, hash] of contextHashes) {\n\t\t\t\tprocessContextHashSnapshot(path, hash);\n\t\t\t}\n\t\t}\n\t\tif (snapshot.hasContextTshs()) {\n\t\t\tconst { contextTshs } = snapshot;\n\t\t\tthis._statTestedEntries += contextTshs.size;\n\t\t\tfor (const [path, tsh] of contextTshs) {\n\t\t\t\tif (typeof tsh === \"string\") {\n\t\t\t\t\tprocessContextHashSnapshot(path, tsh);\n\t\t\t\t} else {\n\t\t\t\t\tconst cache = this._contextTimestamps.get(path);\n\t\t\t\t\tif (cache === \"ignore\") continue;\n\t\t\t\t\tlet resolved;\n\t\t\t\t\tif (\n\t\t\t\t\t\tcache !== undefined &&\n\t\t\t\t\t\t(resolved = getResolvedTimestamp(cache)) !== undefined\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!checkContext(path, resolved, tsh, false)) {\n\t\t\t\t\t\t\tprocessContextHashSnapshot(path, tsh && tsh.hash);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tjobs++;\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * @param {Error=} err error\n\t\t\t\t\t\t * @param {ResolvedContextFileSystemInfoEntry=} entry entry\n\t\t\t\t\t\t * @returns {void}\n\t\t\t\t\t\t */\n\t\t\t\t\t\tconst callback = (err, entry) => {\n\t\t\t\t\t\t\tif (err) return invalidWithError(path, err);\n\t\t\t\t\t\t\tif (!checkContext(path, entry, tsh, false)) {\n\t\t\t\t\t\t\t\tprocessContextHashSnapshot(path, tsh && tsh.hash);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tjobDone();\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif (cache !== undefined) {\n\t\t\t\t\t\t\tthis._resolveContextTimestamp(cache, callback);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.getContextTimestamp(path, callback);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (snapshot.hasMissingExistence()) {\n\t\t\tconst { missingExistence } = snapshot;\n\t\t\tthis._statTestedEntries += missingExistence.size;\n\t\t\tfor (const [path, existence] of missingExistence) {\n\t\t\t\tconst cache = this._fileTimestamps.get(path);\n\t\t\t\tif (cache !== undefined) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tcache !== \"ignore\" &&\n\t\t\t\t\t\t!checkExistence(path, Boolean(cache), Boolean(existence))\n\t\t\t\t\t) {\n\t\t\t\t\t\tinvalid();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tjobs++;\n\t\t\t\t\tthis.fileTimestampQueue.add(path, (err, entry) => {\n\t\t\t\t\t\tif (err) return invalidWithError(path, err);\n\t\t\t\t\t\tif (!checkExistence(path, Boolean(entry), Boolean(existence))) {\n\t\t\t\t\t\t\tinvalid();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tjobDone();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (snapshot.hasManagedItemInfo()) {\n\t\t\tconst { managedItemInfo } = snapshot;\n\t\t\tthis._statTestedEntries += managedItemInfo.size;\n\t\t\tfor (const [path, info] of managedItemInfo) {\n\t\t\t\tconst cache = this._managedItems.get(path);\n\t\t\t\tif (cache !== undefined) {\n\t\t\t\t\tif (!checkHash(path, cache, info)) {\n\t\t\t\t\t\tinvalid();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tjobs++;\n\t\t\t\t\tthis.managedItemQueue.add(path, (err, entry) => {\n\t\t\t\t\t\tif (err) return invalidWithError(path, err);\n\t\t\t\t\t\tif (!checkHash(path, entry, info)) {\n\t\t\t\t\t\t\tinvalid();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tjobDone();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tjobDone();\n\n\t\t// if there was an async action\n\t\t// try to join multiple concurrent request for this snapshot\n\t\tif (jobs > 0) {\n\t\t\tconst callbacks = [callback];\n\t\t\tcallback = (err, result) => {\n\t\t\t\tfor (const callback of callbacks) callback(err, result);\n\t\t\t};\n\t\t\tthis._snapshotCache.set(snapshot, callbacks);\n\t\t}\n\t}\n\n\t_readFileTimestamp(path, callback) {\n\t\tthis.fs.stat(path, (err, stat) => {\n\t\t\tif (err) {\n\t\t\t\tif (err.code === \"ENOENT\") {\n\t\t\t\t\tthis._fileTimestamps.set(path, null);\n\t\t\t\t\tthis._cachedDeprecatedFileTimestamps = undefined;\n\t\t\t\t\treturn callback(null, null);\n\t\t\t\t}\n\t\t\t\treturn callback(err);\n\t\t\t}\n\n\t\t\tlet ts;\n\t\t\tif (stat.isDirectory()) {\n\t\t\t\tts = {\n\t\t\t\t\tsafeTime: 0,\n\t\t\t\t\ttimestamp: undefined\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tconst mtime = +stat.mtime;\n\n\t\t\t\tif (mtime) applyMtime(mtime);\n\n\t\t\t\tts = {\n\t\t\t\t\tsafeTime: mtime ? mtime + FS_ACCURACY : Infinity,\n\t\t\t\t\ttimestamp: mtime\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis._fileTimestamps.set(path, ts);\n\t\t\tthis._cachedDeprecatedFileTimestamps = undefined;\n\n\t\t\tcallback(null, ts);\n\t\t});\n\t}\n\n\t_readFileHash(path, callback) {\n\t\tthis.fs.readFile(path, (err, content) => {\n\t\t\tif (err) {\n\t\t\t\tif (err.code === \"EISDIR\") {\n\t\t\t\t\tthis._fileHashes.set(path, \"directory\");\n\t\t\t\t\treturn callback(null, \"directory\");\n\t\t\t\t}\n\t\t\t\tif (err.code === \"ENOENT\") {\n\t\t\t\t\tthis._fileHashes.set(path, null);\n\t\t\t\t\treturn callback(null, null);\n\t\t\t\t}\n\t\t\t\tif (err.code === \"ERR_FS_FILE_TOO_LARGE\") {\n\t\t\t\t\tthis.logger.warn(`Ignoring ${path} for hashing as it's very large`);\n\t\t\t\t\tthis._fileHashes.set(path, \"too large\");\n\t\t\t\t\treturn callback(null, \"too large\");\n\t\t\t\t}\n\t\t\t\treturn callback(err);\n\t\t\t}\n\n\t\t\tconst hash = createHash(this._hashFunction);\n\n\t\t\thash.update(content);\n\n\t\t\tconst digest = /** @type {string} */ (hash.digest(\"hex\"));\n\n\t\t\tthis._fileHashes.set(path, digest);\n\n\t\t\tcallback(null, digest);\n\t\t});\n\t}\n\n\t_getFileTimestampAndHash(path, callback) {\n\t\tconst continueWithHash = hash => {\n\t\t\tconst cache = this._fileTimestamps.get(path);\n\t\t\tif (cache !== undefined) {\n\t\t\t\tif (cache !== \"ignore\") {\n\t\t\t\t\tconst result = {\n\t\t\t\t\t\t...cache,\n\t\t\t\t\t\thash\n\t\t\t\t\t};\n\t\t\t\t\tthis._fileTshs.set(path, result);\n\t\t\t\t\treturn callback(null, result);\n\t\t\t\t} else {\n\t\t\t\t\tthis._fileTshs.set(path, hash);\n\t\t\t\t\treturn callback(null, hash);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.fileTimestampQueue.add(path, (err, entry) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\t}\n\t\t\t\t\tconst result = {\n\t\t\t\t\t\t...entry,\n\t\t\t\t\t\thash\n\t\t\t\t\t};\n\t\t\t\t\tthis._fileTshs.set(path, result);\n\t\t\t\t\treturn callback(null, result);\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tconst cache = this._fileHashes.get(path);\n\t\tif (cache !== undefined) {\n\t\t\tcontinueWithHash(cache);\n\t\t} else {\n\t\t\tthis.fileHashQueue.add(path, (err, entry) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn callback(err);\n\t\t\t\t}\n\t\t\t\tcontinueWithHash(entry);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * @template T\n\t * @template ItemType\n\t * @param {Object} options options\n\t * @param {string} options.path path\n\t * @param {function(string): ItemType} options.fromImmutablePath called when context item is an immutable path\n\t * @param {function(string): ItemType} options.fromManagedItem called when context item is a managed path\n\t * @param {function(string, string, function(Error=, ItemType=): void): void} options.fromSymlink called when context item is a symlink\n\t * @param {function(string, IStats, function(Error=, ItemType=): void): void} options.fromFile called when context item is a file\n\t * @param {function(string, IStats, function(Error=, ItemType=): void): void} options.fromDirectory called when context item is a directory\n\t * @param {function(string[], ItemType[]): T} options.reduce called from all context items\n\t * @param {function((Error | null)=, (T)=): void} callback callback\n\t */\n\t_readContext(\n\t\t{\n\t\t\tpath,\n\t\t\tfromImmutablePath,\n\t\t\tfromManagedItem,\n\t\t\tfromSymlink,\n\t\t\tfromFile,\n\t\t\tfromDirectory,\n\t\t\treduce\n\t\t},\n\t\tcallback\n\t) {\n\t\tthis.fs.readdir(path, (err, _files) => {\n\t\t\tif (err) {\n\t\t\t\tif (err.code === \"ENOENT\") {\n\t\t\t\t\treturn callback(null, null);\n\t\t\t\t}\n\t\t\t\treturn callback(err);\n\t\t\t}\n\t\t\tconst files = /** @type {string[]} */ (_files)\n\t\t\t\t.map(file => file.normalize(\"NFC\"))\n\t\t\t\t.filter(file => !/^\\./.test(file))\n\t\t\t\t.sort();\n\t\t\tasyncLib.map(\n\t\t\t\tfiles,\n\t\t\t\t(file, callback) => {\n\t\t\t\t\tconst child = join(this.fs, path, file);\n\t\t\t\t\tfor (const immutablePath of this.immutablePathsRegExps) {\n\t\t\t\t\t\tif (immutablePath.test(path)) {\n\t\t\t\t\t\t\t// ignore any immutable path for timestamping\n\t\t\t\t\t\t\treturn callback(null, fromImmutablePath(path));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (const immutablePath of this.immutablePathsWithSlash) {\n\t\t\t\t\t\tif (path.startsWith(immutablePath)) {\n\t\t\t\t\t\t\t// ignore any immutable path for timestamping\n\t\t\t\t\t\t\treturn callback(null, fromImmutablePath(path));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (const managedPath of this.managedPathsRegExps) {\n\t\t\t\t\t\tconst match = managedPath.exec(path);\n\t\t\t\t\t\tif (match) {\n\t\t\t\t\t\t\tconst managedItem = getManagedItem(match[1], path);\n\t\t\t\t\t\t\tif (managedItem) {\n\t\t\t\t\t\t\t\t// construct timestampHash from managed info\n\t\t\t\t\t\t\t\treturn this.managedItemQueue.add(managedItem, (err, info) => {\n\t\t\t\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\t\t\t\treturn callback(null, fromManagedItem(info));\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (const managedPath of this.managedPathsWithSlash) {\n\t\t\t\t\t\tif (path.startsWith(managedPath)) {\n\t\t\t\t\t\t\tconst managedItem = getManagedItem(managedPath, child);\n\t\t\t\t\t\t\tif (managedItem) {\n\t\t\t\t\t\t\t\t// construct timestampHash from managed info\n\t\t\t\t\t\t\t\treturn this.managedItemQueue.add(managedItem, (err, info) => {\n\t\t\t\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\t\t\t\treturn callback(null, fromManagedItem(info));\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tlstatReadlinkAbsolute(this.fs, child, (err, stat) => {\n\t\t\t\t\t\tif (err) return callback(err);\n\n\t\t\t\t\t\tif (typeof stat === \"string\") {\n\t\t\t\t\t\t\treturn fromSymlink(child, stat, callback);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (stat.isFile()) {\n\t\t\t\t\t\t\treturn fromFile(child, stat, callback);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (stat.isDirectory()) {\n\t\t\t\t\t\t\treturn fromDirectory(child, stat, callback);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcallback(null, null);\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\t(err, results) => {\n\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\tconst result = reduce(files, results);\n\t\t\t\t\tcallback(null, result);\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\n\t_readContextTimestamp(path, callback) {\n\t\tthis._readContext(\n\t\t\t{\n\t\t\t\tpath,\n\t\t\t\tfromImmutablePath: () => null,\n\t\t\t\tfromManagedItem: info => ({\n\t\t\t\t\tsafeTime: 0,\n\t\t\t\t\ttimestampHash: info\n\t\t\t\t}),\n\t\t\t\tfromSymlink: (file, target, callback) => {\n\t\t\t\t\tcallback(null, {\n\t\t\t\t\t\ttimestampHash: target,\n\t\t\t\t\t\tsymlinks: new Set([target])\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tfromFile: (file, stat, callback) => {\n\t\t\t\t\t// Prefer the cached value over our new stat to report consistent results\n\t\t\t\t\tconst cache = this._fileTimestamps.get(file);\n\t\t\t\t\tif (cache !== undefined)\n\t\t\t\t\t\treturn callback(null, cache === \"ignore\" ? null : cache);\n\n\t\t\t\t\tconst mtime = +stat.mtime;\n\n\t\t\t\t\tif (mtime) applyMtime(mtime);\n\n\t\t\t\t\tconst ts = {\n\t\t\t\t\t\tsafeTime: mtime ? mtime + FS_ACCURACY : Infinity,\n\t\t\t\t\t\ttimestamp: mtime\n\t\t\t\t\t};\n\n\t\t\t\t\tthis._fileTimestamps.set(file, ts);\n\t\t\t\t\tthis._cachedDeprecatedFileTimestamps = undefined;\n\t\t\t\t\tcallback(null, ts);\n\t\t\t\t},\n\t\t\t\tfromDirectory: (directory, stat, callback) => {\n\t\t\t\t\tthis.contextTimestampQueue.increaseParallelism();\n\t\t\t\t\tthis._getUnresolvedContextTimestamp(directory, (err, tsEntry) => {\n\t\t\t\t\t\tthis.contextTimestampQueue.decreaseParallelism();\n\t\t\t\t\t\tcallback(err, tsEntry);\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\treduce: (files, tsEntries) => {\n\t\t\t\t\tlet symlinks = undefined;\n\n\t\t\t\t\tconst hash = createHash(this._hashFunction);\n\n\t\t\t\t\tfor (const file of files) hash.update(file);\n\t\t\t\t\tlet safeTime = 0;\n\t\t\t\t\tfor (const entry of tsEntries) {\n\t\t\t\t\t\tif (!entry) {\n\t\t\t\t\t\t\thash.update(\"n\");\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (entry.timestamp) {\n\t\t\t\t\t\t\thash.update(\"f\");\n\t\t\t\t\t\t\thash.update(`${entry.timestamp}`);\n\t\t\t\t\t\t} else if (entry.timestampHash) {\n\t\t\t\t\t\t\thash.update(\"d\");\n\t\t\t\t\t\t\thash.update(`${entry.timestampHash}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (entry.symlinks !== undefined) {\n\t\t\t\t\t\t\tif (symlinks === undefined) symlinks = new Set();\n\t\t\t\t\t\t\taddAll(entry.symlinks, symlinks);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (entry.safeTime) {\n\t\t\t\t\t\t\tsafeTime = Math.max(safeTime, entry.safeTime);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst digest = /** @type {string} */ (hash.digest(\"hex\"));\n\n\t\t\t\t\tconst result = {\n\t\t\t\t\t\tsafeTime,\n\t\t\t\t\t\ttimestampHash: digest\n\t\t\t\t\t};\n\t\t\t\t\tif (symlinks) result.symlinks = symlinks;\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t},\n\t\t\t(err, result) => {\n\t\t\t\tif (err) return callback(err);\n\t\t\t\tthis._contextTimestamps.set(path, result);\n\t\t\t\tthis._cachedDeprecatedContextTimestamps = undefined;\n\n\t\t\t\tcallback(null, result);\n\t\t\t}\n\t\t);\n\t}\n\n\t/**\n\t * @param {ContextFileSystemInfoEntry} entry entry\n\t * @param {function((Error | null)=, ResolvedContextFileSystemInfoEntry=): void} callback callback\n\t * @returns {void}\n\t */\n\t_resolveContextTimestamp(entry, callback) {\n\t\tconst hashes = [];\n\t\tlet safeTime = 0;\n\t\tprocessAsyncTree(\n\t\t\tentry.symlinks,\n\t\t\t10,\n\t\t\t(target, push, callback) => {\n\t\t\t\tthis._getUnresolvedContextTimestamp(target, (err, entry) => {\n\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\tif (entry && entry !== \"ignore\") {\n\t\t\t\t\t\thashes.push(entry.timestampHash);\n\t\t\t\t\t\tif (entry.safeTime) {\n\t\t\t\t\t\t\tsafeTime = Math.max(safeTime, entry.safeTime);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (entry.symlinks !== undefined) {\n\t\t\t\t\t\t\tfor (const target of entry.symlinks) push(target);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcallback();\n\t\t\t\t});\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tif (err) return callback(err);\n\t\t\t\tconst hash = createHash(this._hashFunction);\n\t\t\t\thash.update(entry.timestampHash);\n\t\t\t\tif (entry.safeTime) {\n\t\t\t\t\tsafeTime = Math.max(safeTime, entry.safeTime);\n\t\t\t\t}\n\t\t\t\thashes.sort();\n\t\t\t\tfor (const h of hashes) {\n\t\t\t\t\thash.update(h);\n\t\t\t\t}\n\t\t\t\tcallback(\n\t\t\t\t\tnull,\n\t\t\t\t\t(entry.resolved = {\n\t\t\t\t\t\tsafeTime,\n\t\t\t\t\t\ttimestampHash: /** @type {string} */ (hash.digest(\"hex\"))\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n\n\t_readContextHash(path, callback) {\n\t\tthis._readContext(\n\t\t\t{\n\t\t\t\tpath,\n\t\t\t\tfromImmutablePath: () => \"\",\n\t\t\t\tfromManagedItem: info => info || \"\",\n\t\t\t\tfromSymlink: (file, target, callback) => {\n\t\t\t\t\tcallback(null, {\n\t\t\t\t\t\thash: target,\n\t\t\t\t\t\tsymlinks: new Set([target])\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tfromFile: (file, stat, callback) =>\n\t\t\t\t\tthis.getFileHash(file, (err, hash) => {\n\t\t\t\t\t\tcallback(err, hash || \"\");\n\t\t\t\t\t}),\n\t\t\t\tfromDirectory: (directory, stat, callback) => {\n\t\t\t\t\tthis.contextHashQueue.increaseParallelism();\n\t\t\t\t\tthis._getUnresolvedContextHash(directory, (err, hash) => {\n\t\t\t\t\t\tthis.contextHashQueue.decreaseParallelism();\n\t\t\t\t\t\tcallback(err, hash || \"\");\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * @param {string[]} files files\n\t\t\t\t * @param {(string | ContextHash)[]} fileHashes hashes\n\t\t\t\t * @returns {ContextHash} reduced hash\n\t\t\t\t */\n\t\t\t\treduce: (files, fileHashes) => {\n\t\t\t\t\tlet symlinks = undefined;\n\t\t\t\t\tconst hash = createHash(this._hashFunction);\n\n\t\t\t\t\tfor (const file of files) hash.update(file);\n\t\t\t\t\tfor (const entry of fileHashes) {\n\t\t\t\t\t\tif (typeof entry === \"string\") {\n\t\t\t\t\t\t\thash.update(entry);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\thash.update(entry.hash);\n\t\t\t\t\t\t\tif (entry.symlinks) {\n\t\t\t\t\t\t\t\tif (symlinks === undefined) symlinks = new Set();\n\t\t\t\t\t\t\t\taddAll(entry.symlinks, symlinks);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst result = {\n\t\t\t\t\t\thash: /** @type {string} */ (hash.digest(\"hex\"))\n\t\t\t\t\t};\n\t\t\t\t\tif (symlinks) result.symlinks = symlinks;\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t},\n\t\t\t(err, result) => {\n\t\t\t\tif (err) return callback(err);\n\t\t\t\tthis._contextHashes.set(path, result);\n\t\t\t\treturn callback(null, result);\n\t\t\t}\n\t\t);\n\t}\n\n\t/**\n\t * @param {ContextHash} entry context hash\n\t * @param {function((Error | null)=, string=): void} callback callback\n\t * @returns {void}\n\t */\n\t_resolveContextHash(entry, callback) {\n\t\tconst hashes = [];\n\t\tprocessAsyncTree(\n\t\t\tentry.symlinks,\n\t\t\t10,\n\t\t\t(target, push, callback) => {\n\t\t\t\tthis._getUnresolvedContextHash(target, (err, hash) => {\n\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\tif (hash) {\n\t\t\t\t\t\thashes.push(hash.hash);\n\t\t\t\t\t\tif (hash.symlinks !== undefined) {\n\t\t\t\t\t\t\tfor (const target of hash.symlinks) push(target);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcallback();\n\t\t\t\t});\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tif (err) return callback(err);\n\t\t\t\tconst hash = createHash(this._hashFunction);\n\t\t\t\thash.update(entry.hash);\n\t\t\t\thashes.sort();\n\t\t\t\tfor (const h of hashes) {\n\t\t\t\t\thash.update(h);\n\t\t\t\t}\n\t\t\t\tcallback(\n\t\t\t\t\tnull,\n\t\t\t\t\t(entry.resolved = /** @type {string} */ (hash.digest(\"hex\")))\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n\n\t_readContextTimestampAndHash(path, callback) {\n\t\tconst finalize = (timestamp, hash) => {\n\t\t\tconst result =\n\t\t\t\ttimestamp === \"ignore\"\n\t\t\t\t\t? hash\n\t\t\t\t\t: {\n\t\t\t\t\t\t\t...timestamp,\n\t\t\t\t\t\t\t...hash\n\t\t\t\t\t  };\n\t\t\tthis._contextTshs.set(path, result);\n\t\t\tcallback(null, result);\n\t\t};\n\t\tconst cachedHash = this._contextHashes.get(path);\n\t\tconst cachedTimestamp = this._contextTimestamps.get(path);\n\t\tif (cachedHash !== undefined) {\n\t\t\tif (cachedTimestamp !== undefined) {\n\t\t\t\tfinalize(cachedTimestamp, cachedHash);\n\t\t\t} else {\n\t\t\t\tthis.contextTimestampQueue.add(path, (err, entry) => {\n\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\tfinalize(entry, cachedHash);\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tif (cachedTimestamp !== undefined) {\n\t\t\t\tthis.contextHashQueue.add(path, (err, entry) => {\n\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\tfinalize(cachedTimestamp, entry);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis._readContext(\n\t\t\t\t\t{\n\t\t\t\t\t\tpath,\n\t\t\t\t\t\tfromImmutablePath: () => null,\n\t\t\t\t\t\tfromManagedItem: info => ({\n\t\t\t\t\t\t\tsafeTime: 0,\n\t\t\t\t\t\t\ttimestampHash: info,\n\t\t\t\t\t\t\thash: info || \"\"\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tfromSymlink: (fle, target, callback) => {\n\t\t\t\t\t\t\tcallback(null, {\n\t\t\t\t\t\t\t\ttimestampHash: target,\n\t\t\t\t\t\t\t\thash: target,\n\t\t\t\t\t\t\t\tsymlinks: new Set([target])\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t\tfromFile: (file, stat, callback) => {\n\t\t\t\t\t\t\tthis._getFileTimestampAndHash(file, callback);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tfromDirectory: (directory, stat, callback) => {\n\t\t\t\t\t\t\tthis.contextTshQueue.increaseParallelism();\n\t\t\t\t\t\t\tthis.contextTshQueue.add(directory, (err, result) => {\n\t\t\t\t\t\t\t\tthis.contextTshQueue.decreaseParallelism();\n\t\t\t\t\t\t\t\tcallback(err, result);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * @param {string[]} files files\n\t\t\t\t\t\t * @param {(Partial<TimestampAndHash> & Partial<ContextTimestampAndHash> | string | null)[]} results results\n\t\t\t\t\t\t * @returns {ContextTimestampAndHash} tsh\n\t\t\t\t\t\t */\n\t\t\t\t\t\treduce: (files, results) => {\n\t\t\t\t\t\t\tlet symlinks = undefined;\n\n\t\t\t\t\t\t\tconst tsHash = createHash(this._hashFunction);\n\t\t\t\t\t\t\tconst hash = createHash(this._hashFunction);\n\n\t\t\t\t\t\t\tfor (const file of files) {\n\t\t\t\t\t\t\t\ttsHash.update(file);\n\t\t\t\t\t\t\t\thash.update(file);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlet safeTime = 0;\n\t\t\t\t\t\t\tfor (const entry of results) {\n\t\t\t\t\t\t\t\tif (!entry) {\n\t\t\t\t\t\t\t\t\ttsHash.update(\"n\");\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (typeof entry === \"string\") {\n\t\t\t\t\t\t\t\t\ttsHash.update(\"n\");\n\t\t\t\t\t\t\t\t\thash.update(entry);\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (entry.timestamp) {\n\t\t\t\t\t\t\t\t\ttsHash.update(\"f\");\n\t\t\t\t\t\t\t\t\ttsHash.update(`${entry.timestamp}`);\n\t\t\t\t\t\t\t\t} else if (entry.timestampHash) {\n\t\t\t\t\t\t\t\t\ttsHash.update(\"d\");\n\t\t\t\t\t\t\t\t\ttsHash.update(`${entry.timestampHash}`);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (entry.symlinks !== undefined) {\n\t\t\t\t\t\t\t\t\tif (symlinks === undefined) symlinks = new Set();\n\t\t\t\t\t\t\t\t\taddAll(entry.symlinks, symlinks);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (entry.safeTime) {\n\t\t\t\t\t\t\t\t\tsafeTime = Math.max(safeTime, entry.safeTime);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\thash.update(entry.hash);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst result = {\n\t\t\t\t\t\t\t\tsafeTime,\n\t\t\t\t\t\t\t\ttimestampHash: /** @type {string} */ (tsHash.digest(\"hex\")),\n\t\t\t\t\t\t\t\thash: /** @type {string} */ (hash.digest(\"hex\"))\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tif (symlinks) result.symlinks = symlinks;\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t(err, result) => {\n\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\tthis._contextTshs.set(path, result);\n\t\t\t\t\t\treturn callback(null, result);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {ContextTimestampAndHash} entry entry\n\t * @param {function((Error | null)=, ResolvedContextTimestampAndHash=): void} callback callback\n\t * @returns {void}\n\t */\n\t_resolveContextTsh(entry, callback) {\n\t\tconst hashes = [];\n\t\tconst tsHashes = [];\n\t\tlet safeTime = 0;\n\t\tprocessAsyncTree(\n\t\t\tentry.symlinks,\n\t\t\t10,\n\t\t\t(target, push, callback) => {\n\t\t\t\tthis._getUnresolvedContextTsh(target, (err, entry) => {\n\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\tif (entry) {\n\t\t\t\t\t\thashes.push(entry.hash);\n\t\t\t\t\t\tif (entry.timestampHash) tsHashes.push(entry.timestampHash);\n\t\t\t\t\t\tif (entry.safeTime) {\n\t\t\t\t\t\t\tsafeTime = Math.max(safeTime, entry.safeTime);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (entry.symlinks !== undefined) {\n\t\t\t\t\t\t\tfor (const target of entry.symlinks) push(target);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcallback();\n\t\t\t\t});\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tif (err) return callback(err);\n\t\t\t\tconst hash = createHash(this._hashFunction);\n\t\t\t\tconst tsHash = createHash(this._hashFunction);\n\t\t\t\thash.update(entry.hash);\n\t\t\t\tif (entry.timestampHash) tsHash.update(entry.timestampHash);\n\t\t\t\tif (entry.safeTime) {\n\t\t\t\t\tsafeTime = Math.max(safeTime, entry.safeTime);\n\t\t\t\t}\n\t\t\t\thashes.sort();\n\t\t\t\tfor (const h of hashes) {\n\t\t\t\t\thash.update(h);\n\t\t\t\t}\n\t\t\t\ttsHashes.sort();\n\t\t\t\tfor (const h of tsHashes) {\n\t\t\t\t\ttsHash.update(h);\n\t\t\t\t}\n\t\t\t\tcallback(\n\t\t\t\t\tnull,\n\t\t\t\t\t(entry.resolved = {\n\t\t\t\t\t\tsafeTime,\n\t\t\t\t\t\ttimestampHash: /** @type {string} */ (tsHash.digest(\"hex\")),\n\t\t\t\t\t\thash: /** @type {string} */ (hash.digest(\"hex\"))\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n\n\t_getManagedItemDirectoryInfo(path, callback) {\n\t\tthis.fs.readdir(path, (err, elements) => {\n\t\t\tif (err) {\n\t\t\t\tif (err.code === \"ENOENT\" || err.code === \"ENOTDIR\") {\n\t\t\t\t\treturn callback(null, EMPTY_SET);\n\t\t\t\t}\n\t\t\t\treturn callback(err);\n\t\t\t}\n\t\t\tconst set = new Set(\n\t\t\t\t/** @type {string[]} */ (elements).map(element =>\n\t\t\t\t\tjoin(this.fs, path, element)\n\t\t\t\t)\n\t\t\t);\n\t\t\tcallback(null, set);\n\t\t});\n\t}\n\n\t_getManagedItemInfo(path, callback) {\n\t\tconst dir = dirname(this.fs, path);\n\t\tthis.managedItemDirectoryQueue.add(dir, (err, elements) => {\n\t\t\tif (err) {\n\t\t\t\treturn callback(err);\n\t\t\t}\n\t\t\tif (!elements.has(path)) {\n\t\t\t\t// file or directory doesn't exist\n\t\t\t\tthis._managedItems.set(path, \"*missing\");\n\t\t\t\treturn callback(null, \"*missing\");\n\t\t\t}\n\t\t\t// something exists\n\t\t\t// it may be a file or directory\n\t\t\tif (\n\t\t\t\tpath.endsWith(\"node_modules\") &&\n\t\t\t\t(path.endsWith(\"/node_modules\") || path.endsWith(\"\\\\node_modules\"))\n\t\t\t) {\n\t\t\t\t// we are only interested in existence of this special directory\n\t\t\t\tthis._managedItems.set(path, \"*node_modules\");\n\t\t\t\treturn callback(null, \"*node_modules\");\n\t\t\t}\n\n\t\t\t// we assume it's a directory, as files shouldn't occur in managed paths\n\t\t\tconst packageJsonPath = join(this.fs, path, \"package.json\");\n\t\t\tthis.fs.readFile(packageJsonPath, (err, content) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tif (err.code === \"ENOENT\" || err.code === \"ENOTDIR\") {\n\t\t\t\t\t\t// no package.json or path is not a directory\n\t\t\t\t\t\tthis.fs.readdir(path, (err, elements) => {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t!err &&\n\t\t\t\t\t\t\t\telements.length === 1 &&\n\t\t\t\t\t\t\t\telements[0] === \"node_modules\"\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t// This is only a grouping folder e. g. used by yarn\n\t\t\t\t\t\t\t\t// we are only interested in existence of this special directory\n\t\t\t\t\t\t\t\tthis._managedItems.set(path, \"*nested\");\n\t\t\t\t\t\t\t\treturn callback(null, \"*nested\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.logger.warn(\n\t\t\t\t\t\t\t\t`Managed item ${path} isn't a directory or doesn't contain a package.json (see snapshot.managedPaths option)`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\treturn callback(err);\n\t\t\t\t}\n\t\t\t\tlet data;\n\t\t\t\ttry {\n\t\t\t\t\tdata = JSON.parse(content.toString(\"utf-8\"));\n\t\t\t\t} catch (e) {\n\t\t\t\t\treturn callback(e);\n\t\t\t\t}\n\t\t\t\tif (!data.name) {\n\t\t\t\t\tthis.logger.warn(\n\t\t\t\t\t\t`${packageJsonPath} doesn't contain a \"name\" property (see snapshot.managedPaths option)`\n\t\t\t\t\t);\n\t\t\t\t\treturn callback();\n\t\t\t\t}\n\t\t\t\tconst info = `${data.name || \"\"}@${data.version || \"\"}`;\n\t\t\t\tthis._managedItems.set(path, info);\n\t\t\t\tcallback(null, info);\n\t\t\t});\n\t\t});\n\t}\n\n\tgetDeprecatedFileTimestamps() {\n\t\tif (this._cachedDeprecatedFileTimestamps !== undefined)\n\t\t\treturn this._cachedDeprecatedFileTimestamps;\n\t\tconst map = new Map();\n\t\tfor (const [path, info] of this._fileTimestamps) {\n\t\t\tif (info) map.set(path, typeof info === \"object\" ? info.safeTime : null);\n\t\t}\n\t\treturn (this._cachedDeprecatedFileTimestamps = map);\n\t}\n\n\tgetDeprecatedContextTimestamps() {\n\t\tif (this._cachedDeprecatedContextTimestamps !== undefined)\n\t\t\treturn this._cachedDeprecatedContextTimestamps;\n\t\tconst map = new Map();\n\t\tfor (const [path, info] of this._contextTimestamps) {\n\t\t\tif (info) map.set(path, typeof info === \"object\" ? info.safeTime : null);\n\t\t}\n\t\treturn (this._cachedDeprecatedContextTimestamps = map);\n\t}\n}\n\nmodule.exports = FileSystemInfo;\nmodule.exports.Snapshot = Snapshot;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}