{"ast":null,"code":"'use strict';\n\nconst utils = require('./utils');\nconst makeRequest = require('./makeRequest');\nconst autoPagination = require('./autoPagination');\nconst makeAutoPaginationMethods = autoPagination.makeAutoPaginationMethods;\n/**\n * Create an API method from the declared spec.\n *\n * @param [spec.method='GET'] Request Method (POST, GET, DELETE, PUT)\n * @param [spec.path=''] Path to be appended to the API BASE_PATH, joined with\n *  the instance's path (e.g. 'charges' or 'customers')\n * @param [spec.fullPath=''] Fully qualified path to the method (eg. /v1/a/b/c).\n *  If this is specified, path should not be specified.\n * @param [spec.urlParams=[]] Array of required arguments in the order that they\n *  must be passed by the consumer of the API. Subsequent optional arguments are\n *  optionally passed through a hash (Object) as the penultimate argument\n *  (preceding the also-optional callback argument\n * @param [spec.encode] Function for mutating input parameters to a method.\n *  Usefully for applying transforms to data on a per-method basis.\n * @param [spec.host] Hostname for the request.\n */\nfunction stripeMethod(spec) {\n  if (spec.path !== undefined && spec.fullPath !== undefined) {\n    throw new Error(`Method spec specified both a 'path' (${spec.path}) and a 'fullPath' (${spec.fullPath}).`);\n  }\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    const callback = typeof args[args.length - 1] == 'function' && args.pop();\n    spec.urlParams = utils.extractUrlParams(spec.fullPath || this.createResourcePathWithSymbols(spec.path || ''));\n    const requestPromise = utils.callbackifyPromiseWithTimeout(makeRequest(this, args, spec, {}), callback);\n    // Please note `spec.methodType === 'search'` is beta functionality and this\n    // interface is subject to change/removal at any time.\n    if (spec.methodType === 'list' || spec.methodType === 'search') {\n      const autoPaginationMethods = makeAutoPaginationMethods(this, args, spec, requestPromise);\n      Object.assign(requestPromise, autoPaginationMethods);\n    }\n    return requestPromise;\n  };\n}\nmodule.exports = stripeMethod;","map":{"version":3,"names":["utils","require","makeRequest","autoPagination","makeAutoPaginationMethods","stripeMethod","spec","path","undefined","fullPath","Error","args","callback","length","pop","urlParams","extractUrlParams","createResourcePathWithSymbols","requestPromise","callbackifyPromiseWithTimeout","methodType","autoPaginationMethods","Object","assign","module","exports"],"sources":["C:/Users/galia/OneDrive/Escritorio/rent-a-bike-app/node_modules/stripe/lib/StripeMethod.js"],"sourcesContent":["'use strict';\nconst utils = require('./utils');\nconst makeRequest = require('./makeRequest');\nconst autoPagination = require('./autoPagination');\nconst makeAutoPaginationMethods = autoPagination.makeAutoPaginationMethods;\n/**\n * Create an API method from the declared spec.\n *\n * @param [spec.method='GET'] Request Method (POST, GET, DELETE, PUT)\n * @param [spec.path=''] Path to be appended to the API BASE_PATH, joined with\n *  the instance's path (e.g. 'charges' or 'customers')\n * @param [spec.fullPath=''] Fully qualified path to the method (eg. /v1/a/b/c).\n *  If this is specified, path should not be specified.\n * @param [spec.urlParams=[]] Array of required arguments in the order that they\n *  must be passed by the consumer of the API. Subsequent optional arguments are\n *  optionally passed through a hash (Object) as the penultimate argument\n *  (preceding the also-optional callback argument\n * @param [spec.encode] Function for mutating input parameters to a method.\n *  Usefully for applying transforms to data on a per-method basis.\n * @param [spec.host] Hostname for the request.\n */\nfunction stripeMethod(spec) {\n  if (spec.path !== undefined && spec.fullPath !== undefined) {\n    throw new Error(\n      `Method spec specified both a 'path' (${spec.path}) and a 'fullPath' (${spec.fullPath}).`\n    );\n  }\n  return function(...args) {\n    const callback = typeof args[args.length - 1] == 'function' && args.pop();\n    spec.urlParams = utils.extractUrlParams(\n      spec.fullPath || this.createResourcePathWithSymbols(spec.path || '')\n    );\n    const requestPromise = utils.callbackifyPromiseWithTimeout(\n      makeRequest(this, args, spec, {}),\n      callback\n    );\n    // Please note `spec.methodType === 'search'` is beta functionality and this\n    // interface is subject to change/removal at any time.\n    if (spec.methodType === 'list' || spec.methodType === 'search') {\n      const autoPaginationMethods = makeAutoPaginationMethods(\n        this,\n        args,\n        spec,\n        requestPromise\n      );\n      Object.assign(requestPromise, autoPaginationMethods);\n    }\n    return requestPromise;\n  };\n}\nmodule.exports = stripeMethod;\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,KAAK,GAAGC,OAAO,CAAC,SAAS,CAAC;AAChC,MAAMC,WAAW,GAAGD,OAAO,CAAC,eAAe,CAAC;AAC5C,MAAME,cAAc,GAAGF,OAAO,CAAC,kBAAkB,CAAC;AAClD,MAAMG,yBAAyB,GAAGD,cAAc,CAACC,yBAAyB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,YAAY,CAACC,IAAI,EAAE;EAC1B,IAAIA,IAAI,CAACC,IAAI,KAAKC,SAAS,IAAIF,IAAI,CAACG,QAAQ,KAAKD,SAAS,EAAE;IAC1D,MAAM,IAAIE,KAAK,CACZ,wCAAuCJ,IAAI,CAACC,IAAK,uBAAsBD,IAAI,CAACG,QAAS,IAAG,CAC1F;EACH;EACA,OAAO,YAAkB;IAAA,kCAANE,IAAI;MAAJA,IAAI;IAAA;IACrB,MAAMC,QAAQ,GAAG,OAAOD,IAAI,CAACA,IAAI,CAACE,MAAM,GAAG,CAAC,CAAC,IAAI,UAAU,IAAIF,IAAI,CAACG,GAAG,EAAE;IACzER,IAAI,CAACS,SAAS,GAAGf,KAAK,CAACgB,gBAAgB,CACrCV,IAAI,CAACG,QAAQ,IAAI,IAAI,CAACQ,6BAA6B,CAACX,IAAI,CAACC,IAAI,IAAI,EAAE,CAAC,CACrE;IACD,MAAMW,cAAc,GAAGlB,KAAK,CAACmB,6BAA6B,CACxDjB,WAAW,CAAC,IAAI,EAAES,IAAI,EAAEL,IAAI,EAAE,CAAC,CAAC,CAAC,EACjCM,QAAQ,CACT;IACD;IACA;IACA,IAAIN,IAAI,CAACc,UAAU,KAAK,MAAM,IAAId,IAAI,CAACc,UAAU,KAAK,QAAQ,EAAE;MAC9D,MAAMC,qBAAqB,GAAGjB,yBAAyB,CACrD,IAAI,EACJO,IAAI,EACJL,IAAI,EACJY,cAAc,CACf;MACDI,MAAM,CAACC,MAAM,CAACL,cAAc,EAAEG,qBAAqB,CAAC;IACtD;IACA,OAAOH,cAAc;EACvB,CAAC;AACH;AACAM,MAAM,CAACC,OAAO,GAAGpB,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}